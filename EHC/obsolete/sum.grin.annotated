module "sum"
{ $_Cons $_x1~1 $_x2~2
    = { unit (#0/C/$_Cons 2 $_x1~1 $_x2~2)} 

@_Cons = C_Cons[_, _x1~1, _x2~2]
_x1~1 = Union [_m~13]
_x2~2 = Union [_5_0_44]
-----------------------------------

; $_EQ 
    = { unit (#0/C/$_EQ 0)} 

@_EQ    = C_EQ [_]
_EQ     = {_EQ}
{_EQ}   = [ F_EQ[_] ] join @_EQ
-----------------------------------

; $_False 
    = { unit (#0/C/$_False 0)} 

@_False    = C_False [_]
_False     = {_False}
{_False}   = [ F_False[_] ] join @_False
-----------------------------------

; $_GT 
    = { unit (#1/C/$_GT 0)} 

@_GT    = C_GT [_]
_GT     = {_GT}
{_GT}   = [ F_GT[_] ] join @_GT
-----------------------------------

; $_LT 
    = { unit (#2/C/$_LT 0)} 

@_LT    = C_LT [_]
_LT     = {_LT}
{_LT}   = [ F_LT[_] ] join @_LT
-----------------------------------

; $_Nil 
    = { unit (#1/C/$_Nil 0)} 

@_Nil    = C_Nil [_]
_Nil     = {_Nil}
{_Nil}   = [ F_Nil[_] ] join @_Nil
-----------------------------------

; $_True 
    = { unit (#1/C/$_True 0)} 

@_True    = C_True [_]
_True     = {_True}
{_True}   = [ F_True[_] ] join @_True
-----------------------------------

; $_add $_9_0_12_1 $_9_0_12_2
    = { eval $_9_0_12_1 ; \(#0/C/$_Int $__ $__9_0_12_1) ->

@eval@_9_0_12_1 = Eval _9_0_12_1
__9_0_12_1      = @eval@_9_0_12_1 !! C_Int !! 1

        eval $_9_0_12_2 ; \(#0/C/$_Int $__ $__9_0_12_2) ->

@eval@_9_0_12_2 = Eval _9_0_12_2
__9_0_12_2      = @eval@_9_0_12_2 !! C_Int !! 1

        ffi primAddInt $__9_0_12_1 $__9_0_12_2 ; \(#U $_9_0_12_0) ->

@primAddInt     = Nothing -- [ U[{BAS}] ]
_9_0_12_0       = @primAddInt !! U !! 0   == Nothing -- {BAS}

        unit (#0/C/$_Int 1 $_9_0_12_0)
      } 

@_add           = C_Int [_, _9_0_12_0]
_9_0_12_1       = Union [_n~22_2, _m~13]
_9_0_12_2       = Union [_5_0_31, _9_0_56_1]
-----------------------------------

; $_compare $_9_0_13_1 $_9_0_13_2
    = { eval $_9_0_13_1 ; \(#0/C/$_Int $__ $__9_0_13_1) ->

@eval@_9_0_13_1 = Eval _9_0_13_1
__9_0_13_1      = @eval@_9_0_13_1 !! C_Int !! 1

        eval $_9_0_13_2 ; \(#0/C/$_Int $__ $__9_0_13_2) ->

@eval@_9_0_13_2 = Eval _9_0_13_2
__9_0_13_2      = @eval@_9_0_13_2 !! C_Int !! 1

        ffi primCmpInt $__9_0_13_1 $__9_0_13_2
      } 

@primCmpInt     = Nothing -- [ C_LT[{BAS}], C_GT[{BAS}], C_EQ[{BAS}] ]
@_compare       = Union [@primCmpInt] == Nothing -- [ C_LT[{BAS}], C_GT[{BAS}], C_EQ[{BAS}] ]
_9_0_13_1       = Union [_x~5]
_9_0_13_2       = Union [_y~6]
-----------------------------------

; $_gt $_x~5 $_y~6
    = { store (#0/F/$_compare 2 $_x~5 $_y~6) ; \$_0_66_0~7_0 ->

_0_66_0~7_0     = {1}
{1}             = [ F_compare[_, _x~5, _y~6] ] join @_compare

        unit $_0_66_0~7_0 ; \$_9_0_21_0 ->

_9_0_21_0     = Union [_0_66_0~7_0]

        eval $_9_0_21_0 ; \$_0_66_0!~8_0 ->

_0_66_0!~8_0    = Eval _9_0_21_0

        case $_0_66_0!~8_0 of
          { (#0/C/$_EQ $__)
                -> { unit $_False ; \$_9_0_24_0 ->

_9_0_24_0          = Union [_False]

                     eval $_9_0_24_0
                   } 

@alt0@_0_66_0!~8_0 = Eval _9_0_24_0

          ; (#1/C/$_GT $__)
                -> { unit $_True ; \$_9_0_26_0 ->

_9_0_26_0          = Union [_True]

                     eval $_9_0_26_0
                   } 

@alt1@_0_66_0!~8_0 = Eval _9_0_26_0

          ; (#2/C/$_LT $__)
                -> { unit $_False ; \$_9_0_28_0 ->

_9_0_28_0          = Union [_False]

                     eval $_9_0_28_0
                   } 

@alt2@_0_66_0!~8_0 = Eval _9_0_28_0

          } 
      } 

@_gt  = Union [@alt0@_0_66_0!~8_0, @alt1@_0_66_0!~8_0, @alt2@_0_66_0!~8_0]
_x~5  = Union [_m~13]
_y~6  = Union [_n~14]
-----------------------------------

; rec
    { $_sum $_l~19
        = { unit $_l~19 ; \$_9_0_30_0 ->

_9_0_30_0      = Union [_l~19]

            eval $_9_0_30_0 ; \$_0_139_0!~21_0 ->

_0_139_0!~21_0 = Eval _9_0_30_0

            case $_0_139_0!~21_0 of
              { (#0/C/$_Cons $__ $_n~22_2 $_ns~22_4)

_n~22_2        = _0_139_0!~21_0 !! C_Cons !! 1
_n~22_4        = _0_139_0!~21_0 !! C_Cons !! 2

                    -> { store (#0/F/$_sum 1 $_ns~22_4) ; \$_5_0_31 ->

_5_0_31       = {2}
{2}           = [ F_sum [ _, _ns~22_4] ] join @_sum

                         store (#0/F/$_add 2 $_n~22_2 $_5_0_31) ; \$_5_0_29 ->

_5_0_29       = {3}
{3}           = [ F_add [ _, _n~22_2, _5_0_31] ] join @_add

                         unit $_5_0_29 ; \$_9_0_44_0 ->

_9_0_44_0     = Union [_5_0_29]

                         eval $_9_0_44_0
                       } 

@alt0@_0_139_0!~21_0 = Eval _9_0_44_0

              ; (#1/C/$_Nil $__)
                    -> { unit (#0/C/$_Int 1 0)} 
              } 

@alt1@_0_139_0!~21_0 = [ Int [ _, _ ] ]

          } 

@_sum         = Union [@alt0@_0_139_0!~21_0, @alt1@_0_139_0!~21_0]
_l~19         = Union [_ns~22_4, _5_0_50]

    } 
-----------------------------------

; rec
    { $_upto $_m~13 $_n~14
        = { store (#0/F/$_gt 2 $_m~13 $_n~14) ; \$_0_99_0~15_0 ->

_0_99_0~15_0  = {3}
{3}           = [ F_gt[_, _m~13, _n~14] ] join @_gt

            unit $_0_99_0~15_0 ; \$_9_0_54_0 ->

_9_0_54_0     = Union [_0_99_0~15_0]

            eval $_9_0_54_0 ; \$_0_99_0!~16_0 ->

_0_99_0!~16_0 = Eval _9_0_54_0

            store (#0/C/$_Int 1 1) ; \$_9_0_56_1 ->

_9_0_56_1     = {4}
{4}           = [ C_Int[_, _] ]

            store (#0/F/$_add 2 $_m~13 $_9_0_56_1) ; \$_5_0_46 ->

_5_0_46       = {5}
{5}           = [ F_add[_, _m~13, _9_0_56_1] ] join @_add

            store (#0/F/$_upto 2 $_5_0_46 $_n~14) ; \$_5_0_44 ->

_5_0_44       = {6}
{6}           = [ F_upto[_, _5_0_46, _n~14] ] join @_upto

            store (#0/F/$_Cons 2 $_m~13 $_5_0_44) ; \$_5_0_42 ->

_5_0_42       = {7}
{7}           = [ F_Cons[_, _m~13, _5_0_44] ] join @_cons

            case $_0_99_0!~16_0 of
              { (#0/C/$_False $__)
                    -> { unit $_5_0_42 ; \$_9_0_77_0 ->

_9_0_77_0           = Union [_5_0_42]

                         eval $_9_0_77_0
                       } 

@alt0@_0_99_0!~16_0 = Eval _9_0_77_0

              ; (#1/C/$_True $__)
                    -> { unit $_Nil ; \$_9_0_79_0 ->

_9_0_79_0           = Union [_Nil]

                         eval $_9_0_79_0
                       } 

@alt1@_0_99_0!~16_0 = Eval _9_0_79_0

              } 
          } 

@_upto = Union [@alt0@_0_99_0!~16_0, @alt1@_0_99_0!~16_0]
_m~13  = Union [_5_0_46, _9_0_82_0]
_n~14  = Union [_n~14, _9_0_82_1]

    } 
-----------------------------------

; $_5_0_50 
    = { store (#0/C/$_Int 1 1) ; \$_9_0_82_0 ->

_9_0_82_0 = {8}
{8}       = [ C_Int(_,_) ]

        store (#0/C/$_Int 1 10) ; \$_9_0_82_1 ->

_9_0_82_1 = {9}
{9}       = [ C_Int(_,_) ]

        $_upto $_9_0_82_0 $_9_0_82_1
      } 

@_5_0_50  = @_upto
_5_0_50   = {_5_0_50}
{_5_0_50} = [ F__5_0_50[_] ] join @_5_0_50

-----------------------------------

; main 
    = { $_sum $_5_0_50} 

@main  = @sum
main   = {main}
{main} = [ F_main[_] ] join @main

; apply $_f_9_0_1_0 $_a_9_0_1_1
    = { case $_f_9_0_1_0 of
          { (#0/P/1/apply $__ $_9_0_5_0)
                -> { apply $_9_0_5_0 $_a_9_0_1_1} 
          ; (#0/P/2/apply $__)
                -> { unit (#0/P/1/apply 1 $_a_9_0_1_1)} 
          } 
      } 
; eval $_9_0_0_0
    = { fetch $_9_0_0_0  ; \$_9_0_0_1 ->
        case $_9_0_0_1 of
          { (#0/C/$_Int $__ $_9_0_2_0)
                -> { unit $_9_0_0_1} 
          ; (#0/C/$_Char $__ $_9_0_2_1_0)
                -> { unit $_9_0_0_1} 
          ; (#0/C/$_Cons $__ $_9_0_2_2_0 $_9_0_2_2_1)
                -> { unit $_9_0_0_1} 
          ; (#1/C/$_Nil $__)
                -> { unit $_9_0_0_1} 
          ; (#0/C/$_False $__)
                -> { unit $_9_0_0_1} 
          ; (#1/C/$_True $__)
                -> { unit $_9_0_0_1} 
          ; (#0/C/$_EQ $__)
                -> { unit $_9_0_0_1} 
          ; (#1/C/$_GT $__)
                -> { unit $_9_0_0_1} 
          ; (#2/C/$_LT $__)
                -> { unit $_9_0_0_1} 
          ; (#0/P/1/apply $__ $_~9_0_5_0)
                -> { unit $_9_0_0_1} 
          ; (#0/P/2/apply $__)
                -> { unit $_9_0_0_1} 
          ; (#0/F/$_Cons $__ $_9_0_3_1 $_9_0_3_2)
                -> { $_Cons $_9_0_3_1 $_9_0_3_2 ; \$_9_0_3_0 ->
                     update $_9_0_0_0 $_9_0_3_0 ; \() ->
                     unit $_9_0_3_0
                   } 
          ; (#0/F/$_add $__ $_9_0_3_1_1 $_9_0_3_1_2)
                -> { $_add $_9_0_3_1_1 $_9_0_3_1_2 ; \$_9_0_3_1_0 ->
                     update $_9_0_0_0 $_9_0_3_1_0 ; \() ->
                     unit $_9_0_3_1_0
                   } 
          ; (#0/F/apply $__ $_9_0_3_2_1 $_9_0_3_2_2)
                -> { apply $_9_0_3_2_1 $_9_0_3_2_2 ; \$_9_0_3_2_0 ->
                     update $_9_0_0_0 $_9_0_3_2_0 ; \() ->
                     unit $_9_0_3_2_0
                   } 
          ; (#0/F/$_compare $__ $_9_0_3_3_1 $_9_0_3_3_2)
                -> { $_compare $_9_0_3_3_1 $_9_0_3_3_2 ; \$_9_0_3_3_0 ->
                     update $_9_0_0_0 $_9_0_3_3_0 ; \() ->
                     unit $_9_0_3_3_0
                   } 
          ; (#0/F/$_gt $__ $_9_0_3_4_1 $_9_0_3_4_2)
                -> { $_gt $_9_0_3_4_1 $_9_0_3_4_2 ; \$_9_0_3_4_0 ->
                     update $_9_0_0_0 $_9_0_3_4_0 ; \() ->
                     unit $_9_0_3_4_0
                   } 
          ; (#0/F/$_sum $__ $_9_0_3_5_1)
                -> { $_sum $_9_0_3_5_1 ; \$_9_0_3_5_0 ->
                     update $_9_0_0_0 $_9_0_3_5_0 ; \() ->
                     unit $_9_0_3_5_0
                   } 
          ; (#0/F/$_upto $__ $_9_0_3_6_1 $_9_0_3_6_2)
                -> { $_upto $_9_0_3_6_1 $_9_0_3_6_2 ; \$_9_0_3_6_0 ->
                     update $_9_0_0_0 $_9_0_3_6_0 ; \() ->
                     unit $_9_0_3_6_0
                   } 
          ; (#0/F/$_5_0_50 $__)
                -> { $_5_0_50 ; \$_9_0_4_0 ->
                     update $_9_0_0_0 $_9_0_4_0 ; \() ->
                     unit $_9_0_4_0
                   } 
          ; (#0/F/$_EQ $__)
                -> { $_EQ ; \$_9_0_4_1_0 ->
                     update $_9_0_0_0 $_9_0_4_1_0 ; \() ->
                     unit $_9_0_4_1_0
                   } 
          ; (#0/F/$_False $__)
                -> { $_False ; \$_9_0_4_2_0 ->
                     update $_9_0_0_0 $_9_0_4_2_0 ; \() ->
                     unit $_9_0_4_2_0
                   } 
          ; (#0/F/$_GT $__)
                -> { $_GT ; \$_9_0_4_3_0 ->
                     update $_9_0_0_0 $_9_0_4_3_0 ; \() ->
                     unit $_9_0_4_3_0
                   } 
          ; (#0/F/$_LT $__)
                -> { $_LT ; \$_9_0_4_4_0 ->
                     update $_9_0_0_0 $_9_0_4_4_0 ; \() ->
                     unit $_9_0_4_4_0
                   } 
          ; (#0/F/$_Nil $__)
                -> { $_Nil ; \$_9_0_4_5_0 ->
                     update $_9_0_0_0 $_9_0_4_5_0 ; \() ->
                     unit $_9_0_4_5_0
                   } 
          ; (#0/F/$_True $__)
                -> { $_True ; \$_9_0_4_6_0 ->
                     update $_9_0_0_0 $_9_0_4_6_0 ; \() ->
                     unit $_9_0_4_6_0
                   } 
          ; (#0/F/main $__)
                -> { main ; \$_9_0_4_7_0 ->
                     update $_9_0_0_0 $_9_0_4_7_0 ; \() ->
                     unit $_9_0_4_7_0
                   } 
          } 
      } 
} 
ctags
{ $_Int = $_Int 0 1; $_Char = $_Char 0 1; $_List = $_Cons 0 2 | $_Nil 1 0; $_Bool = $_False 0 0 | $_True 1 0; $_Ordering = $_EQ 0 0 | $_GT 1 0 | $_LT 2 0} 
evalmap
{ #0/C/$_Int 1 -> unit; #0/C/$_Char 1 -> unit; #0/C/$_Cons 2 -> unit; #1/C/$_Nil 0 -> unit; #0/C/$_False 0 -> unit; #1/C/$_True 0 -> unit; #0/C/$_EQ 0 -> unit; #1/C/$_GT 0 -> unit; #2/C/$_LT 0 -> unit; #0/P/1/apply 1 -> unit; #0/P/2/apply 0 -> unit; #0/F/$_Cons 2 -> $_Cons; #0/F/$_add 2 -> $_add; #0/F/apply 2 -> apply; #0/F/$_compare 2 -> $_compare; #0/F/$_gt 2 -> $_gt; #0/F/$_sum 1 -> $_sum; #0/F/$_upto 2 -> $_upto; #0/F/$_5_0_50 0 -> $_5_0_50; #0/F/$_EQ 0 -> $_EQ; #0/F/$_False 0 -> $_False; #0/F/$_GT 0 -> $_GT; #0/F/$_LT 0 -> $_LT; #0/F/$_Nil 0 -> $_Nil; #0/F/$_True 0 -> $_True; #0/F/main 0 -> main} 
applymap
{ #0/P/1/apply 1 -> apply; #0/P/2/apply 0 -> #0/P/1/apply} 
