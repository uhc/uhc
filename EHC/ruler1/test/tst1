preamble ""

scheme expr1
  = Gamma :- (expr) : (sigma)
  = Gamma :-...expr expr : sigma

rules expr1 "Type checking for expr" =
  rule e_app1 = 
    judge expr1 Gamma :- expr.2 :: sigma..a
    judge expr1 Gamma :- expr.1 : (sigma..a -> sigma)
    cond v "fresh"
    -
    judge expr1 Gamma :- (expr.1 ^^ expr.2) : sigma
  
  rule e_id1 =
    cond (ident :-> sigma) `elem` Gamma
    -
    judge expr1 Gamma :- ident : sigma
    
rules expr2 "Type checking for expr" =
  rule e_app2 =
    judge expr2 Gamma :- expr.2 : sigma..a
    judge expr2 Gamma :- expr.1 : (sigma..a -> sigma)
    cond v "fresh"
    -
    judge expr2 Gamma :- (expr.1 ^^ expr.2) : sigma
    
