%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Infers exposed annotations
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[1 hs module {%{EH}Ty.InfuseDataTruncs}
%%]

%%[7_2 hs import({%{EH}Base.Common}, {%{EH}Ty}, {%{EH}EH}, qualified Data.Map as Map, Data.Map(Map), Data.Maybe, qualified Data.Set as Set, Data.Set(Set), {%{EH}Ty.InferExposedAnns})
%%]

%%[7_2 ag import({Ty/AbsSyn})
%%]

%%[7_2 hs export(infuseDataTrunc)
%%]


Infers the set of exposed annotations for each type constructor and collects these
all in both a map from annotation to such a set, and a set that contains all of the
annotations that are inferred.

%%[7_2.interface hs

infuseDataTrunc :: ExposedAnnMap -> Ty -> Ty
infuseDataTrunc exposedAnnMap ty
  = let inh = Inh_TyAGItf { exposedAnnMap_Inh_TyAGItf = exposedAnnMap }
        syn = wrap_TyAGItf (sem_TyAGItf (TyAGItf_AGItf ty)) inh
     in exposedTy_Syn_TyAGItf syn

%%]


%%[7_2

WRAPPER TyAGItf

%%]


%%[7_2

ATTR TyAGItf [|| exposedTy : Ty ]
ATTR AllTyAndFlds [|| exposedTy : SELF ]
ATTR TyAGItf AllTyTy [ exposedAnnMap : ExposedAnnMap ||]

SEM Ty
  | Ann
      loc.mAnns = Map.lookup @ann @lhs.exposedAnnMap
      lhs.exposedTy = maybe @loc.exposedTy (Ty_Ann @ann . flip Ty_TruncTyCon @ty.exposedTy) @loc.mAnns

%%]
