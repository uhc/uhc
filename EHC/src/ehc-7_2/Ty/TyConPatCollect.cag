%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Collect type constructor sequence signatures to create a matching function, used
%%% to determine if a type is to be expanded during annotation
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


Construct the constructor sequence check function (scoped).

%%[7_2.mkChkFun

ATTR AGItf -> Expr AGItf -> PatExpr AGItf -> DataField [ tyConSeqChkF : AnnTyConSeqChkF ||]
SEM AGItf
  | AGItf  expr.tyConSeqChkF = \_ -> False

SEM Expr
  | Let    loc.tyConSeqChkF = mkTyConSeqChkF @loc.tyConPatsL @loc.allTyConsL

%%]


Collect all the constructor sequence patterns that are in scope.

%%[7_2.collectPats

ATTR AGItf -> Decl [|| tyConPatsCollect USE {<+>} {emptySeq} : {Seq TyConSeqPat} ]
SEM Decl
  | AnnSigExpSeq  lhs.tyConPatsCollect = unitSeq @pat

ATTR AGItf -> Expr [ tyConPats : {Seq TyConSeqPat} ||]
SEM AGItf
  | AGItf  expr.tyConPats = emptySeq
SEM Expr
  | Let    loc.tyConPats  = @lhs.tyConPats <+> @decls.tyConPatsCollect
           loc.tyConPatsL = seqToList @loc.tyConPats

%%]


Collect all type constructors and value constructors that are in scope.

%%[7_2.allTyCons

ATTR AGItf -> DataConstr [|| allTyConsCollect USE {<+>} {emptySeq} : {Seq HsName} ]
SEM Decl
  | Data  lhs.allTyConsCollect = unitSeq @tyNm <+> @constrs.allTyConsCollect

SEM DataConstr
  | Constr  lhs.allTyConsCollect = unitSeq @conNm

ATTR AGItf -> Expr AGItf -> PatExpr [ allTyCons : {Seq HsName} ||]
SEM AGItf
  | AGItf  expr.allTyCons = emptySeq
SEM Expr
  | Let    loc.allTyCons  = @lhs.allTyCons <+> @decls.allTyConsCollect
           loc.allTyConsL = seqToList @loc.allTyCons

%%]
