%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Decompose an annotated type for a pattern
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


We take the annotated type of a pattern and decompose to get the annotated type of each
named subpattern. The annotated type of each subpattern is synthesized into a map from
name of the binding to the annotated type. Predicates and quantors are stripped off the
type if needed.

%%[7_2

ATTR PatExpr Decl Decls [|| decomposedAnns USE {`Map.union`} {Map.empty} : DecomposedAnnMap ]

SEM PatExpr
  | Con
      -- A Con does not participate in the decomposed anns, since a pattern Con is different
      -- to the constructor Con. The pattern Con is the actual type, and the constructor Con
      -- builds the type. The uses of the pattern Con depend on the uses of the body it is
      -- defined in.
  | Var
      lhs.decomposedAnns = Map.singleton @nm @lhs.annPatTy
  | VarAs
      lhs.decomposedAnns = Map.singleton @nm @lhs.annPatTy `Map.union` @patExpr.decomposedAnns

%%]


We cover the pattern with an expanded representation of the annotated type. If the
annotated type is already of the "exp" type, then this overlay is a straightforward
one-to-one mapping. If it is of the "trunc" type, then we have to move the annotations
on the type constructor to the fields of the corresponding constructor of the
corresponding data type.

%%[7_2

ATTR PatExpr [|| annPatTys USE {`const`} {[]} : {[Ty]}]

SEM PatExpr
  | App  (arg.annPatTy, lhs.annPatTys) = let (ty : tys) = @func.annPatTys in (ty, tys)
  | Con  lhs.annPatTys        = maybe @loc.expandTruncTyCon id (tyToplevelAnnExpF @lhs.annPatTy @nm)
         loc.expandTruncTyCon = let anns    = tyToplevelTruncAnns @lhs.annPatTy
                                    args    = tyToplevelConArgs @lhs.annPatTy
                                    dtName  = tyToplevelConNm @lhs.annPatTy
                                    conName = @nm
                                 in @lhs.dtTrExpF anns args dtName conName
  | Rec  loc.annRecPatTys     = tyToplevelExts @lhs.annPatTy

%%]


Annotations on records are always of the "trunc" type, never of the "exp" type. The reason for this is
that an expanded representation doesn't make a difference in the first place (as with many more
type constructors, such as arrows) and now it is also quite trivial to support records. We only have to
extract the annotated portion of type that belongs to the given name, contained in the provided
annotated type.

%%[7_2.records

ATTR RecPatExpr [ annRecPatTys : {AssocL HsName Ty} ||]

SEM RecPatExpr
  | Ext  patExpr.annPatTy = maybe Ty_Any id (@loc.nm `lookup` @lhs.annRecPatTys)

%%]
