%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Pattern matching on type constructor sequences
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[1 hs module {%{EH}Ty.TyConPat}
%%]

%%[7_2 hs import({%{EH}Base.Common}, qualified Data.Map as Map, Data.Map(Map), Data.Maybe, qualified Data.Set as Set, Data.Set(Set))
%%]

%%[7_2 hs import(qualified {%{EH}Annotations.StateMachine} as SM, {%{EH}Annotations.StateMachine}(StateMachine), Data.List(nub))
%%]

%%[7_2 hs export(TyConSeqPat(..), isMatchingTyConSubSeq, mkTyConSeqChkF, AnnTyConSeqChkF)
%%]


These type constructor patterns are a simple form of path expressions. We use
these patterns when expanding data types. We maintain the current path of
expanded data types and when we want to expand a new data type, we check if
the "stack" of data types is satisfied by a pattern.

For instance, the stack A B C D means that we expanded A, from A expanded B,
from B expanded C and from C want to know if we can expand D. This stack
satisfies a pattern, if it is a _prefix_ of a string that would be accepted by
the language described by the pattern. I.e. the pattern AAA is satisfied by only
the stacks A, A A and A A A.

Expansion continues if at least one pattern succeeds. This will give problems
with patterns with wild cards, since it could allow an infinite expansion of
non-terminals non mentioned in the pattern but actually on the stack. So, we
continue expansion if and only if at least one pattern succeeds for the
entire stack and at least one pattern for each smallest substring that
encloses a non-terminal that occurs twice or more on the stack.

Check the implementation of the parser for concrete syntax.

%%[7_2.data

DATA AGItf
  | AGItf  pat : TyConSeqPat

DATA TyConSeqPat
  | Wild1                       -- match any type constructor
  | Wild    nm   : {HsName}     -- match any number of type constructors unequal to nm, followed by 1 nm
  | Con     nm   : {HsName}     -- match 1 nm
  | SubSeq  pat  : TyConSeqPat  -- match any subsequence of the pattern
  | Or      patL : TyConSeqPat  -- match at least one of the two patterns
            patR : TyConSeqPat
  | Seq     patL : TyConSeqPat  -- match the left pattern followed by the right pattern
            patR : TyConSeqPat            

%%]


%%[7_2.interface hs

isMatchingTyConSubSeq :: TyConSeqPat -> [HsName] -> Bool
isMatchingTyConSubSeq pat tokens
  = False -- disabled

{-
let allTyCons = nub $ tokens   -- not exactly all, but the missing ones do not matter
        inh = Inh_AGItf { allTrans_Inh_AGItf = allTyCons }
        syn = wrap_AGItf (sem_AGItf (AGItf_AGItf pat)) inh
        sm  = sm_Syn_AGItf syn
        res = SM.run sm 1 tokens
     in not (Set.null res)
-}

type AnnTyConSeqChkF = [HsName] -> Bool

mkTyConSeqChkF :: [TyConSeqPat] -> [HsName] ->  AnnTyConSeqChkF
mkTyConSeqChkF [] _ = \_ -> False
mkTyConSeqChkF allows allTyCons
  = \t -> False -- disabled

{-
let pat = foldr1 TyConSeqPat_Or allows
        inh = Inh_AGItf { allTrans_Inh_AGItf = allTyCons }
        syn = wrap_AGItf (sem_AGItf (AGItf_AGItf pat)) inh
        sm  = sm_Syn_AGItf syn
     in \tokens -> let tks = tokens : smallestEnclosingRepeatedTyConsSubsequence tokens
                       res = all (SM.accept sm 1) tks
                    in res
-}

smallestEnclosingRepeatedTyConsSubsequence :: [HsName] -> [[HsName]]
smallestEnclosingRepeatedTyConsSubsequence s
  = let mp      = foldr updateStats Map.empty (zip [0..] s)
        substrs = [ take (q+1-p) (drop p s)  | (p, q) <- Map.elems mp, p < q ]
        updateStats (p, c) = Map.insertWith (\(a,b) (c,d) -> (min a c, max b d)) c (p, p)
     in substrs

%%]


Generate a state machine from the pattern specification.

%%[7_2.machine

WRAPPER AGItf

ATTR AGItf [|| sm : {StateMachine Int HsName} ]
ATTR TyConSeqPat [| sm : {StateMachine Int HsName} uid : Int |]
ATTR TyConSeqPat [ fromS : Int toS : Int ||]

SEM AGItf
  | AGItf  pat.sm    = SM.empty
           pat.fromS = 1
           pat.toS   = 2
           pat.uid   = 3
           lhs.sm    = SM.addEndState 2 @pat.sm

ATTR AGItf TyConSeqPat [ allTrans : {[HsName]} ||]

ATTR TyConSeqPat [ addToS : {[Int]} ||]
SEM AGItf
  | AGItf  pat.addToS = []

SEM TyConSeqPat
  | Wild1   lhs.sm        = foldr (SM.addListTrans @lhs.fromS @lhs.allTrans) @lhs.sm (@lhs.toS : @lhs.addToS)
  
  | Wild    loc.sId       = @lhs.uid
            lhs.uid       = @lhs.uid+1
            loc.allTrans' = filter (/= @nm) @lhs.allTrans
            loc.sm1       = SM.addTrans @lhs.fromS @nm @lhs.toS @lhs.sm
            loc.sm2       = SM.addTrans @loc.sId @nm @lhs.toS @loc.sm1
            loc.sm3       = SM.addListTrans @lhs.fromS @allTrans' @loc.sId @loc.sm2
            loc.sm4       = SM.addListTrans @loc.sId @allTrans' @loc.sId @loc.sm3
            lhs.sm        = foldr (SM.addListTrans @lhs.fromS @lhs.allTrans) @loc.sm4 @lhs.addToS
  
  | Con     lhs.sm        = foldr (SM.addTrans @lhs.fromS @nm) @lhs.sm (@lhs.toS : @lhs.addToS)
  
  | SubSeq  pat.addToS    = @lhs.toS : @lhs.addToS
  
  | Seq     loc.sId       = @lhs.uid
            patL.uid      = @lhs.uid+1
            patL.toS      = @loc.sId
            patR.fromS    = @loc.sId

%%]
