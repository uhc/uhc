%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% And expansion/truncation constructs to a Ty.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Notice:
  *** Requires that the type already has Ann non-terminals just above type constructors and
      type variables.
  *** This code relies heavily upon copy rules, especially copy rules from local attributes
      to inherited/synthesized attributes. Take care of those, since there are some local attributes
      out there that implicitly participate in the propagation of values.

%%[1 hs module {%{EH}Ty.Trf.InfuseExp}
%%]

%%[7_2 hs import({%{EH}Base.Common}, {%{EH}Ty}, qualified Data.Map as Map, Data.Map(Map), Data.Maybe, qualified Data.Set as Set, Data.Set(Set))
%%]

%%[7_2 hs import({%{EH}EH}, {%{EH}Ty.AnnInferKind}, {%{EH}Ty.InferExposedAnns}, {%{EH}Ty.TyConPat}, {%{EH}VarMp})
%%]

%%[7_2 ag import({Ty/AbsSyn})
%%]

%%[7_2 hs export(infuseExp, MkExpTyConF, MkExpTyConFSyn, MkExpFSyn)
%%]


Infuse annotations by expansion of data type definitions. Expansion is not our default way of annotating a type,
since it is so detailed, that it results into a lot of annotations. The programmer can override this default by
providing allowed type constructor sequences.

%%[7_2.interface hs

type MkExpFSyn a    = VarMp -> UID -> (a, UID)
type MkExpTyConFSyn = (HsName, [Ty] -> Ty -> UID -> (Ty, UID))
type MkExpTyConF    = HsName -> [Ty] -> Ty -> UID -> (Ty, UID)

infuseExp :: AnnKindMap -> ExposedAnnEnv -> AnnTyConSeqChkF -> MkExpTyConF -> Set AnnDtMonoRestrict -> Ty -> UID -> (Ty, UID)
infuseExp kindInfo exposedAnnInfo tyConSeqCheckF mkExpTyConF dtMonos
  = fix
  where
    fix ty uid
      = let (ty', uid', didExp) = applyWrap ty uid
         in if didExp
            then fix ty' uid'
            else (ty', uid')
    applyWrap ty uid
      = let itf = TyAGItf_AGItf ty
            inh = Inh_TyAGItf { kindInfo_Inh_TyAGItf         = kindInfo
                              , exposedDtAnnInfo_Inh_TyAGItf = exposedAnnInfo
                              , dtMonos_Inh_TyAGItf          = dtMonos
                              , tyConSeqCheckF_Inh_TyAGItf   = tyConSeqCheckF
                              , mkExpTyConF_Inh_TyAGItf      = mkExpTyConF
                              , uid_Inh_TyAGItf              = uid
                              }
            syn = wrap_TyAGItf (sem_TyAGItf itf) inh
         in (annTy_Syn_TyAGItf syn, uid_Syn_TyAGItf syn, didExpansion_Syn_TyAGItf syn)

%%]

%%[7_2.wrapper
WRAPPER TyAGItf
%%]


Some parameters that are passed to the annotation function. Among this information is
a map from annotation to kind, which we can use to discover the kind of a type
constructor.

%%[7_2.inhParamPropagation

ATTR TyAGItf AllTy [ kindInfo : AnnKindMap exposedDtAnnInfo : ExposedAnnEnv dtMonos : {Set AnnDtMonoRestrict}
                     tyConSeqCheckF : AnnTyConSeqChkF mkExpTyConF : MkExpTyConF
                   ||]

%%]


Propagate some structural properties of a type. The are used to make a decision
about what non-terminals to insert.

%%[7_2.props

ATTR AllTy [ isToTheRightOfApp : Bool ||]
SEM TyAGItf
  | AGItf       ty.isToTheRightOfApp   = True
SEM Ty
  | App         func.isToTheRightOfApp = False
                arg.isToTheRightOfApp  = True

ATTR AllTy [ isBelowExp : Bool ||]
SEM TyAGItf
  | AGItf       ty.isBelowExp = False
SEM Ty
  | ExpTyCon    ty.isBelowExp  = True

ATTR AllTy [|| isTruncChildToTheLeft USE {`flipConst`} {False} : Bool ]
SEM Ty
  | App         loc.isTruncChildToTheLeft = @func.isTruncChildToTheLeft
  | Var Con     loc.isTruncChildToTheLeft = False
  | TruncTyCon  lhs.isTruncChildToTheLeft = True

ATTR AllTy [ ann : {Annotation Ty} ||]
SEM TyAGItf
  | AGItf  ty.ann = error "EHTyInfuseExp: no annotation encountered while expecting one"
SEM Ty
  | Ann    ty.ann = @ann

ATTR AllTy [|| isTyConOfKindStar USE {`flipConst`} {False} : Bool ]
SEM Ty
  | App  loc.isTyConOfKindStar = @func.isTyConOfKindStar
  | Con  loc.isTyConOfKindStar = maybe False (== kiStar) (Map.lookup @lhs.ann @lhs.kindInfo)

ATTR AllTy [ goExp : Bool ||]
SEM TyAGItf
  | AGItf  ty.goExp = False
  
ATTR AllTy [ isBelowTrunc : Bool ||]
SEM TyAGItf
  | AGItf       ty.isBelowTrunc  = False
SEM Ty
  | TruncTyCon  loc.isBelowTrunc = True

ATTR AllTy [ isOrigTyOfExp : Bool ||]
SEM TyAGItf
  | AGItf     ty.isOrigTyOfExp = False
SEM Ty
  | Con App   loc.isOrigTyOfExp = @lhs.isOrigTyOfExp || @loc.goExp
  | ExpTyCon  ty.isOrigTyOfExp  = True

ATTR AllTy [ stack : {[HsName]} ||]
SEM TyAGItf
  | AGItf     ty.stack = []
SEM Ty
  | ExpTyCon  loc.stack = @ty.conNmToTheLeft : @lhs.stack
SEM TyExpConstr
  | Constr    loc.stack = @nm : @lhs.stack

ATTR AllTy [|| conNmToTheLeft USE {`const`} {error "EHTyInfuseExp: No TyCon to the left"} : HsName ]
SEM Ty
  | App  loc.conNmToTheLeft = @func.conNmToTheLeft
  | Con  loc.conNmToTheLeft = @nm

ATTR AllTy [|| conArgsToTheLeft USE {<+>} {emptySeq} : {Seq Ty} ]
SEM Ty
  | App  loc.conArgsToTheLeft = @func.conArgsToTheLeft <+> unitSeq @arg.annTy
  | Con  loc.conArgsToTheLeft = emptySeq

ATTR TyAGItf AllTy [|| didExpansion USE {||} {False} : Bool ]
SEM Ty
  | Con  lhs.didExpansion = @loc.goExp
  | App  lhs.didExpansion = @loc.goExp || @func.didExpansion || @arg.didExpansion

%%]


Find out what non-terminals to insert:

@loc.goExp   -> Insert a Exp non-terminal just above this Con non-terminal, or
                series of applications.
@loc.goTrunc -> Insert a Trunc non-terminal just above this Con non-terminal.
neither      -> do nothing at this Con or App

%%[7_2.whatToDo

SEM Ty
  | Con App
      loc.isExpPossible = @lhs.isToTheRightOfApp
                          && not @lhs.isBelowTrunc
                          && not @lhs.isOrigTyOfExp
                          && (not @loc.isTruncChildToTheLeft || @loc.isTyConOfKindStar)
      loc.isExpAllowed  = @lhs.tyConSeqCheckF (reverse (@loc.conNmToTheLeft : @lhs.stack))
      loc.goExp         = @loc.isExpPossible && @loc.isExpAllowed
  | Con
      loc.goTrunc       = not @loc.goExp && not @lhs.isBelowTrunc && not @lhs.isOrigTyOfExp

%%]


Can never have enough unique numbers...

%%[7_2.uid

ATTR TyAGItf AllTy [| uid : UID |]

SEM Ty
  | Con  loc.uidTruncInh = @lhs.uid
         loc.uidExpInh   = @lhs.uid
         lhs.uid = if @loc.goTrunc
                   then @loc.uidTruncSyn
                   else if @loc.goExp
                        then @loc.uidExpSyn
                        else @lhs.uid

  | App  loc.uidExpInh = @arg.uid
         lhs.uid = if @loc.goExp
                   then @loc.uidExpSyn
                   else @lhs.uid

%%]


The annotated ty is returned in the annTy attribute. We potentially add a TyConExp
nonterminal just above the root of a series of applications or a TyConTrunc just
above a type constructor, depending on which action we are going to take.

%%[7_2.annTy

ATTR AllTyAndFlds [|| annTy : SELF ]
ATTR TyAGItf      [|| annTy : Ty ]

SEM Ty
  | Con  lhs.annTy = if @loc.goTrunc
                     then @loc.truncTy
                     else if @loc.goExp
                          then @loc.expTy
                          else @loc.annTy
  | App  lhs.annTy = if @loc.goExp
                     then @loc.expTy
                     else @loc.annTy

%%]


Insert Trunc non-terminals. A Trunc non-terminal terminates expansion of a
data type and uses less annotations (you can't for instance not choose a
different annotations for multiple occurrences of a type variable in a
data type), but works in case of recursive data types.

%%[7_2.insertTrunc

SEM Ty
  | Con  loc.truncTy                 = Ty_TruncTyCon @loc.anns @loc.annTy
         (loc.anns, loc.uidTruncSyn) = if @loc.isMonoRestricted
                                       then (@loc.annsFromEnv, @loc.uidTruncInh)
                                       else instantiateAnns @loc.uidTruncInh @loc.annsFromEnv
         loc.annsFromEnv             = Map.findWithDefault Set.empty @nm @lhs.exposedDtAnnInfo
         loc.isMonoRestricted        = AnnDtMonoRestrict_Global @nm `Set.member` @lhs.dtMonos

%%]


Insert Exp non-terminals. An Exp non-terminal inlines the data structure as
a tree into the type, allowing for more detailed annotations.

%%[7_2.insertExp
SEM Ty
  | Con App
      (loc.expTy, loc.uidExpSyn) = @lhs.mkExpTyConF @loc.conNmToTheLeft (seqToList @loc.conArgsToTheLeft) @loc.annTy @loc.uidExpInh
%%]


%%[7_2.util hs

flipConst = flip const

%%]
