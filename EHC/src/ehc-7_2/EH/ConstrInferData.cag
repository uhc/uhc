%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Annotation constraint inferencing for Data
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Annotated kind synthesize
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[7_2

ATTR TyVar [|| annKind : Ty ]
ATTR TyVars [|| annKindF : {Ty -> Ty} ]

SEM Decl
  | Data
      (loc.annResKind,_) = infuseAnn Map.empty kiStar @loc.annUniq
      loc.annKind        = @tyVars.annKindF @loc.annResKind

SEM TyVars
  | Cons  lhs.annKindF   = addAnn @loc.annUniq . mk1Arrow @hd.annKind . @tl.annKindF
  | Nil   lhs.annKindF   = id

SEM TyVar
  | Var  (loc.annKind,_) = infuseAnn Map.empty (@lhs.finKiVarMp |=> @loc.ki) @loc.annUniq

ATTR TyVar TyVars [|| kindOverruleMap USE {`Map.union`} {Map.empty} : {Map TyVarId Ty} ]
SEM TyVar
  | Var  lhs.kindOverruleMap = Map.singleton @loc.dtTyVarId @loc.annKind

ATTR AllData [ kindOverruleMap : {Map TyVarId Ty} ||]
SEM Decl
  | Data  constrs.kindOverruleMap = @tyVars.kindOverruleMap

%%]


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Composition map synthesize
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[7_2

ATTR AllDataField  [|| annCompMap USE {\+/} {Map.empty} : {Map HsName (AnnComp Ty)} ]
ATTR AllDataConstr [|| annCompMap USE {\-/} {Map.empty} : {Map HsName (AnnComp Ty)} ]

SEM Decl
  | Data  loc.annKindCompMap     = Map.intersectionWith (<==) @constrs.annCompMap @tyVars.annKindBindings
          loc.annKindCompConstrs = wrappedFromList (zipWith (\f u -> f u ()) (Map.elems @loc.annKindCompMap) @loc.constrUids1)
          loc.constrUids1        = mkInfNewLevUIDL @loc.constrUniq1

%%]


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Propagation of type variable/type constructor information (binding group, annotated kind)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[7_2

ATTR AllExpr AllCase AllPatExpr AllDecl AllData AllDataConstr AllTyExpr [ annKindMap : {Map HsName Ty} ||]
SEM AGItf
  | AGItf  (loc.annKindUniq1,loc.annKindUniq2,loc.annKindUniq3,loc.annKindUniq4, loc.annKindUniq5) = mkNewLevUID4 @loc.annKindUniq
  
           loc.kiArrow         = hsnArrow `mkConApp` [kiStar, hsnArrow `mkConApp` [kiStar, kiStar]]
           (loc.annArrow,_)    = infuseAnn Map.empty @loc.kiArrow @loc.annKindUniq1
           (loc.annInt,_)      = infuseAnn Map.empty kiStar @loc.annKindUniq2
           (loc.annChar,_)     = infuseAnn Map.empty kiStar @loc.annKindUniq3
           (loc.annEmptyRec,_) = infuseAnn Map.empty kiRow @loc.annKindUniq4
           (loc.annRec,_)      = infuseAnn Map.empty (hsnArrow `mkConApp` [kiRow, kiStar]) @loc.annKindUniq5
           loc.annKindMap      = Map.fromList [ (hsnArrow,    @loc.annArrow)
                                              , (hsnInt,      @loc.annInt)
                                              , (hsnChar,     @loc.annChar)
                                              , (hsnRowEmpty, @loc.annEmptyRec)
                                              , (hsnRec,      @loc.annRec)
                                              ]
SEM Expr
  | Let   loc.annKindMap = @decls.annKindBindings  `Map.union` @lhs.annKindMap
SEM Decl
  | Data  loc.annKindMap = @tyVars.annKindBindings `Map.union` @lhs.annKindMap

ATTR AllDecl AllTyVar [|| annKindBindings USE {`Map.union`} {Map.empty} : {Map HsName Ty} ]
SEM TyVar
  | Var   lhs.annKindBindings = Map.singleton @nm   @loc.annKind
SEM Decl
  | Data  lhs.annKindBindings = Map.singleton @tyNm @loc.annKind


ATTR AllExpr AllCase AllPatExpr AllDecl AllData AllDataConstr AllTyExpr [ bndgKindIdMap : {Map HsName BndgId} ||]
SEM AGItf
  | AGItf  loc.bndgKindIdMap = Map.map (const uidNull) @loc.annKindMap
SEM Expr
  | Let    loc.bndgKindIdMap = Map.map (const @loc.declsBndgId) @decls.annKindBindings `Map.union` @lhs.bndgKindIdMap
SEM Decl
  | Data   loc.bndgKindIdMap = Map.map (const @lhs.bndgId) @tyVars.annKindBindings `Map.union` @lhs.bndgKindIdMap


ATTR AllExpr AllCase AllPatExpr AllDecl AllData AllDataConstr AllTyExpr [|| kindScope USE {`mergeListMap`} {Map.empty} : {Map BndgId [Ty]} ]
SEM Decl
  | Data   lhs.kindScope = Map.singleton @lhs.bndgId [@loc.annKind] `mergeListMap` @constrs.kindScope
SEM DataField
  | Field  lhs.kindScope = Map.singleton @lhs.bndgId (Set.toList @loc.fieldKindScope)
SEM Expr
  | Let    lhs.kindScope = Map.singleton @loc.declsBndgId [] `mergeListMap` @decls.kindScope `mergeListMap` @body.kindScope

ATTR AllExpr AllCase AllPatExpr AllDecl AllData AllTyExpr [ annKindScope : {Map BndgId [Ty]} ||]
SEM AGItf
  | AGItf  loc.annKindScope     = Map.insert uidNull @loc.initialKindScope @expr.kindScope
           loc.initialKindScope = [ Map.findWithDefault (error "->") hsnArrow @loc.annKindMap
                                  , Map.findWithDefault (error "Int") hsnInt @loc.annKindMap
                                  , Map.findWithDefault (error "Char") hsnChar @loc.annKindMap
                                  , Map.findWithDefault (error "Rec") hsnRec @loc.annKindMap
                                  , Map.findWithDefault (error "RecEmpty") hsnRowEmpty @loc.annKindMap
                                  ]

ATTR AllData AllTyExpr [|| kindL USE {++} {[]} : TyL ]
SEM DataField
  | Field  lhs.kindL = [@loc.annKind]

ATTR AllData [ tyVarNameMap : {Map TyVarId HsName} ||]
ATTR TyVars [|| tyVarNameMap USE {`Map.union`} {Map.empty} : {Map TyVarId HsName} ]
ATTR TyVar [|| tyVarNameMap : {Map TyVarId HsName} ]

SEM Decl
  | Data  loc.tyVarNameMap = @tyVars.tyVarNameMap

SEM TyVar
  | Var   loc.tyVarNameMap = Map.singleton @loc.dtTyVarId @nm

%%]


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Aggegrate environments
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Assumes that names of datatypes are unique.
When flattening constraints, we need variance information. Types in a constraint can occur
at different programs in the AST, requiring different tygams and other environments. But,
if we assume that the name of a data type is not shadowed, then we can collect all these
environments into a single one and use that when solving.

%%[7_2

SEM AGItf
  | AGItf 
      loc.totalTyGam          = @expr.gathTyGam
      loc.totalTyConKindMap   = @loc.annKindMap `Map.union` @expr.gathTyConKindMap
      loc.totalTyConBndgIdMap = Map.fromList [ (tc, uidNull) | (tc,_) <- gamToAssocL @loc.tyGam ] `Map.union` @expr.gathTyConBndgIdMap

ATTR AllNT [| gathTyGam : TyGam | gathTyConKindMap USE {`Map.union`} {Map.empty} : {Map HsName Ty} gathTyConBndgIdMap USE {`Map.union`} {Map.empty} : {Map HsName BndgId} ]
SEM AGItf
  | AGItf
      loc.gathTyGam = @loc.tyGam

SEM Expr
  | Let
      decls.gathTyGam        = @loc.finTyGam `gamAddGam` @lhs.gathTyGam
      lhs.gathTyConKindMap   = @loc.annKindMap `Map.union` @decls.gathTyConKindMap `Map.union` @body.gathTyConKindMap
      lhs.gathTyConBndgIdMap = @loc.bndgKindIdMap `Map.union` @decls.gathTyConBndgIdMap `Map.union` @body.gathTyConBndgIdMap

%%]


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Constraint-set synthesize for each data type
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[7_2

ATTR AllTyExpr AllDataField AllDataConstr AllDecl [|| annKindConstrs USE {`wrappedSetUnion`} {wrappedSetEmpty} : {WrappedAnnConstrSet ()} ]

SEM Decl
  | Data  loc.annKindConstrs = @loc.propagationConstrs `wrappedSetUnion` @loc.annKindCompConstrs `wrappedSetUnion` @constrs.annKindConstrs
          loc.propagationConstrs = wrappedFromList (zipWith (\k u -> u #.. rightmostResultAnnotation @loc.annResKind =>= rightmostResultAnnotation k ..# ()) @constrs.kindL @loc.constrUids2)
          loc.constrUids2        = mkInfNewLevUIDL @loc.constrUniq2

SEM DataField
  | Field  (loc.kindMap, _) = inferAnnKindMap @lhs.finTyGam @lhs.kindOverruleMap @loc.annTy @loc.lUniqKindInfer
           (loc.annKindConstrs, loc.annCompMap, loc.annKind, loc.fieldKindScope, _)
             = inferTyConstr @loc.kindMap @lhs.annKindMap @lhs.bndgKindIdMap @loc.exposedAnnsMap @lhs.tyVarNameMap @loc.annTy @loc.lUniqConstrInfer

SEM Expr
  | Let   loc.bndgKindConstrs = @decls.annKindConstrs

%%]


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Collection of constraints in binding-groups
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[7_2

ATTR AllExpr AllDecl [|| annKindBndgConstrs USE {`Map.union`} {Map.empty} : {Map BndgId (WrappedAnnConstrSet ())} ]
SEM Expr
  | Let    loc.annKindBndgConstrs = @body.annKindBndgConstrs `Map.union` Map.singleton @loc.declsBndgId @loc.bndgKindConstrs

SEM AGItf
  | AGItf  loc.annKindBndgConstrs = @expr.annKindBndgConstrs

%%]


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Distribute collected constraints
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[7_2

ATTR AllExpr AllDecl AllCase [ annKindBndgConstrsSpread : {Map BndgId (WrappedAnnConstrSet ())} ||]
SEM AGItf
  | AGItf  loc.annKindBndgConstrsSpread = @loc.annKindBndgConstrs

%%]
