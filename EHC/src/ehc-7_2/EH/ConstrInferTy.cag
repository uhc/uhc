%%[1 hs module {%{EH}EH.ConstrInferTy}
%%]

%%[7_2 hs import({%{EH}Base.Common}, {%{EH}Ty}, {%{EH}Ty.AnnCommon}, {%{EH}EH}, qualified Data.Map as Map, Data.Map(Map), Data.Maybe, qualified Data.Set as Set, Data.Set(Set))
%%]

%%[7_2 hs import({%{EH}Ty.AnnInferKind}, {%{EH}VarMp}, {%{EH}Ty.Trf.Subst}, {%{EH}Substitutable}, {%{EH}Base.Opts}, {%{EH}Annotations.Constraints}, {%{EH}Ty.Trf.InfuseAnn}, {%{EH}Ty.InferExposedAnns})
%%]

%%[7_2 ag import({Ty/AbsSyn})
%%]

%%[7_2 hs export(inferTyConstr)
%%]


%%[7_2 hs

inferTyConstr :: AnnKindMap -> Map HsName Ty -> Map HsName BndgId -> ExposedAnnMap -> Map TyVarId HsName -> Ty -> UID -> (WrappedAnnConstrSet (), Map HsName (AnnComp Ty), Ty, Set Ty, UID)
inferTyConstr annKindMap tyconKindMap bndgKindIdMap exposedAnnMap tyVarNameMap ty uid
  = let inh = Inh_TyAGItf { kindMap_Inh_TyAGItf       = annKindMap
                          , tyconKindMap_Inh_TyAGItf  = tyconKindMap
                          , bndgKindIdMap_Inh_TyAGItf = bndgKindIdMap
                          , exposedAnnMap_Inh_TyAGItf = exposedAnnMap
                          , tyVarNameMap_Inh_TyAGItf  = tyVarNameMap
                          , gUniq_Inh_TyAGItf         = uid
                          }
        syn = wrap_TyAGItf (sem_TyAGItf (TyAGItf_AGItf ty)) inh
     in (annKindConstrs_Syn_TyAGItf syn, annCompMap_Syn_TyAGItf syn, annKind_Syn_TyAGItf syn, kindScope_Syn_TyAGItf syn, gUniq_Syn_TyAGItf syn)

%%]


%%[7_2

WRAPPER TyAGItf

ATTR TyAGItf AllTyTy [ kindMap : AnnKindMap tyconKindMap : {Map HsName Ty} bndgKindIdMap : {Map HsName BndgId} exposedAnnMap : ExposedAnnMap tyVarNameMap : {Map TyVarId HsName} | gUniq : UID |]
ATTR AllTyTy [|| annKind : Ty annKindConstrs USE {`wrappedSetUnion`} {wrappedSetEmpty} : {WrappedAnnConstrSet ()} kindScope USE {`Set.union`} {Set.empty} : {Set Ty} ]
ATTR TyAGItf [|| annKindConstrs : {WrappedAnnConstrSet ()} kindScope : {Set Ty} annKind : Ty ]

SEM Ty
  | TruncTyCon
      loc.exposedAnnMap = Map.insert @lhs.ann @anns @lhs.exposedAnnMap

SEM Ty
  | Var Con Any ExpTyCon
      loc.kind         = Map.findWithDefault (error ("no such kind for annotation: " ++ show @lhs.ann)) @lhs.ann @lhs.kindMap
  | Ext
      loc.extTyAnnKind = Ty_Ann (tyOutermostAnn @ty.annKind) kiStar
      lhs.annKind      = @ty.annKind
  | Var Con Any ExpTyCon
      (loc.annKind,_)  = infuseAnn Map.empty @loc.kind @loc.lUniq1
  | App
      lhs.annKind      = tyToplevelArrowVal @func.annKind

SEM Ty
  | Con
      loc.defSiteBndgId  = Map.findWithDefault (error ("inferTyConstr:bndgid:No such tycon: " ++ show @nm ++ " in " ++ show @lhs.bndgKindIdMap)) @nm @lhs.bndgKindIdMap
      loc.defSiteAnnKind = maybe (error ("inferTyConstr:annkind:No such tycon: " ++ show @nm ++ " in " ++ show @lhs.tyconKindMap)) id (Map.lookup @nm @lhs.tyconKindMap)
      loc.tyProjection   = TyProjection @loc.defSiteAnnKind @loc.annKind
      loc.annProjections = [ AnnProjection annFrom annTo | annTo <- Set.toList @loc.anns, let annFrom = maybe annTo id (annInstFrom annTo) ]
      loc.annKindConstrs = wrappedSingleton (Inst @loc.lUniq4 @loc.defSiteBndgId (@loc.tyProjection : @loc.annProjections) ())
                           `wrappedSetUnion` @loc.annConstrs
      loc.anns           = Map.findWithDefault Set.empty @lhs.ann @lhs.exposedAnnMap
  | Var
      loc.annKindConstrs = @loc.annConstrs
  | Var Con
      loc.resultAnn      = rightmostResultAnnotation @loc.annKind
      loc.annConstrs     = wrappedFromList [ @loc.lUniq2 #.. @loc.resultAnn =>= @lhs.ann ..# ()
                                           , @loc.lUniq3 #.. @lhs.ann =>= @loc.resultAnn ..# ()
                                           ]
  | App
      loc.annFlowConstr  = wrappedSingleton (@loc.lUniq1 #.. tyToplevelArrowArg @func.annKind =>= @arg.annKind ..# ())
      loc.annKindConstrs = @loc.annFlowConstr `wrappedSetUnion` @func.annKindConstrs `wrappedSetUnion` @arg.annKindConstrs
  | Ext
      loc.annFlowConstr  = wrappedSingleton (@loc.lUniq1 #.. @loc.extTyAnnKind =>= @extTy.annKind ..# ())
      loc.annKindConstrs = @loc.annFlowConstr `wrappedSetUnion` @ty.annKindConstrs `wrappedSetUnion` @extTy.annKindConstrs
  | ExpTyCon
      loc.constrIdL      = mkInfNewLevUIDL @loc.lUniq2
      loc.annFlowConstr  = wrappedFromList [ uid #.. rightmostResultAnnotation @loc.annKind =>= rightmostResultAnnotation kind ..# () | (uid, kind) <- zip @loc.constrIdL @constrs.kindL ]
      loc.annKindConstrs = @loc.annFlowConstr `wrappedSetUnion` @constrs.annKindConstrs

ATTR AllTy [|| annCompMap USE {\+/} {Map.empty} : {Map HsName (AnnComp Ty)} ]
ATTR TyAGItf [|| annCompMap : {Map HsName (AnnComp Ty)} ]
SEM Ty
  | Var  loc.tyVarName  = Map.findWithDefault (error ("EHConstrInferTy: don't have a name for tyvar: " ++ show @tv)) @tv @lhs.tyVarNameMap
         loc.annCompMap = Map.singleton @loc.tyVarName (Embed @loc.annKind)

SEM TyExpConstrs
  | *  lhs.annKind = kiStar

SEM TyExpFields
  | *  lhs.annKind = kiStar

ATTR TyExpConstrs [|| kindL USE {++} {[]} : {[Ty]} ]
ATTR TyExpConstr  [|| kindL : {[Ty]} ]
ATTR TyExpFields  [|| kindL USE {++} {[]} : {[Ty]} ]
ATTR TyExpField   [|| kindL : {[Ty]} ]
SEM TyExpField
  | Field  lhs.kindL = [ @ty.annKind ]

ATTR AllTyAndFlds [ ann : {Annotation Ty} ||]
SEM TyAGItf
  | AGItf  ty.ann = error "EHConstrInferTy: No annotation on root of ty"
SEM Ty
  | Ann  loc.ann = @ann

SEM Ty
  | Var Con Any
      lhs.kindScope = Set.singleton @loc.annKind
  | ExpTyCon
      lhs.kindScope = Set.singleton @loc.annKind `Set.union` @constrs.kindScope

SEM Ty
  | Con
      (loc.gUniq, loc.lUniq1, loc.lUniq2, loc.lUniq3, loc.lUniq4) = mkNewLevUID4 @lhs.gUniq
  | Var
      (loc.gUniq, loc.lUniq1, loc.lUniq2, loc.lUniq3) = mkNewLevUID3 @lhs.gUniq
  | Any
      (loc.gUniq, loc.lUniq1) = mkNewLevUID @lhs.gUniq
  | App
      (func.gUniq, loc.lUniq1) = mkNewLevUID @lhs.gUniq
  | ExpTyCon
      (constrs.gUniq, loc.lUniq1, loc.lUniq2) = mkNewLevUID2 @lhs.gUniq
  | Ext
      (ty.gUniq, loc.lUniq1) = mkNewLevUID @lhs.gUniq

%%]
