%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Distribution of solvers througout the AST
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[7_2

ATTR AGItf -> Expr [ varianceSolver : {SingleTySolver VarianceLattice} belownessSolver : {SingleTySolver BelownessLattice} ||]

SEM AGItf
  | AGItf  (loc.varianceSolver, loc.belownessSolver)
             = let input :: (Show s, Ord s) => TySolverIn s
                   input = TySolverIn { siScope       = @loc.annKindScope
                                      , siBndgs       = unwrapMap @loc.annKindBndgConstrs
                                      , siExposedAnns = @loc.exposedAnnBndgMap
                                      , siExpandTy    = @loc.dtTrExpAllF
                                      , siUid         = @loc.solveUID1
                                      }
                   varianceSem  = mkVarianceSem @loc.annKindMap @loc.solveUID1
                   belownessSem = mkBelownessSem @loc.annKindMap @loc.solveUID1
                   var = mkSingleTySolver input varianceSem
                   bel = mkSingleTySolver input belownessSem
                in (var, bel)

SEM Expr
  | Var Con IConst CConst SConst
      loc.belownessInfo = @lhs.belownessSolver @lhs.finTyGam @lhs.annKindMap @lhs.bndgKindIdMap @loc.annTy
      loc.varianceInfo  = @lhs.varianceSolver  @lhs.finTyGam @lhs.annKindMap @lhs.bndgKindIdMap @loc.annTy
  | Lam
      loc.belownessInfo = @lhs.belownessSolver @lhs.finTyGam @lhs.annKindMap @lhs.bndgKindIdMap @loc.annPatTy
      loc.varianceInfo  = @lhs.varianceSolver  @lhs.finTyGam @lhs.annKindMap @lhs.bndgKindIdMap @loc.annPatTy

SEM RecExpr
  | Empty
      loc.belownessInfo = @lhs.belownessSolver @lhs.finTyGam @lhs.annKindMap @lhs.bndgKindIdMap @loc.annTy
      loc.varianceInfo  = @lhs.varianceSolver  @lhs.finTyGam @lhs.annKindMap @lhs.bndgKindIdMap @loc.annTy

%%]


Compute a uniqueness substitution

%%[7_2

ATTR AGItf -> Expr AGItf -> PatExpr AGItf -> RecPatExpr [ uniquenessSubst : {Map (Annotation Ty) UniquenessLattice} ||]

SEM AGItf
  | AGItf
      loc.uniquenessSubst
        = let input :: (Show s, Ord s) => ExprSolverIn s
              input = ExprSolverIn { esiScope           = Map.insertWith (++) uidNull [] @loc.typeScope
                                   , esiBndgs           = unwrapMap @loc.annBndgConstrs
                                   , esiExpandTy        = @loc.dtTrExpAllF
                                   , esiVarianceSolver  = Map.map latticeToVariance  . @loc.varianceSolver @loc.totalTyGam @loc.totalTyConKindMap @loc.totalTyConBndgIdMap
                                   , esiBelownessSolver = Map.map latticeToBelowness . @loc.belownessSolver @loc.totalTyGam @loc.totalTyConKindMap @loc.totalTyConBndgIdMap
                                   , esiUid             = @loc.solveUID1
                                   }
              unqSem = mkUniquenessSem
           in mkAllExprSolver input unqSem

%%]
