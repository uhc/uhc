%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Adds annotations to data types and synthesized some information evironments about
%%% the annotations on data types
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

1. Each data type is given an annotation.
2. The inferred type for each field in a data type is annotated.

These annotations serve as reference for later use. For example, the Ty's of
the fields of a data type are not part of the main AST, so we can't access any
local attributes of an AG from the main AST AG. But when we run a computation
over a Ty, we can store the results in terms of the annotations (e.g. a
map from annotation to result) and access this map from the main AST AG.

%%[7_2.annotations

ATTR AGItf -> DataField [| annUID : UID |]
ATTR Decl -> DataConstr [ annExpDataTy : Ty ||]
ATTR TyVars TyVar [|| annTyL USE {<+>} {emptySeq} : {Seq Ty} ]
ATTR TyVars TyVar [|| annTySubst USE {`varmpPlus`} {emptyVarMp} : VarMp ]
ATTR Decl -> DataField [ annTySubst : VarMp ||]
ATTR DataConstr -> DataField [|| annExpTyL USE {<+>} {emptySeq} : {Seq Ty} ]

SEM AGItf
  | AGItf  expr.annUID = @loc.lUniq1
           expr.annTySubst   = error "AnnDt:annTySubst:not inside a datatype"
           expr.annExpDataTy = error "AnnDt:annExpDataTy:not inside a datatype"

SEM Decl
  | Data
      (constrs.annUID, loc.annId) = mkNewUID @lhs.annUID
      loc.ann = Annotation @loc.annId Nothing Nothing
      loc.exposedAnns = Map.findWithDefault (error ("AnnDT:exposedAnns:No such data type in exposed anns env: " ++ show @tyNm)) @tyNm @lhs.exposedAnnEnv
      loc.annExpDataTy = addTrunc @loc.exposedAnns (addAnn @loc.annId (@tyNm `mkConApp` @loc.tyVarsAnnTyL))
      loc.tyVarsAnnTyL = seqToList @tyVars.annTyL

SEM TyVar
  | Var
      loc.dtFinalAnnVarTy = addAnn @loc.annUniq2 @loc.dtFinalVarTy
      lhs.annTyL = unitSeq @loc.dtFinalAnnVarTy
      lhs.annTySubst = varmpTyUnit @loc.dtTyVarId @loc.dtFinalAnnVarTy

SEM DataConstr
  | Constr
      (loc.annTy, fields.annUID) = infuseAnn @lhs.dataAnnMapBndg (@lhs.finTyVarMp |=> @loc.dataConTy) @lhs.annUID
      loc.expAnnTy = mkAnnArrow @lhs.annExpDataTy (seqToList @fields.annExpTyL) @loc.annUniq1

SEM DataField
  | Field
      (loc.annTy, loc.annUID1) = infuseAnn @lhs.dataAnnMapBndg (@lhs.finTyVarMp |=> @tyExpr.ty) @lhs.annUID
      loc.substAnnTy = mergeDoubleAnnotations (@lhs.annTySubst |=> @loc.annTy)
      loc.expAnnTy = infuseDataTrunc @loc.exposedAnnsMap @loc.substAnnTy
      lhs.annExpTyL = unitSeq @loc.expAnnTy

ATTR AGItf -> DataField [|| annConstrTyMap USE {`Map.union`} {Map.empty} : {Map HsName Ty} ]
SEM DataConstr
  | Constr
      lhs.annConstrTyMap = Map.singleton @conNm @loc.expAnnTy

ATTR AGItf -> Expr [ annConstrTyMapInh : {Map HsName Ty} ||]
SEM AGItf
  | AGItf  loc.annConstrTyMapInh = @expr.annConstrTyMap

%%]


The next step is to expose annotations on a hidden data type to the outside world. Each
data type gets a set of additional parameters. These parameters are collected from all
type constructors within the data type. Each type constructor accepts a fresh set of
annotations, equal to the number of exposed anntations of the corresponding data type,
unless the data type is in the same type expression or is forced to be
annotation-monomorphic.

For that we construct an environment that maps a type constructor name to its variables.
It is important that we can still trace where these annotations came from (for instance,
when we want to get to these annotations at a pattern match expr nonterminal), and for
that we use the reference annotations that where added to the types above. Each field in
a constructor will have the reference annotated type of above and a mapping from an
annotation on the type constructors within this annotated type, to the set of exposed
annotations that are given as arguments to the type constructor.

The important work is done by the ``inferExposedAnns'' function. It will go through
the Ty structure and get the annotations that have to be passed to each type
constructor in the Ty. We get these annotations and the location where they are
precisely passed as a map. The key is an annotation in the Ty and the value are it's
annotations. We cannot push these annotations directly to lhs.collectExposedAns, since
it depends indirectly on it (for type constructors that are in the same binding-group),
but an additional result is an already collected set of annotations that can directly
be used for this purpose.

%%[7_2.annotations

ATTR AGItf -> Expr AGItf -> PatExpr AGItf -> DataField [ exposedAnnEnv : ExposedAnnEnv ||]
ATTR AGItf -> Expr [|| exposedAnnCollect USE {`Map.union`} {Map.empty} : {Map BndgId (Annotations Ty)} ]

SEM AGItf
  | AGItf  expr.exposedAnnEnv = initExposedAnnEnv
SEM Expr
  | Let    loc.exposedAnnEnv  = @loc.exposedAnnVarsPass2

ATTR AGItf -> DataField [ exposedAnnVarsPass1, exposedAnnVarsPass2 : ExposedAnnEnv || collectExposedAnns USE {`Set.union`} {Set.empty} : {Annotations Ty} ]
SEM AGItf
  | AGItf  expr.exposedAnnVarsPass1 = initExposedAnnEnv
           expr.exposedAnnVarsPass2 = initExposedAnnEnv

SEM Expr
  | Let    loc.exposedAnns          = zip (Set.toList @decls.datasInBindingGroupCollect) (repeat @decls.collectExposedAnns)
           loc.exposedAnnVarsPass2  = @lhs.exposedAnnVarsPass2 `Map.union` (Map.fromList @loc.exposedAnns)
           body.exposedAnnVarsPass1 = @loc.exposedAnnVarsPass2

SEM DataField
  | Field  (loc.exposedAnnsMap, lhs.collectExposedAnns, lhs.annUID)
             = inferExposedAnns @lhs.datasInBindingGroup
                                @lhs.annMonoRestrictions
                                @lhs.exposedAnnVarsPass1
                                @lhs.exposedAnnVarsPass2
                                @lhs.currentDataTypeName
                                @loc.annTy
                                @loc.annUID1

SEM Expr
  | Let    loc.declsExposedAnnCollect = Map.singleton @loc.declsBndgId @decls.collectExposedAnns
           lhs.exposedAnnCollect      = @loc.declsExposedAnnCollect `Map.union` @body.exposedAnnCollect
SEM AGItf
  | AGItf  loc.exposedAnnBndgMap      = Map.insert uidNull Set.empty @expr.exposedAnnCollect

%%]


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Collect and distribute the names of data types in the same binding group
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[7_2.bndgInfo

ATTR Decls Decl [|| datasInBindingGroupCollect USE {`Set.union`} {Set.empty} : {Set HsName} ]
ATTR AGItf -> DataField [ datasInBindingGroup : {Set HsName} ||]

SEM AGItf
  | AGItf  expr.datasInBindingGroup       = Set.empty

SEM Expr
  | Let    decls.datasInBindingGroup      = @decls.datasInBindingGroupCollect `Set.union` @lhs.datasInBindingGroup

SEM Decl
  | Data   lhs.datasInBindingGroupCollect = Set.singleton @tyNm

%%]

And a mapping from data type name to annotation

%%[7_2

ATTR Decls Decl [|| dataAnnMapBndgCollect USE {`Map.union`} {Map.empty} : {Map HsName (Annotation Ty)} ]
ATTR AGItf -> DataField [ dataAnnMapBndg : {Map HsName (Annotation Ty)} ||]

SEM AGItf
  | AGItf   expr.dataAnnMapBndg = Map.empty

SEM Expr
  | Let  decls.dataAnnMapBndg = @decls.dataAnnMapBndgCollect `Map.union` @lhs.dataAnnMapBndg

SEM Decl
  | Data  lhs.dataAnnMapBndgCollect = Map.singleton @tyNm @loc.ann

%%]


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Push down the name of the current data type
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[7_2.namepush

ATTR Decl -> DataField [ currentDataTypeName : HsName ||]

SEM AGItf
  | AGItf expr.currentDataTypeName = error "No currentDataTypeName available: not in a data type."

SEM Decl
  | Data  constrs.currentDataTypeName = @tyNm

%%]


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Collect annotation restrictions
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

The programmer can specify some Let-scoped annotation restrictions. The restrictions are of
two types: global restrictions that force the annotations on a data type to be monomorphic
when encountered, or global restrictions that only force them to be monomorphic if invoked
from a specific data type.

%%[7_2

ATTR AGItf -> AnnDtMonoRestrict [|| collectAnnMonoRestrictions USE {`Set.union`} {Set.empty} : {Set AnnDtMonoRestrict} ]
ATTR AnnDtMonoRestrict [|| annDtMonoRestriction : SELF]

SEM AnnDtMonoRestrict
  | Global Local
      lhs.collectAnnMonoRestrictions = Set.singleton @loc.annDtMonoRestriction

SEM Expr
  | Let  loc.andeclsExposedAnnCollectnMonoRestrictions = @decls.collectAnnMonoRestrictions `Set.union` @lhs.annMonoRestrictions

ATTR AGItf -> DataField [ annMonoRestrictions : {Set AnnDtMonoRestrict} ||]
SEM AGItf
  | AGItf  expr.annMonoRestrictions = Set.empty

%%]


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Construct expansion function
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Synthesize an expansion function of the data type, that given the arguments to a use of
the type, gives a representation of one level-expansion of the data type.

%%[7_2.propagation

ATTR AGItf -> Decls [|| dtExpFuns USE {<+>} {emptySeq} : {Seq MkExpTyConFSyn} ]
SEM Decl
  | Data  lhs.dtExpFuns = unitSeq @loc.dtExpFun

ATTR AGItf -> Expr AGItf -> PatExpr AGItf -> DataField [ mkExpTyConF : MkExpTyConF ||]
SEM AGItf
  | AGItf  loc.mkExpTyConMap = Map.fromList (seqToList @expr.dtExpFuns)
           expr.mkExpTyConF  = \nm -> Map.findWithDefault (error ("No such expansion function for type constructor: " ++ show nm)) nm @loc.mkExpTyConMap
  
%%]


Creates the expanded data type representation.
Constructs a function with the type: (HsName, [Ty] -> Ty -> UID -> (Ty, UID)).

%%[7_2.constructionDtF

ATTR TyVars [|| dtTyVars USE {<+>} {emptySeq} : {Seq TyVarId} ]
ATTR TyVar  [|| dtTyVars : {Seq TyVarId} ]

SEM TyVar
  | Var   loc.dtFinalVarTy = @lhs.finTyVarMp |=> tgiTy @loc.tgi_
          loc.dtTyVarId    = case @loc.dtFinalVarTy of
                               Ty_Var v _ -> v
                               _          -> uidStart -- will never match
          lhs.dtTyVars     = unitSeq @loc.dtTyVarId

SEM Decl
  | Data  loc.dtArgs      = seqToList @tyVars.dtTyVars
          loc.constrExpFs = seqToList @constrs.constrExpFs
          loc.mkSubst     = \args -> foldr varmpPlus emptyVarMp (zipWith varmpTyUnit @loc.dtArgs args)
          loc.dtExpFun    = (@tyNm, @loc.dtExpFun')
          loc.dtExpFun'   = \args origTy uid -> let ty              = Ty_ExpTyCon constrs @loc.dtArgs origTy
                                                    (constrs, uid') = threadMap (flip ($) subst) uid @loc.constrExpFs
                                                    subst           = @loc.mkSubst args
                                                 in (ty, uid')

%%]


Creates the expanded constructor representation.
Constructs a function with the type: (Map TyVarId Ty -> UID -> (TyExpConstr, UID)).

%%[7_2.constructionConstrF

ATTR AllDataConstr [|| constrExpFs USE {<+>} {emptySeq} : {Seq (MkExpFSyn TyExpConstr)} ]
SEM DataConstr
  | Constr  loc.fieldsExpFs = seqToList @fields.fieldExpFs
            lhs.constrExpFs = unitSeq @loc.constrExpF
            loc.constrExpF  = \subst uid -> let (fields, uid') = threadMap (flip ($) subst) uid @loc.fieldsExpFs
                                             in (TyExpConstr_Constr @conNm fields, uid')

%%]


Creates an expanded version of the fields in the data type.
Constructs a function with the type: (Map TyVarId Ty -> UID -> (TyExpField, UID)).
Replaces the type variables of the data type with the type arguments to the
corresponding type constructor using the substitution mechanism (VarMp).

%%[7_2.constructionFieldF

ATTR AllDataField [|| fieldExpFs USE {<+>} {emptySeq} : {Seq (MkExpFSyn TyExpField)} ]
SEM DataField
  | Field  lhs.fieldExpFs = unitSeq @loc.fieldExpF
           loc.fieldExpF  = \subst uid -> let (ty, uid') = infuseAnn @lhs.dataAnnMapBndg (subst |=> @loc.annTy) uid
                                           in (TyExpField_Field ty, uid')

%%]


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Construct one-level expansion for trunc tycons (used for pattern matches)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[7_2

ATTR AGItf -> PatExpr [ dtTrExpF : {[Annotation Ty] -> [Ty] -> HsName -> HsName -> [Ty]} ||]
SEM AGItf
  | AGItf   loc.dtTrExpF = \anns args dtNm -> Map.findWithDefault (error ("dtTrExpF: No such data type: " ++ show dtNm)) dtNm @expr.dtTrExpMap anns args

ATTR AGItf -> Decl [|| dtTrExpMap USE {`Map.union`} {Map.empty} : {Map HsName ([Annotation Ty] -> [Ty] -> HsName -> [Ty])} ]
SEM Decl
  | Data    loc.dtTrExpConFun = \anns args -> let subst  = @loc.mkSubst args
                                                  conMap = Map.unions (map (\f -> f anns subst) (seqToList @constrs.constrTrExpFs))
                                                  conFun = \nm -> Map.findWithDefault (error ("dtTrExpMap: No such constructor: " ++ show nm)) nm conMap
                                               in conFun
            lhs.dtTrExpMap    = Map.singleton @tyNm @loc.dtTrExpConFun

ATTR AllDataConstr [|| constrTrExpFs USE {<+>} {emptySeq} : {Seq ([Annotation Ty] -> VarMp -> Map HsName [Ty])} ]
SEM DataConstr
  | Constr  lhs.constrTrExpFs = unitSeq @loc.constrTrExpF
            loc.constrTrExpF  = \anns subst -> Map.singleton @conNm (map (\f -> f anns subst) (seqToList @fields.tyTrExpFs))

ATTR AllDataField [|| tyTrExpFs USE {<+>} {emptySeq} : {Seq ([Annotation Ty] -> VarMp -> Ty)} ]
SEM DataField
  | Field  lhs.tyTrExpFs = unitSeq @loc.tyTrExpF
           loc.tyTrExpF  = \anns subst -> substAnns anns @loc.exposedAnnsMap (mergeDoubleAnnotations (subst |=> @loc.annTy))

%%]


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Construct one-level expansion for trunc tycons to all constructors
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[7_2

ATTR AGItf -> Expr [ dtTrExpAllF : {[Annotation Ty] -> [Ty] -> HsName -> Map HsName [Ty]} ||]
SEM AGItf
  | AGItf   loc.dtTrExpAllF = \anns args dtNm -> Map.findWithDefault (error ("dtTrExpAllF: No such data type: " ++ show dtNm)) dtNm @expr.dtTrExpAllMap anns args

ATTR AGItf -> Decl [|| dtTrExpAllMap USE {`Map.union`} {Map.empty} : {Map HsName ([Annotation Ty] -> [Ty] -> Map HsName [Ty])} ]
SEM Decl
  | Data  loc.dtTrExpAllConFun = \anns args -> let subst  = @loc.mkSubst args
                                                   conMap = Map.unions (map (\f -> f anns subst) (seqToList @constrs.constrTrExpFs))
                                                in conMap
          lhs.dtTrExpAllMap    = Map.singleton @tyNm @loc.dtTrExpAllConFun

%%]
