%%[0
%include lhs2TeX.fmt
%include afp.fmt
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Haskell importable interface to Foreign/AbsSyn
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[94 hs module {%{EH}Foreign} import({%{EH}Base.Common})
%%]

%%[94 hs export(ForeignEnt(..), CCall(..), PlainCall(..), ForeignAGItf(..)) 
%%]

%%[9999 hs import({%{EH}Base.ForceEval})
%%]

%%[94 hs import(Control.Monad, {%{EH}Base.Binary}, {%{EH}Base.Serialize})
%%]
%%[94 hs import(Data.Typeable(Typeable), Data.Generics(Data))
%%]

%%[94 ag import({Foreign/AbsSyn})
%%]

%%[94
DERIVING AllForeign
  : Show, Eq
  , Typeable, Data
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Instances
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[9999 hs
instance ForceEval ForeignEnt
%%]

%%[99 hs
instance Serialize ForeignEnt where
  sput (ForeignEnt_CCall     a) = sputWord8 0 >> sput a
  sput (ForeignEnt_PlainCall a) = sputWord8 1 >> sput a
  sget = do t <- sgetWord8
            case t of
              0 -> liftM ForeignEnt_CCall     sget
              1 -> liftM ForeignEnt_PlainCall sget

instance Serialize CCall where
  sput (CCall_Id      a b c d) = sputWord8 0 >> sput a >> sput b >> sput c >> sput d
  sput (CCall_Dynamic        ) = sputWord8 1
  sput (CCall_Wrapper        ) = sputWord8 2
  sput (CCall_Empty          ) = sputWord8 3
  sget = do t <- sgetWord8
            case t of
              0 -> liftM4 CCall_Id      sget sget sget sget
              1 -> return CCall_Dynamic
              2 -> return CCall_Wrapper
              3 -> return CCall_Empty

instance Serialize PlainCall where
  sput (PlainCall_Id      a) = sputWord8 0 >> sput a
  sget = do t <- sgetWord8
            case t of
              0 -> liftM  PlainCall_Id sget

%%]
