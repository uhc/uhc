%%[0
%include lhs2TeX.fmt
%include afp.fmt
%%]

Pretty print GrinCode.

Tricky (in version 20):
Printing names depends on the printing context. ppGrNm factors this out, but for a GrExpr printed as part
if .hi interface files ppGrExpr requires a parameterised variant which prints names as required for .hi files.
20070310: this is now done via CfgPP

%%[(8 codegen grin) hs module {%{EH}GrinCode.Pretty} import(qualified Data.Map as Map,EH.Util.Pretty,{%{EH}Base.Common},{%{EH}GrinCode})
%%]

%%[(8 codegen grin) hs import({%{EH}Base.CfgPP})
%%]

%%[(94 codegen grin) hs import({%{EH}Foreign.Pretty})
%%]

%%[(8 codegen grin).WRAPPER ag import({GrinCode/AbsSyn})
WRAPPER GrAGItf GrExpr GrPatLam GrPatAlt GrTag
%%]

%%[(8 codegen grin) hs export(ppGrModule,ppGrExpr,ppGrExpr2,ppGrPatAlt,ppGrPatLam,ppGrTag)
ppGrModule :: GrModule -> PP_Doc
ppGrModule cmod
  =  let  t = wrap_GrAGItf  (sem_GrAGItf (GrAGItf_AGItf cmod))
                            (Inh_GrAGItf )
     in   (pp_Syn_GrAGItf t)


ppGrTag :: GrTag -> PP_Doc
ppGrTag tg
  =  let  t = wrap_GrTag  (sem_GrTag tg)
                          (Inh_GrTag
                             { ppGrNm_Inh_GrTag = cfgppHsName CfgPP_Grin
                             })
     in   (pp_Syn_GrTag t)

ppGrExpr2 :: CfgPP x => x -> GrExpr -> PP_Doc
ppGrExpr2 x tg
  =  let  t = wrap_GrExpr  (sem_GrExpr tg)
                           (Inh_GrExpr
                             { ppGrNm_Inh_GrExpr = cfgppHsName x
                             })
     in   (pp_Syn_GrExpr t)

ppGrExpr :: GrExpr -> PP_Doc
ppGrExpr = ppGrExpr2 CfgPP_Grin

ppGrPatLam :: GrPatLam -> PP_Doc
ppGrPatLam tg
  =  let  t = wrap_GrPatLam  (sem_GrPatLam tg)
                             (Inh_GrPatLam
                                { ppGrNm_Inh_GrPatLam = cfgppHsName CfgPP_Grin
                                })
     in   (pp_Syn_GrPatLam t)

ppGrPatAlt :: GrPatAlt -> PP_Doc
ppGrPatAlt tg
  =  let  t = wrap_GrPatAlt  (sem_GrPatAlt tg)
                             (Inh_GrPatAlt
                                { ppGrNm_Inh_GrPatAlt = cfgppHsName CfgPP_Grin
                                })
     in   (pp_Syn_GrPatAlt t)

%%]

%%[(20 codegen grin) hs
instance PP GrExpr where
  pp = ppGrExpr2 CfgPP_Plain
%%]

%%[(2020 codegen grin) hs
instance PPForHI GrExpr where
  ppForHI = ppGrExpr2 CfgPP_HI
%%]

%%[(99 codegen grin) hs
ppGrFFIAnnot :: GrFFIAnnot -> PP_Doc
ppGrFFIAnnot (GrFFIAnnot_IsResEval b) = pp b
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Config how to print names
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen grin)
ATTR AllExpr [ ppGrNm: PPGrNm | | ]

SEM GrBind
  | Bind        loc         .   ppGrNm      =   cfgppHsName CfgPP_Grin

SEM GrGlobal
  | Global      loc         .   ppGrNm      =   cfgppHsName CfgPP_Grin
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Pretty printed code
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen grin) hs
type PPGrNm = HsName -> PP_Doc

%%[[8
ppCurlysSemisV :: [PP_Doc] -> PP_Doc
ppCurlysSemisV pL = ppBlock "{ " "} " "; " pL
%%][8_2
ppCurlysSemisV :: [PP_Doc] -> PP_Doc
ppCurlysSemisV pL = vlist pL
%%]]

-- list between {}, but with spaces, to avoid syntax clash with negative integers:
--  {- comment -}
--  {-1, -2}
ppCurlyList :: (a -> PP_Doc) -> [a] -> PP_Doc
ppCurlyList pL xs = ppListSep "{ " " }" ", " $ map pL xs

ppGrAltAnn :: GrAltAnn -> PP_Doc
ppGrAltAnn GrAltAnnNormal         = pp ""
ppGrAltAnn GrAltAnnIdent          = pp "ident "
ppGrAltAnn (GrAltAnnCalling a nm) = pp "calling" >#< show a >#< pp nm >#< ""
ppGrAltAnn GrAltAnnReenter        = pp "reenter "

ppGrBindAnn :: PPGrNm -> GrBindAnn -> PP_Doc
ppGrBindAnn _      GrBindAnnNormal            = pp ""
ppGrBindAnn ppGrNm (GrBindAnnClass xs)        = pp "DICTCLASS"       >|<  ppCurlyList (ppMbGrNm ppGrNm) xs
ppGrBindAnn ppGrNm (GrBindAnnInstance xs)     = pp "DICTINSTANCE"    >|<  ppCurlyList (ppManyGrNm ppGrNm) xs
ppGrBindAnn _      (GrBindAnnOverloaded xs)   = pp "DICTOVERLOADED"  >|<  ppCurlyList (ppCurlyList ppInt) xs
ppGrBindAnn ppGrNm (GrBindAnnSpecialized nm i xs)  = pp "SPECIALIZED"  >#< (ppGrNm nm) >#< show i >#<  ppCurlyList (ppMbGrNm ppGrNm) xs

ppMbGrNm :: PPGrNm -> Maybe HsName -> PP_Doc
ppMbGrNm ppGrNm = maybe (pp "_") ppGrNm

ppManyGrNm :: PPGrNm -> [HsName] -> PP_Doc
ppManyGrNm ppGrNm = ppListSep "" "" " " . map ppGrNm

ppInt :: Int -> PP_Doc
ppInt n = pp (show n)

%%]
ppGrNm :: PPGrNm
ppGrNm = cfgppHsName CfgPP_Grin

%%[(8 codegen grin)
ATTR GrAGItf AllNT [ | | pp USE {>-<} {empty}: PP_Doc ]

SEM GrModule
  | Mod         lhs         .   pp          =   "module" >#< cfgppHsName CfgPP_Grin @moduleNm
%%[[8
                                                >-< ppCurlysSemisV @globalL.ppL
                                                >-< ppCurlysSemisV @bindL.ppL
                                                >-< ppCurlysSemisV
                                                         (map  (\(tn,ts)
                                                                    ->  cfgppHsName CfgPP_Grin tn >#< "="
                                                                        >#< ( ppListSep "" "" " | "
                                                                            --  . map  (\(n,CTag _ _ t a ma) -> cfgppHsName CfgPP_Grin n >#< t >#< a >#< ma)
                                                                            . map (\(GrTag_Con ann n nm) ->  "#" >|< show n >|< "/" >|< "C" >|< show ann >|< "/" >|< cfgppHsName CfgPP_Grin nm)
                                                                            $ ts
                                                                            )
                                                               )
                                                               (Map.assocs @tagsMp))
%%][8_2
                                                >-< ppCurlysSemisV @bindL.ppL
%%]]

SEM GrGlobal
  | Global      lhs         .   pp          =   cfgppHsName CfgPP_Grin @nm >#< "<-" >#< "store" >#< @val.pp

SEM GrBind
%%[[8
  | Bind        lhs         .   pp          =   cfgppHsName CfgPP_Grin @nm 
                                                  >#< ppGrBindAnn @loc.ppGrNm @annot
                                                  >#< ppSpaced (map (cfgppHsName CfgPP_Grin) @argNmL) 
                                                  >-< indent 2 ("=" >#< ppCurlysSemisV [@expr.pp])
  | Arity       lhs         .   pp          =   cfgppHsName CfgPP_Grin @nm 
                                                  >#< ":" >#< show @arity
  | Rec         lhs         .   pp          =   "rec" >-< indent 2 (ppCurlysSemisV @bindL.ppL)
%%][8_2
  | Bind        lhs         .   pp          =   cfgppHsName CfgPP_Grin @nm >#< ppSpaced (map (cfgppHsName CfgPP_Grin) @argNmL) >#< "="
                                                >-< indent 2 (ppCurlysSemisV [@expr.pp])
  | Rec         lhs         .   pp          =   vlist @bindL.ppL
%%]]

SEM GrExpr
%%[[8
  | Seq         lhs         .   pp          =   @expr.pp >#< ";" >#< "\\" >|< @pat.pp >#< "->"
                                                >-< @body.pp
%%][8_2
  | Seq         lhs         .   pp          =   @expr.pp >|< ";" >#< "\\" >|< @pat.pp >#< "->"
                                                >-< @body.pp
%%]]
  | Case        lhs         .   pp          =   "case" >#< @val.pp >#< "of" >-<
%%[[8  
                                                    indent 2 (ppCurlysSemisV @altL.ppL)
%%][8_2
                                                    indent 2 (ppCurlysSemisV $ reverse @altL.ppL)
%%]]
  | App         lhs         .   pp          =   "apply" >#< ppSpaced (@lhs.ppGrNm @nm : @argL.ppL)
  | Call        lhs         .   pp          =   "call"  >#< ppSpaced (@lhs.ppGrNm @nm : @argL.ppL)
%%[[8
  | FFI         lhs         .   pp          =   "ffi" >#< ppSpaced (@ppent : @ppannot : @argL.ppL)
%%][8_2
  | FFI         lhs         .   pp          =   "foreign" >#< ppSpaced (pp @nm : @argL.ppL)
%%]]
%%[[8
  | FFI         loc         .   ppent       =   pp @nm
%%][94
  | FFI         loc         .   ppent       =   @callconv >#< "\"" >|< @impEnt >|< "\""
%%]]
%%[[8
  | FFI         loc         .   ppannot     =   empty
%%][99
  | FFI         loc         .   ppannot     =   ppGrFFIAnnot @ffiAnnot
%%]]
%%[[8
  | Eval        lhs         .   pp          =   "eval" >#< @lhs.ppGrNm @nm
%%][8_2
  | Eval        lhs         .   pp          =   "$eval" >#< @lhs.ppGrNm @nm
%%]]
  | Unit        lhs         .   pp          =   "unit" >#< @val.pp
  | UpdateUnit  lhs         .   pp          =   "updateunit" >#< @val.pp >#< @lhs.ppGrNm @nm
  | Store       lhs         .   pp          =   "store" >#< @val.pp
  | FetchNode   lhs         .   pp          =   "fetchnode"  >#<  @lhs.ppGrNm @nm 
  | FetchField  lhs         .   pp          =   "fetchfield" >#<  @lhs.ppGrNm @nm >#< pp @offset >#< maybe empty ppGrTag @mbTag
  | FetchUpdate lhs         .   pp          =   "fetchupdate" >#< @lhs.ppGrNm @src >#< @lhs.ppGrNm @dst
  | Throw       lhs         .   pp          =   "throw" >#< @lhs.ppGrNm @nm
  | Catch       lhs         .   pp          =   "try" >-<
                                                indent 2 (ppCurlysSemisV [@body.pp]) >-<
                                                "catch" >|< ppParens (@lhs.ppGrNm @arg) >-<
                                                indent 2 (ppCurlysSemisV [@handler.pp])

SEM GrAlt
%%[[8
  | Alt         lhs         .   pp          =   ppGrAltAnn @ann >|< @pat.pp >-< indent 2 ("->" >#< ppCurlysSemisV [@expr.pp])
%%][8_2
  | Alt         lhs         .   pp          =   ppGrAltAnn @ann >|< @pat.pp >#< "->" >-< indent 2 (ppCurlysSemisV [@expr.pp])
%%]]
SEM GrVal
  | Empty       lhs         .   pp          =   pp "()"
  | LitInt      lhs         .   pp          =   pp @int
  | LitStr      lhs         .   pp          =   pp $ show @str
  | Var         lhs         .   pp          =   @lhs.ppGrNm @nm
  | Node        lhs         .   pp          =   ppListSep "(" ")" " " (@tag.pp        : @fldL.ppL)
  | VarNode     lhs         .   pp          =   ppListSep "(" ")" " " (                 @fldL.ppL)
%%[[8
  | BasicNode   lhs         .   pp          =   ppListSep "(" ")" " " [pp "basicnode", @tag.pp, @lhs.ppGrNm @nm]
  | EnumNode    lhs         .   pp          =   ppListSep "(" ")" " " [pp "enumnode" , @lhs.ppGrNm @nm]
  | PtrNode     lhs         .   pp          =   ppListSep "(" ")" " " [pp "ptrnode" , @lhs.ppGrNm @nm]
  | OpaqueNode  lhs         .   pp          =   ppListSep "(" ")" " " [pp "opaquenode" , @lhs.ppGrNm @nm]
%%][8_2
  | BasicNode   lhs         .   pp          =   ppListSep "(" ")" " " [@tag.pp, @lhs.ppGrNm @nm]
  | EnumNode    lhs         .   pp          =   ppListSep "(" ")" " " [@lhs.ppGrNm @nm]
  | PtrNode     lhs         .   pp          =   ppListSep "(" ")" " " [@lhs.ppGrNm @nm]
  | OpaqueNode  lhs         .   pp          =   ppListSep "(" ")" " " [@lhs.ppGrNm @nm]
%%]
%%[[10
  | NodeAdapt   lhs         .   pp          =   ppParens (@lhs.ppGrNm @nm >|< "|" >|< (ppListSep "" "" "," @fldL.ppL))

SEM GrAdapt
  | Upd         lhs         .   pp          =   @off.pp >|< ":=" >|< @val.pp
  | Ins         lhs         .   pp          =   @off.pp >|< "+=" >|< @val.pp
  | Del         lhs         .   pp          =   @off.pp >|< "-="
%%]]

SEM GrPatAlt
  | Otherwise   lhs         .   pp          =   pp "_"
  | LitInt      lhs         .   pp          =   pp @int
  | Node        lhs         .   pp          =   ppListSep "(" ")" " " (@tag.pp : map @lhs.ppGrNm @fldL)
%%[[10
  | NodeSplit   lhs         .   pp          =   ppParens (@tag.pp >#< @lhs.ppGrNm @nm >|< "|" >|< (ppListSep "" "" "," @fldL.ppL))

SEM GrSplit
  | Sel         lhs         .   pp          =   @lhs.ppGrNm @nm >|< "=" >|< @off.pp
%%]]

SEM GrPatLam
  | Empty       lhs         .   pp          =   pp "()"
  | Var         lhs         .   pp          =   @lhs.ppGrNm @nm
  | VarNode     lhs         .   pp          =   ppListSep "(" ")" " " @fldL.ppL
%%[[8
  | BasicNode   lhs         .   pp          =   ppListSep "(" ")" " " [pp "basicnode", pp @annot, @lhs.ppGrNm @nm]
  | EnumNode    lhs         .   pp          =   ppListSep "(" ")" " " [pp "enumnode" , @lhs.ppGrNm @nm]
  | PtrNode     lhs         .   pp          =   ppListSep "(" ")" " " [pp "ptrnode" , @lhs.ppGrNm @nm]
  | OpaqueNode  lhs         .   pp          =   ppListSep "(" ")" " " [pp "opaquenode" , @lhs.ppGrNm @nm]
  | BasicAnnot  lhs         .   pp          =   ppListSep "(" ")" " " [pp "basicannot", pp @annot, @lhs.ppGrNm @nm]
  | EnumAnnot   lhs         .   pp          =   ppListSep "(" ")" " " [pp "enumannot" , @lhs.ppGrNm @tycon, @lhs.ppGrNm @nm]
  | OpaqueAnnot lhs         .   pp          =   ppListSep "(" ")" " " [pp "opaqueannot" , @lhs.ppGrNm @nm]
  | PtrAnnot    lhs         .   pp          =   ppListSep "(" ")" " " [pp "ptrannot" , @lhs.ppGrNm @tycon, @lhs.ppGrNm @nm]
%%][8_2
  | BasicNode   lhs         .   pp          =   ppListSep "(" ")" " " [pp "_", @lhs.ppGrNm @nm]
  | EnumNode    lhs         .   pp          =   ppListSep "(" ")" " " [@lhs.ppGrNm @nm]
  | PtrNode     lhs         .   pp          =   ppListSep "(" ")" " " [@lhs.ppGrNm @nm]
  | OpaqueNode  lhs         .   pp          =   ppListSep "(" ")" " " [@lhs.ppGrNm @nm]
  | BasicAnnot  lhs         .   pp          =   @lhs.ppGrNm @nm
  | EnumAnnot   lhs         .   pp          =   @lhs.ppGrNm @nm
  | OpaqueAnnot lhs         .   pp          =   ppListSep "(" ")" " " [@lhs.ppGrNm @nm]
  | PtrAnnot    lhs         .   pp          =   -- ppListSep "(" ")" " " [ppListSep "(" ")" " " @tagL.ppL, @lhs.ppGrNm @nm]
                                                ppListSep "(" ")" " " [@lhs.ppGrNm @tycon, @lhs.ppGrNm @nm]
%%]]

SEM GrVarL
  | Nil         lhs         .  pp           =   pp ""
  | Cons        lhs         .  pp           =   @hd.pp >#< @tl.pp

SEM GrVar
  | Var         lhs         .   pp          =   @lhs.ppGrNm @nm
  | Ignore      lhs         .   pp          =   pp "_"
  | KnownTag    lhs         .   pp          =   @tag.pp

SEM GrTag
%%[[8
  | Hole        lhs         .   pp          =   "#" >|< "0" >|< "/" >|< "H" >|< "/" >|< "_"
  | Rec         lhs         .   pp          =   "#" >|< "0" >|< "/" >|< "R" >|< "/" >|< @lhs.ppGrNm (mkHNm "()")
  | App         lhs         .   pp          =   "#" >|< "0" >|< "/" >|< "A" >|< "/" >|< @lhs.ppGrNm @nm
  | Fun         lhs         .   pp          =   "#" >|< "0"  >|< "/" >|< "F" >|< "/" >|< @lhs.ppGrNm @nm
  | PApp        lhs         .   pp          =   "#" >|< "0"  >|< "/" >|< "P" >|< "/" >|< @needs >|< "/" >|< @lhs.ppGrNm @nm
  | Con         lhs         .   pp          =   "#" >|< @int >|< "/" >|< "C" >|< show @grtgAnn >|< "/" >|< @lhs.ppGrNm @nm
%%][8_2
  | Hole        lhs         .   pp          =   pp "Hole" 
  | Rec         lhs         .   pp          =   "R" >|< @lhs.ppGrNm (mkHNm "()")
  | App         lhs         .   pp          =   "A" >|< pp @nm
  | Fun         lhs         .   pp          =   "F" >|< pp @nm
  | PApp        lhs         .   pp          =   "P" >|< pp @nm >|< @needs
  | Con         lhs         .   pp          =   "C" >|< pp @nm
%%]]
  | Unboxed     lhs         .   pp          =   pp "#U"
%%]

%%[(8 codegen grin)
ATTR GrGlobalL GrBindL GrAltL GrTagL GrValL GrVarL [ | | ppL: {[PP_Doc]} ]

SEM GrGlobalL
  | Cons        lhs         .   ppL         =   @hd.pp : @tl.ppL
  | Nil         lhs         .   ppL         =   []

SEM GrBindL
  | Cons        lhs         .   ppL         =   @hd.pp : @tl.ppL
  | Nil         lhs         .   ppL         =   []

SEM GrAltL
  | Cons        lhs         .   ppL         =   @hd.pp : @tl.ppL
  | Nil         lhs         .   ppL         =   []

SEM GrTagL
  | Cons        lhs         .   ppL         =   @hd.pp : @tl.ppL
  | Nil         lhs         .   ppL         =   []

--SEM GrPatL
--  | Cons        lhs         .   ppL         =   @hd.pp : @tl.ppL
--  | Nil         lhs         .   ppL         =   []

SEM GrValL
  | Cons        lhs         .   ppL         =   @hd.pp : @tl.ppL
  | Nil         lhs         .   ppL         =   []

SEM GrVarL
  | Cons        lhs         .   ppL         =   @hd.pp : @tl.ppL
  | Nil         lhs         .   ppL         =   []
%%]
%%[(10 codegen grin)
ATTR GrAdaptL GrSplitL [ | | ppL: {[PP_Doc]} ]

SEM GrAdaptL
  | Cons        lhs         .   ppL         =   @hd.pp : @tl.ppL
  | Nil         lhs         .   ppL         =   []

SEM GrSplitL
  | Cons        lhs         .   ppL         =   @hd.pp : @tl.ppL
  | Nil         lhs         .   ppL         =   []
%%]
