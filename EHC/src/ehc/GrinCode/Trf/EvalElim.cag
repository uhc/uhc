%%[doesWhat doclatex

Eliminate unnecessary evaluations.

The basic strategy is as follows:
\begin{itemize}
\item Find out to what (IsEval) a GrExpr is evaluated (in attr isEval).
\item Bind this info to introduced names (in attr isEvalMp).
\item Find out whether a GrExpr will be evaluated later on (in attr willUseFor).
\item This is all combined when computing a replacement GrExpr,
      because closures can only be replaced if it is known that they will be evaluated,
      and evaluations can only be replaced if we know that they have been computed earlier.
      Hence the need for past (isEvalMp) and future (willUseFor) info.
\item The transformation also computes new IsEval info, to be bound and propagated.
\end{itemize}

A tricky issue is the preservation of HPT analysis node/pointer distinction.
This is accomplished by:

\begin{itemize}
\item Replacement of eval by unit must refer to the node result of the pointer passed to eval.
\item Replacement of apply must refer to the original pointer, not an evaluated node.
\end{itemize}

For the bytecode interpreter the distinction is useless, even a disadvantage because referring to an original pointer means using an indirection node when the pointer is already evaluated.
In that case the node result better be used; this different behavior is made dependent on the target for which code is generated.

\paragraph{Example 1}

\begin{verbatim}
eval x ; \y ->
...
eval x
\end{verbatim}

is replaced by

\begin{verbatim}
eval x ; \y ->
...
unit y
\end{verbatim}

\paragraph{Example 2}

\begin{verbatim}
store (#F f x) ; \y ->
...
eval y
\end{verbatim}

is replaced by

\begin{verbatim}
call f x ; \y ->
...
unit y
\end{verbatim}

\paragraph{Example 3}

\begin{verbatim}
store (#A f x) ; \y ->
...
eval y
...
eval f
\end{verbatim}

is replaced by

\begin{verbatim}
eval f ; \f'
apply f' x ; \y ->
...
unit y
...
unit f'
\end{verbatim}

Note: when HPT analysis is done, in apply the name f is used instead of f'.

%%]

%%[(8 codegen grin) ag import({GrinCode/AbsSyn})
%%]

%%[(8 codegen grin) hs module {%{EH}GrinCode.Trf.EvalElim}
%%]

%%[(8 codegen grin) hs import(qualified Data.Set as Set,qualified Data.Map as Map, Data.Maybe)
%%]

%%[(8 codegen grin) hs import({%{EH}Base.Builtin}, {%{EH}Base.Common}, {%{EH}Base.Opts}, {%{EH}GrinCode.Common}, {%{EH}GrinCode})
%%]

%%[(8 codegen grin) hs import(qualified {%{EH}Config} as Cfg)
%%]

%%[(8 codegen grin) ag import({GrinCode/Trf/CommonAliasAG},{GrinCode/Trf/CommonFreeVar},{GrinCode/Trf/CommonWillEval})
%%]

-- for debugging:
%%[(8 codegen grin) hs import(EH.Util.Pretty,EH.Util.Utils)
%%]
%%[(8 codegen grin) hs import({%{EH}Base.Debug})
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Wrapper
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen grin) hs export(grEvalElim)
grEvalElim :: EHCOpts -> GrModule -> GrModule
grEvalElim opts grmod
  = trf_Syn_GrAGItf t
  where t = wrap_GrAGItf (sem_GrAGItf $ GrAGItf_AGItf grmod)
            $ (Inh_GrAGItf
                 { opts_Inh_GrAGItf = opts
                 })
%%]

%%[(8 codegen grin).wrapper
WRAPPER GrAGItf
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Options
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen grin) hs
optsAllowNodePtrMix :: EHCOpts -> Bool
optsAllowNodePtrMix opts = not (ehcOptFullProgAnalysis opts)
%%]

%%[(8 codegen grin)
ATTR GrAGItf GrModule AllDef AllGrExpr AllGrVal AllGrPat [ opts: EHCOpts | | ]
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Is name evaluated already evaluated? Then eval can be avoided.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen grin) hs
data IsEval
  = IsEval_EvalToNode                       -- eval to node
  | IsEval_EvalToNodeNm !HsName             -- eval to node, but under different name
  | IsEval_EvalToPointer
  | IsEval_Apply        !HsName !GrValL     -- eval to apply, reconstruct with name and argument values
  | IsEval_None
  deriving Eq

isEvalEvaluated :: EHCOpts -> IsEval -> Bool
isEvalEvaluated opts IsEval_None          = False
isEvalEvaluated opts IsEval_EvalToPointer = optsAllowNodePtrMix opts
isEvalEvaluated opts _                    = True

type IsEvalMp = Map.Map HsName IsEval -- (IsEval,HsName)

isEvalNm :: IsEval -> HsName -> HsName
isEvalNm (IsEval_EvalToNodeNm n) _ = n
isEvalNm _                       n = n
%%]

For debugging
%%[(8 codegen grin) hs
instance Show IsEval where
  show IsEval_EvalToNode        = "IsEval_EvalToNode"
  show (IsEval_EvalToNodeNm n)  = "IsEval_EvalToNodeNm" ++ show n
  show IsEval_EvalToPointer     = "IsEval_EvalToPointer"
  show IsEval_None              = "IsEval_None"
  show (IsEval_Apply f _)       = "IsEval_Apply " ++ show f
%%]

%%[(8 codegen grin)
ATTR AllExpr [ isEvalMp: IsEvalMp | | ]

SEM GrExpr
  | Seq         -- loc         .   isEvalMp        =   Map.unions [@expr.gathIsEvalMp,@lhs.isEvalMp]
                body        .   isEvalMp        =   -- trace ("pat=" ++ show @pat.trf ++ " alias=" ++ show @pat.nmAlias ++ " isEval: " ++ show @expr.isEval) $
                                                    let mp = Map.unions [@expr.gathIsEvalMp,@lhs.isEvalMp] -- @isEvalMp
                                                    in  case @pat.nmAlias of
                                                          NmAlias_Nm nmp | isJust @expr.mbMkPatSeq && isEvalEvaluated @lhs.opts @expr.isEval
                                                            -> Map.insert nmp @expr.isEval mp
                                                          _ -> mp `Map.difference` Map.fromList (zip @pat.introNmL @pat.introNmL)

SEM GrBind
  | Bind        expr        .   isEvalMp        =   Map.empty

SEM GrGlobal
  | Global      val         .   isEvalMp        =   Map.empty

SEM GrAlt
  | Alt         expr        .   isEvalMp        =   @lhs.isEvalMp `Map.difference` Map.fromList (zip @pat.introNmL @pat.introNmL)
%%]

With gathIsEvalMp the side effect of an eval is simulated: the evaluated result will now be known under a different name as a node.
Any reference to the original name can then be replaced by a unit of the corresponding 'name as a node'.

%%[(8 codegen grin)
ATTR GrExpr GrVal [ | | gathIsEvalMp USE {`Map.union`} {Map.empty} : IsEvalMp ]

SEM GrExpr
  | Eval App    loc         .   newDelIsEvalMp  =   Map.unions [Map.fromList @delayedIsEvals, @delayedIsEvalMp]

SEM GrExpr
  | Eval        lhs         .   gathIsEvalMp    =   Map.unions [maybe Map.empty (\n -> Map.singleton @nm (IsEval_EvalToNodeNm n)) @lhs.mbIntroNm, @newDelIsEvalMp]
  | App         lhs         .   gathIsEvalMp    =   @newDelIsEvalMp
%%]

%%[(8 codegen grin)
ATTR GrExpr GrVal [ | | isEval: IsEval ]

SEM GrExpr
  | Call Eval
%%[[8
    FFI
%%][99
%%]]
                lhs         .   isEval          =   IsEval_EvalToNode
  | App         lhs         .   isEval          =   case @appTrf of
                                                      GrExpr_App f as -> IsEval_Apply f as
  | * - Call Eval App FFI
        Store Unit
                lhs         .   isEval          =   IsEval_None

SEM GrVal
  | LitInt      lhs         .   isEval          =   IsEval_EvalToPointer
  | Var         lhs         .   isEval          =   maybe IsEval_None
                                                          id 
                                                          (Map.lookup @nm @lhs.isEvalMp)
  | * - Node LitInt Var
                lhs         .   isEval          =   IsEval_None
%%]

%%[99
SEM GrExpr
  | FFI         lhs         .   isEval          =   if grFFIAnnotIsResEvaluated @ffiAnnot then IsEval_EvalToNode else IsEval_None
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Making of a GrExpr_Seq, determined by the expr of seq; this changing the seq structure, necessary for delaying
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen grin) hs
type MkSeq    = GrExpr -> GrExpr
type MkPatSeq = GrPatLam -> MkSeq

emptyMkPatSeq :: MkPatSeq
emptyMkPatSeq _ e = e

mkPatSeq :: GrExpr -> MkPatSeq
mkPatSeq = GrExpr_Seq

mkMbPatSeq :: GrExpr -> Maybe MkPatSeq
mkMbPatSeq = Just . mkPatSeq

mkSeq :: HsName -> GrExpr -> MkSeq
mkSeq n e = mkPatSeq e (GrPatLam_Var n)
%%]

%%[(8 codegen grin)
ATTR GrExpr [ | | mbMkPatSeq: {Maybe MkPatSeq} ]

SEM GrExpr
  | * - Store Unit
                lhs         .   mbMkPatSeq      =   mkMbPatSeq @trfNew
  | Store Unit  lhs         .   mbMkPatSeq      =   maybeOr (mkMbPatSeq @trf) (mkMbPatSeq) (const Nothing) @val.mbGrExpr @val.mbDelayedExpr
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Name under which expr will be introduced
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen grin)
ATTR GrExpr [ mbIntroNm: {Maybe HsName} | | ]

SEM GrExpr
  | Seq         loc         .   mbIntroNm       =   case @pat.nmAlias of
                                                      NmAlias_Nm nmp -> Just nmp
                                                      _              -> Nothing
                body        .   mbIntroNm       =   Nothing

SEM GrAlt
  | Alt         expr        .   mbIntroNm       =   Nothing

SEM GrBind
  | Bind        expr        .   mbIntroNm       =   Nothing
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Free vars
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen grin)
ATTR GrExpr [ fviMp: FvInfoMp | | ]

SEM GrExpr
  | Seq         expr        .   fviMp           =   @gathBodyFviMp

SEM GrAlt
  | Alt         expr        .   fviMp           =   @expr.gathFviMp

SEM GrBind
  | Bind        expr        .   fviMp           =   @expr.gathFviMp
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% The names which will really be evaluated (and transformed), so delayed evaluations must be done right before here
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen grin)
%%]
ATTR GrExpr [ | | evalNmS: FvS ]

SEM GrExpr
  | App Eval    loc         .   evalNmS         =   Map.keysSet $ Map.filter (WillUseFor_Eval `Set.member`) @willUseForMp
  | * - App Eval
                loc         .   evalNmS         =   Set.empty

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Delayed evaluations, postponed until just before its original eval
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen grin) hs
type Delayed x = (x,IsEval,IsEvalMp)
type DelayedExpr = Delayed GrExpr
type DelayedEval = Delayed MkSeq
type DelayedEvalMp = Map.Map HsName DelayedEval

del2del :: (x -> y) -> Delayed x -> Delayed y
del2del f (x,i,m) = (f x,i,m)
%%]

%%[(8 codegen grin)
ATTR GrExpr AllAlt [ | delayedEvalMp: DelayedEvalMp | ]

SEM GrBind
  | Bind        expr        .   delayedEvalMp   =   Map.empty

SEM GrExpr
  | Seq         body        .   delayedEvalMp   =   Map.unions [maybeAnd Map.empty (\n e -> Map.singleton n (del2del (mkSeq n) e)) @mbIntroNm @expr.mbDelayedExpr, @expr.delayedEvalMp]
  | App Eval    (loc.delayedMkSeq,lhs.delayedEvalMp,loc.delayedIsEvals,loc.delayedIsEvalMp)
                                                =   let (here,furtheron) = Map.partitionWithKey (\n _ -> willUseForEval n @willUseForMp) @lhs.delayedEvalMp
                                                        (evals,isevals,isevalmps) = unzip3 [ (e,(n,ie),iem) | (n,(e,ie,iem)) <- Map.toList here ]
                                                    in  (foldr (.) id evals,furtheron,isevals,Map.unions isevalmps)
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Restricting what will participate as 'Will eval'
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Only when a variable is evaluated without use between introduction and
evaluation, it will count as 'will eval'. If it is used in between, we
cannot move it forwards without interfering with the evaluation state
expected by its intermediate use.

%%[(8 codegen grin)
ATTR GrExpr [ | | alsoWillUseForMp: WillUseForMp ]

SEM GrExpr
  | Call App    lhs         .   alsoWillUseForMp=   Map.map (const $ Set.singleton WillUseFor_NodeField) @argL.gathFviMp
  | Store Unit  lhs         .   alsoWillUseForMp=   Map.map (const $ Set.singleton WillUseFor_NodeField) @gathFviMp
  | * - Call App Store Unit
                lhs         .   alsoWillUseForMp=   Map.empty

SEM GrExpr
  | Seq         lhs         .   willUseForMp    =   @willUseForMp `willUseUnion` @expr.alsoWillUseForMp `willUseUnion` @body.alsoWillUseForMp
%%]
SEM GrExpr
  | Seq         lhs         .   willUseForMp    =   @willUseForMp `Map.difference` @expr.alsoWillUseForMp
  | Seq         lhs         .   willUseForMp    =   @willUseForMp `willUseUnion` @expr.alsoWillUseForMp

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Will eval redefinition to introduce fake dependency 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen grin)
SEM GrBind
  | Bind        expr        .   willUseFor      =   Set.empty
                expr        .   gathFviMp       <   expr.willUseFor
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Transformation: 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen grin)
ATTR GrAGItf [ | | trf: GrModule ]
ATTR AllNT [ | | trf: SELF ]
%%]

%%[(8 codegen grin)
ATTR GrVal [ | | mbGrExpr: {Maybe GrExpr} ]
ATTR GrExpr GrVal [ | | mbDelayedExpr: {Maybe DelayedExpr} ]

SEM GrVal
  | Node        loc         .   willOnlyUseForEval
                                                =   WillUseFor_Eval `Set.member` @lhs.willUseFor && not (WillUseFor_NodeField `Set.member` @lhs.willUseFor)
                (loc.mbGrExpr,lhs.isEval,lhs.gathIsEvalMp,loc.mbDelayedExpr)
                                                =   case (@tag.trf,@fldL.trf) of
                                                      (GrTag_Fun nm,_)
                                                        | @willOnlyUseForEval                  -- a to be evaluated saturated call closure -> immediate call
                                                        -> (Nothing, IsEval_None, Map.empty, Just (repl, IsEval_EvalToNode, Map.empty))
                                                        where repl = GrExpr_Call nm @fldL.trf
                                                      (GrTag_App _,(GrVal_Var f:fs))
                                                        | @willOnlyUseForEval      -- a to be evaluated apply closure -> immediate apply
                                                        -> ( Nothing
                                                           , IsEval_None
                                                           , Map.empty
                                                           , Just (repl,IsEval_Apply fRepl fs,Map.singleton f (IsEval_EvalToNodeNm f'))
                                                           )
                                                        where f' = hsnSuffix f "!"
                                                              fRepl = f' -- if optsAllowNodePtrMix @lhs.opts then f' else f
                                                              repl = GrExpr_Seq (GrExpr_Eval f) (GrPatLam_Var f') (GrExpr_App fRepl fs)
                                                      (GrTag_Con _ _ _,_)                               -- constructor node is evaluated
                                                        -> (Nothing, IsEval_EvalToPointer, Map.empty, Nothing)
                                                      (GrTag_Rec ,_)                                    -- record as well
                                                        -> (Nothing, IsEval_EvalToPointer, Map.empty, Nothing)
                                                      (GrTag_PApp nMiss nm,_)                           -- partial app also, cannot be evaluated further, unless 0 missing
                                                        | @willOnlyUseForEval && nMiss == 0
                                                          -> (Nothing, IsEval_None, Map.empty, Just (GrExpr_Call nm @fldL.trf, IsEval_EvalToNode, Map.empty))
                                                        | otherwise
                                                          -> (Nothing, IsEval_EvalToPointer, Map.empty, Nothing)
                                                      (t,_)
                                                        -> (Nothing, IsEval_None, Map.empty, Nothing)
  | * - Node    loc         .   mbDelayedExpr   =   Nothing
                            .   mbGrExpr        =   Nothing
%%]

%%[(8 codegen grin)
SEM GrExpr
  | * - Store Unit
                loc         .   mbDelayedExpr   =   Nothing
%%]

%%[(8 codegen grin)
SEM GrExpr
  | Eval        loc         .   trfNew          =   let a = Map.lookup @nm $ Map.union @newDelIsEvalMp @lhs.isEvalMp
                                                    in  -- trace ("isEval: " ++ show @nm ++ " = " ++ show a) $ 
                                                        @delayedMkSeq $ 
                                                        case a of
                                                          Just e | isEvalEvaluated @lhs.opts e
                                                            -> GrExpr_Unit (GrVal_Var $ isEvalNm e @nm)
                                                          _ -> @trf
  | App         loc         .   appTrf          =   case Map.lookup @nm $ Map.union @newDelIsEvalMp @lhs.isEvalMp of
                                                      Just (IsEval_Apply f as) | not $ @nm `Map.member` @lhs.fviMp
                                                        -> GrExpr_App f (as ++ @argL.trf)
                                                      _ -> @trf
                            .   trfNew          =   @delayedMkSeq @appTrf
                loc         .   appTrf          :   GrExpr
  | Seq         loc         .   trfNew          =   {- @delayedMkSeq $ -} maybe (id) (\mk -> mk @pat.trf) @expr.mbMkPatSeq $ @body.trf
  | * - Store Unit Eval App Seq
                loc         .   trfNew          =   @trf
%%]

%%[(8 codegen grin)
SEM GrExpr
  | * - Store Unit
                lhs         .   trf             =   @trfNew
%%]

