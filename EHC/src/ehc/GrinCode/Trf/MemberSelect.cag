%%[doesWhat doclatex

Identify selectorfunctions, that is functions that select a field from a dictionary.
Also identify constant dictionaries.
Now replace applications of selectorfunctions to dictionaries by the selected field directly.

%%]


In code involving dictionaries, we often select a function from a dictionary.
If the selection function is known and has structure
   sel x = { EVAL x ; \y -> CASE v OF (#C/record y1 y2 y3) -> EVAL yk }
and the dictionary is known and has structure
   dict <- STORE (#C/record x1 x2 x3)
then we can replace
   CALL sel dict
by
   EVAL xk


xk is known to be bound by
   xk <- STORE (#P/i/fk cs)
  
Similarly we can also replace
  STORE (P/0/sel dict) ; \f ->
  STORE (A/_ f bs)
by
  STORE (F/fk cs bs)



%%[(8 codegen grin) ag import({GrinCode/AbsSyn})
%%]
%%[(8 codegen grin) hs import({%{EH}Base.Common}, {%{EH}GrinCode.Common}, {%{EH}GrinCode})
%%]
%%[(8 codegen grin) hs import(qualified Data.Map as Map, Data.Maybe)
%%]
%%[(8 codegen grin) hs import(Control.Monad(when))
%%]
%%[(8 codegen grin) hs import(Debug.Trace)
%%]

%%[(8 codegen grin)
WRAPPER GrAGItf
%%]

%%[(8 codegen grin) hs module {%{EH}GrinCode.Trf.MemberSelect} export(memberSelect)
memberSelect :: GrModule -> GrModule
memberSelect grmod = let t = wrap_GrAGItf (sem_GrAGItf (GrAGItf_AGItf grmod))
                                          (Inh_GrAGItf)
                     in grTrf_Syn_GrAGItf t
%%]


%%[(8 codegen grin)
ATTR GrAGItf [ | | grTrf: GrModule ]
ATTR AllNT [ | | grTrf: SELF ]
%%]

%%[(8 codegen grin)


-- Gather the required information bottom-up

ATTR AllGlobal [ | | dictionaries USE {`Map.union`} {Map.empty}: {Map.Map HsName [HsName]}    
                     globals      USE {`Map.union`} {Map.empty}: {Map.Map HsName GrVal}    
               ]

ATTR AllBind   [ | | selectors USE {`Map.union`} {Map.empty} : {Map.Map HsName Int} 
               ]

-- Distribute the required information top-down

ATTR AllBind
     AllGrExpr 
     AllGrVal  [ allDicts : {Map.Map HsName [HsName]}   
                 allSels  : {Map.Map HsName Int} 
               | | ]

ATTR AllBind
     AllGrExpr [ allGlobs : {Map.Map HsName GrVal} 
               | | ]

-- Do the transformation

SEM GrExpr
  | Call   lhs.grTrf  =  maybe @loc.grTrf 
                               id
                               (do
                                { n <- Map.lookup @nm @lhs.allSels
                                ; v <- @argL.singleVar
                                ; d <- Map.lookup v @lhs.allDicts
                                ; let field = d !! n
                                ; return (GrExpr_Eval field)
                                })
                           
  | Seq    lhs.grTrf  =  maybe @loc.grTrf 
                               id
                               (do
                                { f <- @expr.storedSelectedFunction
                                ; when (show f == "_") Nothing
                                ; (ps,pat,rest) <- @body.seqStoredApplyRest
                                ; let j = length ps
                                ; let node = Map.findWithDefault (error ("MemberSelect: " ++ show f ++ " not found in " ++ show @lhs.allGlobs)) f @lhs.allGlobs
                                ; let node2 = case node of (GrVal_Node (GrTag_PApp i g) qs) -> node
                                                           (GrVal_Node (GrTag_Fun f)    qs) -> GrVal_Node (GrTag_PApp 0 f) qs
                                                           _                                -> error (show f ++ " is not a PApp but a " ++ show node ++ " while pat is " ++ show pat)
                                ; let (GrVal_Node (GrTag_PApp i g) qs) = node2
                                ; let args = qs ++ ps
                                ; if  j>i
                                  then Nothing  -- TODO: add optimisation for oversaturated case
                                  else return ( if j==i
                                                then GrExpr_Seq (GrExpr_Store (GrVal_Node (GrTag_Fun        g) args)) pat rest
                                                else GrExpr_Seq (GrExpr_Store (GrVal_Node (GrTag_PApp (i-j) g) args)) pat rest
                                              )
                                })


-- Bend the required information from bottom-up to top-down at the top of the tree

SEM GrModule
  | Mod   bindL.allDicts = @globalL.dictionaries
          bindL.allSels  = @bindL.selectors
          bindL.allGlobs = @globalL.globals

-- Trivial definitions for values in other contexts

SEM GrGlobal
  | Global val.allDicts  = Map.empty
           val.allSels   = Map.empty

%%[[(10 codegen grin)
SEM GrSplit
  | Sel    off.allDicts  = Map.empty
           off.allSels   = Map.empty
%%]]



-- Auxiliary attributes needed for gathering

ATTR GrExpr  [  | | storedSelectedFunction : {Maybe HsName}
                    storedApplyParameters  : {Maybe [GrVal]}
                    seqStoredApplyRest     : {Maybe (GrValL,GrPatLam,GrExpr)}  ]

ATTR GrVal   [  | | nodeApplyParameters    : {Maybe [GrVal]} 
                    nodeSelectedFunction   : {Maybe HsName}
             ]

ATTR GrTag   [  | | isApplyTag : Bool
                    p0name     : {Maybe HsName}
             ]
                    
SEM GrExpr
  | Store   lhs.storedSelectedFunction = @val.nodeSelectedFunction
  | *-Store lhs.storedSelectedFunction = Nothing

  | Store   lhs.storedApplyParameters  = @val.nodeApplyParameters
  | *-Store lhs.storedApplyParameters  = Nothing

  | Seq     lhs.seqStoredApplyRest     = do
                                         { ps <- @expr.storedApplyParameters
                                         ; return (tail ps,@pat.grTrf,@body.grTrf)
                                         }
  | *-Seq   lhs.seqStoredApplyRest     = Nothing

SEM GrVal
  | Node    lhs.nodeApplyParameters    = if @tag.isApplyTag
                                         then Just @fldL.grTrf
                                         else Nothing
  | *-Node  lhs.nodeApplyParameters    = Nothing
  
  | Node    lhs.nodeSelectedFunction   = do
                                         { nm <- @tag.p0name
                                         ; n  <- Map.lookup nm @lhs.allSels
                                         ; v  <- @fldL.singleVar
                                         ; d  <- Map.lookup v @lhs.allDicts
                                         ; let field = d !! n
                                         ; return field
                                         }
  | *-Node  lhs.nodeSelectedFunction   = Nothing

SEM GrTag
  | App     lhs.isApplyTag = True
  | *-App   lhs.isApplyTag = False

  | PApp    lhs.p0name     = if @needs==0
                             then Just @nm
                             else Nothing
  | *-PApp  lhs.p0name     = Nothing


-- Auxiliary attributes needed for gathering

ATTR GrValL [ | | singleVar : {Maybe HsName}   isEmpty : Bool ]
ATTR GrVal  [ | | mbVar : {Maybe HsName} ]
ATTR GrVal  [ | | mbTupel : {Maybe [HsName]} ]
ATTR GrVal GrValL GrPatAlt [ | | variables USE {++} {[]} : {[HsName]} ]
ATTR GrTag  [ | | isTupel : Bool ]

SEM GrValL
  | Nil    lhs.isEmpty      = True
  | Cons   lhs.isEmpty      = False

  | Nil    lhs.singleVar    = Nothing
  | Cons   lhs.singleVar    = @hd.mbVar

SEM GrVal
  | Var    lhs.mbVar        = Just @nm
  | *-Var  lhs.mbVar        = Nothing

SEM GrGlobal
 | Global  lhs.dictionaries = maybe Map.empty
                                    (\t -> Map.singleton @nm t)
                                    @val.mbTupel
           lhs.globals      = Map.singleton @nm @val.grTrf
 
SEM GrVal
  | Node   lhs.mbTupel  =  if @tag.isTupel
                           then Just @fldL.variables
                           else Nothing
  | *-Node lhs.mbTupel  =  Nothing

SEM GrVal
  | Var    lhs.variables = [ @nm ]

SEM GrPatAlt
  | Node   lhs.variables = @fldL
  
SEM GrTag
  | Con     lhs.isTupel = True
  | *-Con   lhs.isTupel = False



-- Auxiliary attributes needed for gathering selectors

ATTR GrExpr [ | | selectorbody : {Maybe Int}  
                  caseSelector : {HsName -> Maybe Int}  
                  mbEval       : {Maybe HsName} 
            ]
ATTR GrAlt  [ | | selectorbody : {Maybe Int} 
            ]
ATTR GrAltL [ | | singleSelectorBody : {Maybe Int}  
                  isEmpty : Bool 
            ]

SEM GrBind
  | Bind  lhs.selectors = if   length @argNmL /= 1
                          then Map.empty
                          else maybe Map.empty
                                     (\n -> Map.singleton @nm n)
                                     @expr.selectorbody

SEM GrExpr
  | Seq    lhs.selectorbody = maybe Nothing
                                    (\v -> @body.caseSelector v)
                                    @expr.mbEval
  | *-Seq  lhs.selectorbody = Nothing

  | Case   lhs.caseSelector = \v -> @altL.singleSelectorBody
  | *-Case lhs.caseSelector = \v -> Nothing

  | Eval   lhs.mbEval       = Just @nm
  | *-Eval lhs.mbEval       = Nothing

SEM GrAltL
  | Nil    lhs.isEmpty      = True
  | Cons   lhs.isEmpty      = False
  
  | Nil    lhs.singleSelectorBody = Nothing
  | Cons   lhs.singleSelectorBody = if @tl.isEmpty
                                    then @hd.selectorbody
                                    else Nothing

SEM GrAlt
  | Alt    lhs.selectorbody  = maybe Nothing
                                     (\v -> findIndex 0 v @pat.variables)
                                     @expr.mbEval

{
findIndex :: Int -> HsName -> [HsName] -> Maybe Int
findIndex n x [] = Nothing
findIndex n x (y:ys) | x==y      = Just n
                     | otherwise = findIndex (n+1) x ys
	
}


-- code snippet that might be useful in the TODO task

--if j>i
--then GrExpr_Seq (GrExpr_Store (GrVal_Node (GrTag_Fun        g) (take i args))) @pat.grTrf (GrExpr_Seq (GrExpr_Store (GrVal_Node (GrTag_App us) (var:drop i args))) pat rest)) 
--else 

%%]
