%%[(8 codegen grin) ag import({GrinCode/Trf/CommonIntroName})
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Common stuff related to name aliasing
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Name info is stored in a NmAlias, a representation of what a name stands for.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Val/Pat just one name?
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen grin)
ATTR GrPatAlt GrPatLam [ | | nmAlias: NmAlias ]

SEM GrPatAlt
  | Node        lhs         .   nmAlias         =   NmAlias_Grp hsnUnknown $ map NmAlias_Nm @fldL
  | * - Node    lhs         .   nmAlias         =   NmAlias_None

SEM GrPatLam
  | Var 		lhs         .   nmAlias         =   NmAlias_Nm    @nm				                                 	-- annotation has no operational meaning for bytecode interpretation, hence is just an alias
  | BasicAnnot  lhs         .   nmAlias         =   case @annot of
                                                      BasicAnnot_Size bsz _
                                                        | bsz == basicSizeWord -> NmAlias_Nm @nm                     -- when size matches wordsize, no operational meaning for bytecode interpretation, hence is just an alias
                                                      _                        -> NmAlias_None
  | VarNode     lhs         .   nmAlias         =   NmAlias_Grp   hsnUnknown $ map NmAlias_Nm (tail @fldL.introNmL)
  | BasicNode   lhs         .   nmAlias         =   NmAlias_Basic hsnUnknown (NmAlias_Nm @nm) @annot
  | * - Var 
        BasicAnnot 
        VarNode 
        BasicNode
                lhs         .   nmAlias         =   NmAlias_None

%%]

%%[(8 codegen grin)
ATTR GrExpr GrVal [ | | nmAlias: NmAlias ]

SEM GrVal
  | Var         lhs         .   nmAlias         =   NmAlias_Nm @nm
  | Node        lhs         .   nmAlias         =   case @tag.trf of -- assuming attr 'trf'
                                                      GrTag_Con _ _ _
                                                        -> NmAlias_Grp hsnUnknown @fldL.nmAliasL
                                                      _ -> NmAlias_None
  | BasicNode   lhs         .   nmAlias         =   NmAlias_Basic hsnUnknown (NmAlias_Nm @nm) BasicAnnot_Dflt
  | LitInt      lhs         .   nmAlias         =   NmAlias_Const hsnUnknown (GrVal_LitInt @int)
  | LitStr      lhs         .   nmAlias         =   NmAlias_Const hsnUnknown (GrVal_LitStr @str)
  | * - Var Node BasicNode LitInt LitStr
                lhs         .   nmAlias         =   NmAlias_None

SEM GrExpr
  | Seq         lhs         .   nmAlias         =   case (@body.nmAlias,@expr.hasSideEffect) of
                                                      (NmAlias_Nm n,True) -> NmAlias_NmAfterSideEffect n
                                                      _ -> @body.nmAlias
  | Eval        lhs         .   nmAlias         =   NmAlias_Eval @nm
  | * - Unit Seq Store Eval
                lhs         .   nmAlias         =   NmAlias_None
%%]

%%[(8 codegen grin)
ATTR GrValL [ | | nmAliasL: {[NmAlias]} ]

SEM GrValL
  | Cons        lhs         .   nmAliasL        =   @hd.nmAlias : @tl.nmAliasL
  | Nil         lhs         .   nmAliasL        =   []
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Side effect
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen grin)
ATTR GrExpr [ | | hasSideEffect: Bool ]

SEM GrExpr
  | Eval		lhs			.	hasSideEffect	=	True
  | * - Eval	lhs			.	hasSideEffect	=	False
%%]
