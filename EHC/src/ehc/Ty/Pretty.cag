%%[0
%include lhs2TeX.fmt
%include afp.fmt
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Haskell importable interface to Ty pretty print
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(1 hmtyinfer || hmtyast) hs module {%{EH}Ty.Pretty} import(EH.Util.Utils,EH.Util.Pretty,{%{EH}Base.Builtin},{%{EH}Base.Common},{%{EH}Ty}) 
%%]

%%[(2 hmtyinfer || hmtyast) hs import (qualified Data.Set as Set)
%%]

%%[(3 hmtyinfer || hmtyast) hs import(qualified Data.Map as Map)
%%]

%%[(3 hmtyinfer || hmtyast) hs import(Char)
%%]

%%[(7_2 hmtyinfer || hmtyast) hs import(qualified Data.Set as Set, Data.Set(Set), qualified Data.Map as Map, Data.Map(Map))
%%]

%%[(8 hmtyinfer || hmtyast) hs import({%{EH}Scanner.Common(hiScanOpts)},{%{EH}Base.CfgPP}) 
%%]

%%[(9 hmtyinfer || hmtyast) hs export(ppTyPr)
%%]

%%[(1 hmtyinfer || hmtyast).WRAPPER ag import({Ty/AbsSyn},{Ty/CommonAG})
WRAPPER TyAGItf
%%]

%%[(1 hmtyinfer || hmtyast).ppTy hs export(ppTy)
ppTy :: Ty -> PP_Doc
ppTy ty
  =  let  t =  wrap_TyAGItf
                 (sem_TyAGItf (TyAGItf_AGItf ty))
                 Inh_TyAGItf
     in   pp_Syn_TyAGItf t

instance PP Ty where
  pp t = ppTy t
%%]

%%[(8 hmtyinfer || hmtyast).ppTy -1.ppTy hs export(ppTyWithCfg',ppTyWithCfg,ppTy)
ppTyWithCfg' :: CfgPP x => x -> Ty -> PP_Doc
ppTyWithCfg' x ty = pp_Syn_TyAGItf $ synTyWithCfg (cfgPPTy x) ty

synTyWithCfg :: CfgPPTy -> Ty -> Syn_TyAGItf
synTyWithCfg c ty
  =  wrap_TyAGItf
       (sem_TyAGItf (TyAGItf_AGItf ty))
       (Inh_TyAGItf {cfg_Inh_TyAGItf = c})

ppTyWithCfg :: CfgPPTy -> Ty -> PP_Doc
ppTyWithCfg c ty = pp_Syn_TyAGItf $ synTyWithCfg c ty

ppTy :: Ty -> PP_Doc
ppTy = ppTyWithCfg cfgPPTyDflt
%%]

%%[(9 hmtyinfer || hmtyast) hs export(ppImplsWithCfg)
ppImplsWithCfg :: CfgPPTy -> Impls -> PP_Doc
ppImplsWithCfg c i = ppTyWithCfg c (Ty_Impls i)
%%]

%%[(99 hmtyinfer || hmtyast).ppTyDt hs export(ppTyDt)
ppTyDt :: Ty -> PP_Doc
ppTyDt = ppTyWithCfg cfgPPTyDT
%%]

%%[(8 hmtyinfer || hmtyast) hs
instance PP Ty where
  pp t = ppTy t
%%]

%%[(9 hmtyinfer || hmtyast) hs
ppTyPr :: Ty -> PP_Doc
ppTyPr = ppTyWithCfg cfgPPTyPred

%%]

%%[(4 hmtyinfer || hmtyast) hs
instance PP FIMode where
  pp m = pp (show m)
%%]

%%[(4 hmtyinfer || hmtyast) hs
instance PP InstTo where
  pp  InstTo_Plain       = pp "_"
%%[[4
  pp (InstTo_Qu q v t  ) = t >|< "/" >|< v
%%][6
  pp (InstTo_Qu q v t k) = t >|< "/" >|< v >|< "@" >|< tyquMetaLev q
%%]]
%%]

%%[(4_2 hmtyinfer || hmtyast) hs
instance PP TyHardness where
  pp = pp . show

instance PP TyNeed where
  pp = pp . show
%%]

%%[(7_2 hmtyinfer || hmtyast).annotation hs
instance PP (Annotation a) where
  pp = (>|<) "d" . pp . annUID
%%]

%%[(9 hmtyinfer || hmtyast) hs export(ppPredOccId')
ppPredOccId' :: CfgPP x => x -> PredOccId -> PP_Doc
ppPredOccId' x poi
  = ppi (poiId poi)
  where ppi = cfgppUID x
%%]

%%[(9 hmtyinfer || hmtyast) hs
ppPredOccId :: PredOccId -> PP_Doc
ppPredOccId poi = "Poi" >|< ppPredOccId' CfgPP_Plain poi
%%]

%%[(6 hmtyinfer || hmtyast) hs
instance PP TyKiKey where
  pp = pp . show
%%]

%%[(9 hmtyinfer || hmtyast) hs
instance PP Pred where
  pp p = ppTyWithCfg cfgPPTyPred (Ty_Pred p)

instance PP Impls where
  pp i = ppTy (Ty_Impls i)

instance PP PredOccId where
  pp = ppPredOccId

instance PP PredOcc where
  pp po = pp (poPr po) >|< "/" >|< pp (poPoi po) >|< "/" >|< pp (poScope po)

instance PP CHRPredOccCxt where
  pp (CHRPredOccCxt_Scope1 sc) = pp sc

instance PP CHRPredOcc where
  pp po = ppParensCommas
            [ pp (cpoPr po), pp (cpoCxt po)
%%[[99
            , pp (cpoRange po)
%%]]
            ]

instance PP PredScope where
  pp (PredScope_Lev l) = ppListSep "<" ">" "," $ rllToList l
  pp (PredScope_Var v) = "<sc_" >|< v >|< ">"

instance PP ImplsProveOcc where
  pp o = ipoId o >|< "/" >|< ipoScope o
%%]

%%[(16 hmtyinfer || hmtyast) hs
instance PP PredSeq where
  pp (PredSeq_Cons hd tl) = pp hd >#< ":" >#< pp tl
  pp (PredSeq_Nil       ) = pp "[]"
  pp (PredSeq_Var u     ) = pp u
%%]

%%[(10 hmtyinfer || hmtyast) hs
instance PP LabelOffset where
  pp = pp . show
%%]

%%[(20 hmtyinfer || hmtyast) hs
instance PPForHI Ty where
  -- ppForHI = ppTyWithCfg' CfgPP_HI
  ppForHI = ppTyWithCfg (cfgPPTyExtraForHI $ cfgPPTy CfgPP_HI)

instance PPForHI Pred where
  ppForHI p = ppForHI (Ty_Pred p)

instance PPForHI PredOccId where
  ppForHI = ppPredOccId' CfgPP_HI

instance PPForHI TyKiKey where
  ppForHI (TyKiKey_Name  n) = ppForHI n
  ppForHI (TyKiKey_TyVar v) = ppForHI v

instance PPForHI CHRPredOccCxt where
  ppForHI (CHRPredOccCxt_Scope1 sc) = {- "cxtscope1" >#< -} ppForHI sc

instance PPForHI CHRPredOcc where
  ppForHI po = ppCurlysCommas [ppForHI (cpoPr po), ppForHI (cpoCxt po)]

instance PPForHI PredScope where
  ppForHI (PredScope_Lev l) = "scope" >#< (ppBracketsCommas $ map pp $ rllToList l)
  ppForHI (PredScope_Var v) = "scope" >#< ppForHI v

instance PPForHI LabelOffset where
  ppForHI (LabelOffset_Off o) = "offset" >#< ppForHI o
  ppForHI (LabelOffset_Var v) = "offset" >#< ppForHI v

instance PPForHI Label where
  ppForHI (Label_Lab l) = "label" >#< ppForHI l
  ppForHI (Label_Var v) = "label" >#< ppForHI v
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Interface specifically for Label
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(10 hmtyinfer || hmtyast)
WRAPPER LabelAGItf
%%]

%%[(10 hmtyinfer || hmtyast) hs
instance PP Label where
  pp l = pp_Syn_LabelAGItf t
       where t =  wrap_LabelAGItf
                    (sem_LabelAGItf (LabelAGItf_AGItf l))
                    (Inh_LabelAGItf)
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Configuration of PP of Ty
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 hmtyinfer || hmtyast) hs export(CfgPPTy)
data CfgPPTy
  = CfgPPTy
      { cfgPPTyPPHsn                :: HsName -> PP_Doc
      , cfgPPTyPPCon                :: CfgPPTy -> HsName -> PP_Doc
      , cfgPPTyPPVar                :: CfgPPTy -> UID -> Int -> PP_Doc
      , cfgPPTyPPVarDflt            :: CfgPPTy -> String -> UID -> PP_Doc
%%[[9
      , cfgPPTyPPImplsPred          :: PP_Doc -> PP_Doc -> PP_Doc -> PP_Doc
      , cfgPPTyPPImplsTailCons      :: PP_Doc -> PP_Doc -> PP_Doc
      , cfgPPTyPPImplsAppWrap       :: (PP_Doc -> PP_Doc) -> PP_Doc -> PP_Doc
      , cfgPPTyCtxt                 :: TyCtxt
%%]]
      , cfgPPTyFollowAST            :: Bool
%%[[99
      , cfgPPTyLhsSafe              :: String -> String
      , cfgPPTyElimEmptyImpls       :: Bool
%%]]
      }
%%]

%%[(8 hmtyinfer || hmtyast) hs
cfgPPTy' :: CfgPP x => x -> CfgPPTy -> CfgPPTy
cfgPPTy' x c
  = c { cfgPPTyPPHsn        = cfgppHsName x
      , cfgPPTyPPVar        = \c u i -> cfgppVarHsName x Nothing (Just u) (Just i)
      , cfgPPTyPPCon        = \c n -> cfgppConHsName x n
      , cfgPPTyFollowAST    = cfgppFollowAST x
      }

cfgPPTy :: CfgPP x => x -> CfgPPTy
cfgPPTy x = cfgPPTy' x cfgPPTyDflt
%%]

%%[(8 hmtyinfer || hmtyast) hs
cfgPPTyDflt :: CfgPPTy
cfgPPTyDflt
  = CfgPPTy
      { cfgPPTyPPHsn                = pp
      , cfgPPTyPPCon                = \_ -> ppCon
      , cfgPPTyPPVar                = \c _ i -> ppTnUniq c i
      , cfgPPTyPPVarDflt            = \cfg pre tv -> cfgPPTyPPHsn cfg $ mkHNm $ pre ++ "_" ++ show tv
%%[[9
      , cfgPPTyPPImplsPred          = \iv pr pv -> iv >|< "=" >|< pr >|< "/" >|< pv
      , cfgPPTyPPImplsTailCons      = \pr occs -> pr >|< occs
      , cfgPPTyPPImplsAppWrap       = ($)
      , cfgPPTyCtxt                 = TyCtxt_Ty
%%]]
      , cfgPPTyFollowAST            = False
%%[[99
      , cfgPPTyLhsSafe              = id
      , cfgPPTyElimEmptyImpls       = False
%%]]
      }

%%]

For derivation trees
%%[(99 hmtyinfer || hmtyast).cfgPPTyDT hs export(cfgPPTyDT)
cfgPPTyDT :: CfgPPTy
cfgPPTyDT
  = cfgPPTyDflt
      { cfgPPTyPPHsn                = pp . hsnQualified
      , cfgPPTyPPCon                = \_ -> ppCon . hsnQualified
      , cfgPPTyPPImplsPred          = \_ pr _ -> pr
      , cfgPPTyPPImplsTailCons      = \pr _ -> pr
      , cfgPPTyPPImplsAppWrap       = \_ pr -> pr
      , cfgPPTyElimEmptyImpls       = True
      , cfgPPTyLhsSafe              = let safe '|' = "||"
                                          safe '@' = "@@"
                                          safe x   = [x]
                                      in  concatMap safe
      }
%%]

For predicates
%%[(9 hmtyinfer || hmtyast) hs
cfgPPTyPred :: CfgPPTy
cfgPPTyPred
  = cfgPPTyDflt
      { cfgPPTyCtxt         = TyCtxt_Pred
      }
%%]

For HI (Haskell Interface) files
%%[(20 hmtyinfer || hmtyast) hs
cfgPPTyExtraForHI :: CfgPPTy -> CfgPPTy
cfgPPTyExtraForHI c
  = c { cfgPPTyPPVarDflt    = \cfg pre tv -> cfgPPTyPPVar cfg cfg tv 0
      }
%%]

%%[(8 hmtyinfer || hmtyast) hs
cfgppAside :: (PP a, PP b) => CfgPPTy -> a -> b -> PP_Doc
cfgppAside c a b = if cfgPPTyFollowAST c then a >-< b else a >#< b
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Internal utils
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(7 hmtyinfer || hmtyast).ppExts hs
ppExts :: HsName -> PP_Doc -> [PP_Doc] -> PP_Doc
ppExts appFunNm appFunPP appArgPPL
  = ppNice
  where ppNice = ppAppTop (hsnRow,mkPPAppFun appFunNm appFunPP)
                          appArgPPL empty
%%]

%%[(8 hmtyinfer || hmtyast) -7.ppExts hs
ppExts :: CfgPPTy -> HsName -> PP_Doc -> [PP_Doc] -> (PP_Doc,PP_Doc)
ppExts cfg appFunNm appFunPP appArgPPL
  = (ppNice,ppCfg)
  where ppNice = ppAppTop (hsnRow,mkPPAppFun' sep appFunNm appFunPP)
                          appArgPPL empty
        ppCfg  = if cfgPPTyFollowAST cfg
                 then let (e:es) = appArgPPL
                      in  hv ([hsnORow >#< appFunPP,sep >#< e] ++ map ("," >#<) es ++ [pp hsnCRow])
                 else ppNice
%%[[8
        sep = "|"
%%][99
        sep = cfgPPTyLhsSafe cfg "|"
%%]]
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% The context (of a config) of a type
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 hmtyinfer || hmtyast)
ATTR TyAGItf AllTyAndFlds [ cfg: CfgPPTy | | ]
%%]

%%[(9 hmtyinfer || hmtyast)
SEM Pred
  | Pred        loc         .   cfg             =   @lhs.cfg { cfgPPTyCtxt = TyCtxt_Pred }
  | * - Pred    loc         .   cfg             =   @lhs.cfg { cfgPPTyCtxt = TyCtxt_Ty   }
%%]

%%[(10 hmtyinfer || hmtyast)
SEM LabelAGItf
  | AGItf       loc         .   cfg             =   cfgPPTyDflt
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% TyVar name
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(3 hmtyinfer || hmtyast).TVarNameMap hs
type TVarNameMap
  = Map.Map TyVarId
            PP_Doc
%%]

%%[(3 hmtyinfer || hmtyast).tnLookupPP hs
tnLookupPP :: TyVarId -> TVarNameMap -> Maybe PP_Doc
tnLookupPP = Map.lookup
%%]

%%[(3 hmtyinfer || hmtyast) hs
tnMapInsert = Map.insert
%%]

%%[(3 hmtyinfer || hmtyast) hs
tnUniqRepr :: Int -> String
tnUniqRepr
  = lrepr
  where lrepr i     =  if i <= 26
                       then  [repr i]
                       else  let  (d,r) = i `divMod` 26
                             in   (repr d : lrepr r)
        repr        =  (chr . (97+))
%%]

%%[(3 hmtyinfer || hmtyast).ppTnUniq hs
ppTnUniq :: Int -> PP_Doc
ppTnUniq = pp . tnUniqRepr
%%]

%%[(8 hmtyinfer || hmtyast) -3.ppTnUniq hs
ppTnUniq :: CfgPPTy -> Int -> PP_Doc
ppTnUniq c = cfgPPTyPPHsn c . mkHNm . tnUniqRepr
%%]

%%[(3 hmtyinfer || hmtyast).mkDefaultTvNmPP hs
mkDefaultTvNmPP :: String -> TyVarId -> PP_Doc
mkDefaultTvNmPP pre tv = text (pre ++ "_" ++ show tv)
%%]

%%[(8 hmtyinfer || hmtyast) -3.mkDefaultTvNmPP hs
mkDefaultTvNmPP :: CfgPPTy -> String -> TyVarId -> PP_Doc
mkDefaultTvNmPP cfg pre tv = cfgPPTyPPHsn cfg $ mkHNm $ pre ++ "_" ++ show tv
%%]

%%[(3 hmtyinfer || hmtyast) hs
tvCategPrefix :: TyVarCateg -> String
tvCategPrefix TyVarCateg_Fixed = "c"
tvCategPrefix TyVarCateg_Plain = "v"
%%[[6_4
tvCategPrefix TyVarCateg_Exist = "C"
%%]
%%]

%%[(3 hmtyinfer || hmtyast)
ATTR AllTyAndFlds [ | tnUniq: {Int}  tnMap: TVarNameMap | ]
%%]

%%[(3 hmtyinfer || hmtyast)
SEM TyAGItf
  | AGItf           ty      .   tnUniq      =   0
                            .   tnMap       =   Map.empty
%%]

%%[(10 hmtyinfer || hmtyast)
SEM LabelAGItf
  | AGItf           loc     .   tnUniq      =   0
                            .   tnMap       =   Map.empty
%%]

%%[(3 hmtyinfer || hmtyast)
SEM Ty
  | Quant 
%%[[11
    Lam
%%]]
                    loc     .   tnPP        =   ppTnUniq @lhs.tnUniq
                            .   tnUniq      =   @lhs.tnUniq + 1
                            .   tnMap       =   tnMapInsert @tv @tnPP @lhs.tnMap
                    lhs     .   tnMap       =   Map.filterWithKey (\v _ -> v /= @tv) @ty.tnMap
%%]

%%[(8 hmtyinfer || hmtyast)
SEM Ty
  | Quant
%%[[11
    Lam
%%]]
                    loc     .   tnPP        :=  cfgPPTyPPVar @lhs.cfg @lhs.cfg @tv @lhs.tnUniq
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Pretty printed type
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(1 hmtyinfer || hmtyast).pp
ATTR
  TyAGItf AllTyAndFlds
%%[[10
  LabelAGItf
%%]]
    [ | | pp USE {>#<} {empty}: PP_Doc
    ]
%%]

%%[(1 hmtyinfer || hmtyast)
SEM Ty
  | Con             loc     .   pp      =   ppCon @nm
  | App             loc     .   ppDflt  =   @func.pp >#< @arg.pp
                            .   ppAppTop=   ppAppTop (@appFunNm,@appFunPP) @appArgPPL @ppDflt
                            .   ppNice  =   ppParNeed  @parNeed @lhs.parNeed @ppAppTop
                            .   pp      =   if @isSpineRoot then @ppNice else @ppDflt
  | Any             loc     .   pp      =   pp hsnUnknown
  | Ann             loc     .   pp      =   {- @ann.pp >#< -} ppParens @ty.pp >|< "@" >|< @ann.pp	-- this pp currently only for debugging, change as required
%%]

%%[(8 hmtyinfer || hmtyast)
SEM Ty
%%[[8
  | Con             loc     .   pp      :=  cfgPPTyPPCon @lhs.cfg @lhs.cfg @nm
%%][8_2
  -- Pretty print constructors as just their name
  | Con             loc     .   pp      :=  ppCon @nm
%%]]
  | App             loc     .   ppDflt  :=  if cfgPPTyFollowAST @lhs.cfg then ppParens @func.pp >#< ppParens @arg.pp else @func.pp >#< @arg.pp
%%[[8
                            .   ppAST   :=  hv ([ppParens @appFunPP] ++ map ((" " >|<) . ppParens) @appArgPPL)
%%][8_2
  -- Print applications readable (Int -> Int) in contrast to parsable ({ -> } {Int, Int}
                            .   ppAST   :=  @ppNice
%%]]
                            .   pp      :=  if @isSpineRoot
                                            then if cfgPPTyFollowAST @lhs.cfg
                                                 then @ppAST
                                                 else @ppNice
                                            else @ppDflt
%%]

%%[(99 hmtyinfer || hmtyast)
SEM Ty
  | App             loc     .   ppAppTop:=  ppAppTop' (@appFunNm,@appFunPP) @appArgPPL @appArgIsEmptyImplsL @ppDflt
%%]

%%[(2 hmtyinfer || hmtyast).Var
SEM Ty
  | Var             loc     .   pp      =   pp ("v_" ++ show @tv)
%%]

%%[(3 hmtyinfer || hmtyast).Var -2.Var
SEM Ty
  | Var             loc     .   pp      :=  maybe (mkDefaultTvNmPP (tvCategPrefix @categ.self) @tv) id (tnLookupPP @tv @lhs.tnMap)
%%]

%%[(8 hmtyinfer || hmtyast).Var -3.Var
SEM Ty
  | Var             loc     .   pp      :=  maybe (cfgPPTyPPVarDflt @lhs.cfg @lhs.cfg (tvCategPrefix @categ.self) @tv) id (tnLookupPP @tv @lhs.tnMap)
%%]

%%[(3 hmtyinfer || hmtyast).Quant
SEM Ty
  | Quant           loc     .   ppQu    =   pp "forall"
                            .   ppTv    =   @tnPP
                            .   ppTvPre =   empty
                            .   ppTvPost=   empty
                            .   pp      =   ppParNeed  @parNeed @lhs.parNeed
                                                       (@ppQu >#< @ppTvPre >|< @ppTv >|< @ppTvPost >#< "." >#< @ty.pp)
%%]

%%[(4 hmtyinfer || hmtyast)
SEM Ty
  | Quant           loc     .   ppQu 	:=	@qu.pp
  
%%]

%%[(6 hmtyinfer || hmtyast)
SEM Ty
  | Quant           inst    .   l1'     :   Ty
                    inst    .   l1'     =   @l1
                    loc     .   ppL1    :=  @l1'.pp
                            .   ppTvPost:=  if maybe False (== hsnKindStar) $ tyMbCon @l1 then empty else ppParens @ppL1
%%]

%%[(8 hmtyinfer || hmtyast)
SEM Ty
  | Quant           loc     .   pp      :=  ppParNeed  @parNeed @lhs.parNeed
                                                       (cfgppAside @lhs.cfg (@ppQu >#< @ppTvPre >|< @ppTv >|< @ppTvPost) ("." >#< @ty.pp))
%%]

%%[(4_2 hmtyinfer || hmtyast)
SEM Ty
  | Alts            loc     .   o       =   "["
                    loc     .   c       =   "]"
  | Both            loc     .   o       =   "<"
                    loc     .   c       =   ">"
  | Alts Both       loc     .   pp      =   ppParNeed  @parNeed @lhs.parNeed
                                                       (maybe (pp @tv) id (tnLookupPP @tv @lhs.tnMap) >|< ppListSep @o @c ", " @tyL.ppL)

SEM TyL [ | | ppL: {[PP_Doc]} ]
  | Nil             lhs     .   ppL     =   []
  | Cons            lhs     .   ppL     =   @hd.pp : @tl.ppL

SEM TyPlusL [ | | ppL: {[PP_Doc]} ]
  | Nil             lhs     .   ppL     =   []
  | Cons            lhs     .   ppL     =   @hd.pp : @tl.ppL

SEM TyPlus
  | Ty              lhs     .   pp      =   @ty.pp >#< "::" >#<  pp @hardness >|< "/" >|< pp @offering
%%]

%%[(4 hmtyinfer || hmtyast)
SEM TyQu
  | Forall Exists   lhs     .   pp      =   text (showTyQu @self)
%%]

%%[(7 hmtyinfer || hmtyast)
SEM Ty
  | Ext             loc     .   ppNice  =   ppExts @appFunNm @appFunPP @appArgPPL
                            .   pp      =   @ppNice
%%]

%%[(7_2 hmtyinfer || hmtyast).annotation
SEM Ty
  | Ann             loc     .   pp      =   @ann >|< ":" >|< @ty.pp
  | TruncTyCon      loc     .   pp      =   @ty.pp >|< ppListSep "<" ">" "," (Set.toList @anns)
  | ExpTyCon        loc     .   pp      =   ( "[" >#< ( "orig:" >#< @ty.pp )
                                                   >-< foldr (>-<) empty @constrs.ppL
                                            ) >-< "]"

ATTR TyExpConstrs [|| ppL : {[PP_Doc]} ]
SEM TyExpConstrs
  | Nil             lhs     .   ppL     =   []
  | Cons            lhs     .   ppL     =   @hd.pp : @tl.ppL

SEM TyExpConstr
  | Constr          lhs     .   pp      =   @nm >|< ":" >#< ppListSep "" "" "," @fields.ppL

ATTR TyExpFields [|| ppL : {[PP_Doc]} ]
SEM TyExpFields
  | Nil             lhs     .   ppL     =   []
  | Cons            lhs     .   ppL     =   @hd.pp : @tl.ppL
%%]

%%[(8 hmtyinfer || hmtyast)
SEM Ty
  | Ext             loc     .   (ppNice,ppCfg)
                                        :=  ppExts @lhs.cfg @appFunNm @appFunPP @appArgPPL
                            .   pp      :=  if @isSpineRoot then @ppCfg else @ppNice
%%]

%%[(9 hmtyinfer || hmtyast)
SEM Ty
  | Pred Impls      loc     .   wrapPP  =   if cfgPPTyCtxt @lhs.cfg == TyCtxt_Pred then id else (\pp -> hsnOImpl >#< pp >#< hsnCImpl)
  | Pred            loc     .   pp      =   cfgPPTyPPImplsAppWrap @lhs.cfg @wrapPP @pr.pp
  | Impls           loc     .   pp      =   cfgPPTyPPImplsAppWrap @lhs.cfg @wrapPP @impls.pp
  | Con             loc     .   pp      :=  if cfgPPTyCtxt @lhs.cfg == TyCtxt_Pred && hsnIsArrow @nm
                                            then cfgPPTyPPCon @lhs.cfg @lhs.cfg hsnPrArrow
                                            else cfgPPTyPPCon @lhs.cfg @lhs.cfg @nm

SEM Impls
  | Tail Cons       loc     .   ppIv    =   cfgPPTyPPImplsTailCons @lhs.cfg
                                              (maybe (cfgPPTyPPVarDflt @lhs.cfg @lhs.cfg "i" @iv) id (tnLookupPP @iv @lhs.tnMap))
                                              (ppBracketsCommas @proveOccs)
  | Tail            lhs     .   pp      =   @ppIv
  | Cons            loc     .   ppPv    =   maybe (cfgPPTyPPVarDflt @lhs.cfg @lhs.cfg "p" (poiId @pv)) id (tnLookupPP @iv @lhs.tnMap)
                    lhs     .   pp      =   cfgPPTyPPImplsPred @lhs.cfg @ppIv @pr.pp @ppPv >|< "," >|< @tl.pp
  | Nil             lhs     .   pp      =   pp "_"

SEM Pred
  | Var             lhs     .   pp      =   maybe (cfgPPTyPPVarDflt @lhs.cfg @lhs.cfg "p" @pv) id (tnLookupPP @pv @lhs.tnMap)
%%]

%%[(9_1 hmtyinfer || hmtyast)
SEM TyPlus
  | Ty              lhs     .   pp      =   pp @plv >|< ";" >|< @ty.pp
%%]

%%[(10 hmtyinfer || hmtyast)
SEM Label
  | Lab             lhs     .   pp      =   cfgPPTyPPHsn @lhs.cfg @nm
  | Var             lhs     .   pp      =   maybe (cfgPPTyPPVarDflt @lhs.cfg @lhs.cfg "l" @lv) id (tnLookupPP @lv @lhs.tnMap)

SEM Pred
  | Lacks           lhs     .   pp      =   @ty.pp >|< "\\" >|< @lab.pp
%%]
  | RowSplit        (_,lhs.pp)          =   ppExts @lhs.cfg @ty.appFunNm @ty.appFunPP @exts.appArgPPL

%%[(13 hmtyinfer || hmtyast)
ATTR PredSeq [ | | ppL: {[PP_Doc]} ]

SEM PredSeq
  | Cons            lhs     .   ppL     =   @hd.pp :  @tl.ppL
  | Var             lhs     .   ppL     =   [maybe (cfgPPTyPPVarDflt @lhs.cfg @lhs.cfg "prsq" @av) id (tnLookupPP @av @lhs.tnMap)]
  | Nil             lhs     .   ppL     =   []

SEM Pred
  | Arrow           lhs     .   pp      =   ppParensCommas @args.ppL >#< "=>" >#< @res.pp
  | Preds           lhs     .   pp      =   ppParensCommas @seq.ppL
%%]

%%[(11 hmtyinfer || hmtyast)
SEM Ty
  | Lam             loc     .   pp      =   ppParNeed  @parNeed @lhs.parNeed
                                                       (cfgppAside @lhs.cfg ("\\" >|< @tnPP) ("->" >#< @ty.pp))
%%]

%%[(16 hmtyinfer || hmtyast)
SEM Pred
  | Eq              lhs     .   pp      =   ppParNeed @parNeed @lhs.parNeed (@tyL.pp >#< "=" >#< @tyR.pp)
%%]

%%[(50 hmtyinfer || hmtyast)
SEM Ty
  | Equal           loc     .   pp      =   ppParens (maybe (cfgPPTyPPVarDflt @lhs.cfg @lhs.cfg "e" @tv) id (tnLookupPP @tv @lhs.tnMap) >|< "=" >|< @ty.pp)
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Annotations
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(1 hmtyinfer || hmtyast)
SEM TyAnn
  | Empty			loc		.	pp		=	empty
%%[[4
  | Mono			loc		.	pp		=	pp "<MONO>"
%%]]
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Records, default (positional) name if absent
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(7 hmtyinfer || hmtyast)
ATTR Ty Ty->Ty [ | positionalFldNmL: {[HsName]} | ]

SEM TyAGItf
  | AGItf           ty      .   positionalFldNmL    =   positionalFldNames

SEM Ty
  | Ext             (loc.positionalNm,lhs.positionalFldNmL)
                                                    =   hdAndTl @ty.positionalFldNmL
                    extTy   .   positionalFldNmL    =   positionalFldNames
  | * - Ext         lhs     .   positionalFldNmL    =   @lhs.positionalFldNmL
%%]

%%[(7_1 hmtyinfer || hmtyast)
SEM TyL
  | Cons            hd      .   positionalFldNmL    =   positionalFldNames

SEM TyPlus
  | Ty              ty      .   positionalFldNmL    =   positionalFldNames
%%]

%%[(9 hmtyinfer || hmtyast)
SEM Pred
  | *               loc     .   positionalFldNmL    =   positionalFldNames
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Record ext/upd separator
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(7 hmtyinfer || hmtyast)
SEM Ty
%%[[7
  | App             loc     .  recSep       =   "|"
%%][99
  | App             loc     .  recSep       =   cfgPPTyLhsSafe @lhs.cfg "|"
%%]]
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Ty constr name of app + args, see also EHPretty
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(1 hmtyinfer || hmtyast).appFunPP
ATTR
  Ty [ | | appFunPP: PP_Doc      appArgPPL: {[PP_Doc]}
     ]
%%]
%%[(10 hmtyinfer || hmtyast)
%%]
ATTR
  RowExts
    [ | | appArgPPL: {[PP_Doc]}
    ]

%%[(1 hmtyinfer || hmtyast).appFunPP.Ty
SEM Ty
  | App             loc     .  appArgPPL    =   @func.appArgPPL ++ [@arg.pp]
                            .  appFunPP     =   @func.appFunPP
  | * - App         lhs     .  appArgPPL    =   []
                            .  appFunPP     =   @pp
%%]

%%[(7 hmtyinfer || hmtyast) -1.appFunPP.Ty
SEM Ty
  | App             loc     .  (appFunPP,appArgPPL)
                                            :=  mkExtAppPP' @recSep
                                                            (@appFunNm,@func.appFunPP,@func.appArgPPL)
                                                            (@arg.appFunNm,@arg.appFunPP,@arg.appArgPPL,@arg.pp)
  | Ext             loc     .  fldPP        =   ppFld "::" (Just @positionalNm) @nm (pp @nm) @extTy.pp
                            .  appArgPPL    :=  @ty.appArgPPL ++ [@fldPP]
                            .  appFunPP     :=  @ty.appFunPP
  | * - App Ext     lhs     .  appArgPPL    :=  []
                            .  appFunPP     :=  @pp
%%]

%%[(8 hmtyinfer || hmtyast)
SEM Ty
  | App             loc     .  (appFunPP,appArgPPL)
                                            :=  if cfgPPTyFollowAST @lhs.cfg
                                                then (@func.appFunPP,@func.appArgPPL ++ [@arg.pp])
                                                else mkExtAppPP' @recSep
                                                                 (@appFunNm,@func.appFunPP,@func.appArgPPL)
                                                                 (@arg.appFunNm,@arg.appFunPP,@arg.appArgPPL,@arg.pp)
  | Ext             loc     .  fldPP        :=  let pn = if cfgPPTyFollowAST @lhs.cfg then Nothing else Just @positionalNm
                                                in  ppFld "::" pn @nm (cfgPPTyPPHsn @lhs.cfg @nm) @extTy.pp
%%]

%%[(10 hmtyinfer || hmtyast)
%%]
SEM RowExts
  | Exts            loc     .   appArgPPL   =   [ ppFld "::" Nothing l (pp l) (ppTyWithCfg @lhs.cfg t) | (l,t) <- @exts ]
  | Var             loc     .   appArgPPL   =   [ maybe (cfgPPTyPPVarDflt @lhs.cfg @lhs.cfg "e" @ev) id (tnLookupPP @ev @lhs.tnMap) ]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Need for parenthesis
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(1 hmtyinfer || hmtyast).ParNeed
ATTR Ty Ty->Ty [ parNeed: ParNeed  parNeedL: ParNeedL | | ]

SEM TyAGItf
  | AGItf       ty      .   parNeed             =   ParNotNeeded
                        .   parNeedL            =   []

SEM Ty
  | App         loc     .   (parNeed,argsParNeedL)
                                                =   if @isSpineRoot
                                                    then  parNeedApp @appFunNm
                                                    else  (ParNotNeeded,@lhs.parNeedL)
                (arg.parNeed,func.parNeedL)
                                                =   hdAndTl @argsParNeedL
%%]

%%[(3 hmtyinfer || hmtyast)
SEM Ty
  | Quant       loc     .   parNeed             =   ParNotNeeded
%%]

%%[(4_2 hmtyinfer || hmtyast)
SEM TyL
  | Cons        hd      .   parNeed             =   ParNotNeeded
                        .   parNeedL            =   []

SEM TyPlus
  | Ty          ty      .   parNeed             =   ParNotNeeded
                        .   parNeedL            =   []

SEM Ty
  | Alts Both   loc     .   parNeed             =   ParNotNeeded
%%]

%%[(7 hmtyinfer || hmtyast)
SEM Ty
  | Ext         ty      .   parNeed             =   ParNotNeeded
                extTy   .   parNeed             =   ParNotNeeded
                loc     .   parNeed             =   ParNotNeeded
%%]

%%[(9 hmtyinfer || hmtyast)
SEM Pred
  | Pred        loc     .   parNeed             =   ParNeeded
                        .   parNeedL            =   []
  | * - Pred    loc     .   parNeed             =   ParNotNeeded
                        .   parNeedL            =   []
%%]

%%[(11 hmtyinfer || hmtyast)
SEM Ty
  | Lam         loc     .   parNeed             =   ParNotNeeded
%%]

%%[(50 hmtyinfer || hmtyast)
SEM Ty
  | Equal       loc     .   parNeed             =   ParNotNeeded
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Is Ty an empty Impls, so it does not really need to be printed
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Gather parallel to appArgPPL whether it represents an empty sequence of Impls.
In that case printing it can be avoided (if so desired, determined by configuration).

%%[(99 hmtyinfer || hmtyast)
ATTR Ty Impls [ | | isEmptyImpls: Bool ]

SEM Impls
  | Nil             lhs     .   isEmptyImpls            =   cfgPPTyElimEmptyImpls @lhs.cfg
  | * - Nil         lhs     .   isEmptyImpls            =   False

SEM Ty
  | * - Impls       lhs     .   isEmptyImpls            =   False
%%]

%%[(99 hmtyinfer || hmtyast)
ATTR Ty [ | | appArgIsEmptyImplsL: {[Bool]} ]

SEM Ty
  | App             loc     .   appArgIsEmptyImplsL     =   @func.appArgIsEmptyImplsL ++ [@arg.isEmptyImpls]
  | * - App         lhs     .   appArgIsEmptyImplsL     =   []
%%]

