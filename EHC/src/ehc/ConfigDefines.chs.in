%%[0
{-# OPTIONS_GHC -cpp #-}
%%]

%%[8 module {%{EH}ConfigDefines} import({%{EH}Base.Opts})
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Utils
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8 export(mkB)
mkB :: Int -> Bool
mkB x = if x /= 0 then True else False
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% GC variations
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

The chose variant should correspond with the choice made in src/rts/rts.ch.
It is a temporary solution to make this dependent on the target.

%%[8 export(GCVariant(..),gcVariant)
#undef USE_BOEHM_GC

data GCVariant
  = GCVariant_Boehm | GCVariant_Uhc
  deriving Eq

gcVariant :: EHCOpts -> GCVariant
gcVariant opts | ehcOptEmitExecBytecode opts = GCVariant_Uhc
               | mkB USE_BOEHM_GC            = GCVariant_Boehm
               | otherwise                   = GCVariant_Uhc
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Configuration
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8 export(useBoehmGC)
useBoehmGC :: EHCOpts -> Bool
useBoehmGC opts = gcVariant opts == GCVariant_Boehm
%%]

%%[97 export(mpLib,MPLib(..))
#undef USE_LTM
#undef USE_GMP

data MPLib
  = MPLib_LTM | MPLib_GMP
  deriving (Show,Eq)

mpLib :: MPLib
mpLib | mkB USE_GMP = MPLib_GMP
      | otherwise   = MPLib_LTM
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Size of word, the basic unit of ptr/int/...
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8
#undef SIZEOF_INTPTR_T
%%]

%%[8 export(sizeofWord,sizeofWordInBits,sizeofWordAsInteger,sizeofWordInLog)
sizeofWord :: Int
sizeofWord = SIZEOF_INTPTR_T

sizeofWordInBits :: Int
sizeofWordInBits = sizeofWord * 8

sizeofWordInLog :: Int
sizeofWordInLog = if sizeofWord == 8 then 3 else 2

sizeofWordAsInteger :: Integer
sizeofWordAsInteger = toInteger sizeofWord
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Minimal size of node, in words, see also remarks at GCVariant
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[8 export(nodeNeedsForwarding)
nodeNeedsForwarding :: EHCOpts -> Bool
nodeNeedsForwarding opts
  = case gcVariant opts of
      GCVariant_Boehm -> False -- header only
      GCVariant_Uhc   -> True  -- header + 1 fld for forwarding
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Size of other known types
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[97
#undef SIZEOF_FLOAT
#undef SIZEOF_DOUBLE
%%]

%%[97 export(sizeofFloat,sizeofDouble)
sizeofFloat :: Int
sizeofFloat = SIZEOF_FLOAT

sizeofDouble :: Int
sizeofDouble = SIZEOF_DOUBLE
%%]

%%[97
%%]
sizeofFloatInLog :: Int
sizeofFloatInLog = log2 sizeofFloat

sizeofDoubleInLog :: Int
sizeofDoubleInLog = log2 sizeofDouble

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Sizes
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen grin) export(sizeofPointer)
#undef SIZEOF_INTPTR_T

sizeofPointer :: Int
sizeofPointer = SIZEOF_INTPTR_T
%%]

%%[(8 codegen grin) export(sizeofGrWord,sizeofGrWordAsInteger,use64Bits,use32Bits)
sizeofGrWord :: Int
sizeofGrWord = sizeofWord

sizeofGrWordAsInteger :: Integer
sizeofGrWordAsInteger = sizeofWordAsInteger

use64Bits, use32Bits :: Bool
(use64Bits,use32Bits)
  = if sizeofGrWord == 8
    then (True,False)
    else (False,True)
%%]

%%[(8 codegen grin) export(gbLabelOffsetSize)
gbLabelOffsetSize :: Int
gbLabelOffsetSize = sizeofGrWord
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Endianness
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen grin) export(machineIsBigEndian)
#undef BIGENDIAN
#undef LITTLEENDIAN

machineIsBigEndian :: Bool
machineIsBigEndian = mkB BIGENDIAN
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% RTS related
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(8 codegen grin) export(rtsGlobalVarPrefix, rtsUseGC)
#undef RTS_GLOBAL_VAR_PREFIX
#undef USE_BOEHM_GC

rtsGlobalVarPrefix :: String
rtsGlobalVarPrefix = RTS_GLOBAL_VAR_PREFIX

rtsUseGC :: Bool
rtsUseGC = mkB USE_BOEHM_GC

%%]
