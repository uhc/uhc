%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Flow/gather of type variable kind mapping, as VarMp
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[doesWhat doclatex
The purpose is to map type variables to their kind, so this info can be
incorporated into quantified types. It must run independently of kind
inference as kind inference is done and ready. Kind inferred info can be
used, but we cannot add to it. In that case a cycle would then be
created. With tvKiVarMp this info is distributed, with gathTvKiVarMp it
is gathered from fitsIn's where instantiations take place.
We start out with the info gathered by kind inference.

20090629: gathering is now piggybacked on tyVarMp which allows mappings for multiple meta levels.
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Decl of info, use in Let
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(6 hmtyinfer)
ATTR
  AllDecl AllExpr AllCase AllPatExpr AllData AllDataConstr
    [ tvKiVarMp: VarMp
    | |
      gathTvKiVarMp USE {`varmpUnion`} {emptyVarMp}: VarMp
    ]
%%]

%%[(6 hmtyinfer)
SEM AGItf
  | AGItf       expr        .   tvKiVarMp           =   @expr.kiVarMp

SEM Expr
  | Let         loc         .   gathTvKiVarMp1      =   varmpMapTyVarKey @tyVarMpDeclsL0 (varmpDecMetaLev @decls.tyVarMp) -- @decls.gathTvKiVarMp -- (varmpDecMetaLev @decls.gathTvKiVarMp)
                            .   quTvKiVarMp         =   @gathTvKiVarMp1 |=> @lhs.tvKiVarMp
                            .   gathTvKiVarMp2      =   varmpFilterTy (\v _ -> v `Set.member` @noLetQuantTyVarIdS) @gathTvKiVarMp1
                body        .   tvKiVarMp           =   @gathTvKiVarMp2 |=> @lhs.tvKiVarMp
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Gathering
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[(6666 noHmTyRuler hmtyinfer)
SEM Expr
  | IConst CConst SConst Var Con
%%[[97
    IIConst
%%]]
                lhs         .   gathTvKiVarMp       =   foTvKiVarMp @fo_
%%[[12
  | AppImpl     lhs         .   gathTvKiVarMp       =   varmpUnions [foTvKiVarMp @foPr,@func.gathTvKiVarMp,@arg.gathTvKiVarMp]
%%]]
  | Lam         lhs         .   gathTvKiVarMp       =   varmpUnions [foTvKiVarMp @fo_fitF_,@arg.gathTvKiVarMp,@body.gathTvKiVarMp]
  | TypeAs      lhs         .   gathTvKiVarMp       =   varmpUnions [foTvKiVarMp @fo_,foTvKiVarMp @fo_fitDown,@expr.gathTvKiVarMp]
  | Let         lhs			.	gathTvKiVarMp       =   varmpUnions [{- foTvKiVarMp @foKnRes, -} @gathTvKiVarMp2,@body.gathTvKiVarMp]
%%[[7
  | Rec         lhs         .   gathTvKiVarMp       =   varmpUnions [foTvKiVarMp @fo_,@recExpr.gathTvKiVarMp]
%%]]
%%[[9
  | AppTop      lhs         .   gathTvKiVarMp       =   varmpUnions [foTvKiVarMp @foKnRes,@expr.gathTvKiVarMp]
%%]]
%%[[12
  | LamImpl     lhs         .   gathTvKiVarMp       =   varmpUnions [foTvKiVarMp @fo_fitF_,foTvKiVarMp @foPr,@arg.gathTvKiVarMp,@body.gathTvKiVarMp]
%%]]
%%]

%%[(6666 noHmTyRuler hmtyinfer)
SEM PatExpr
  | AppTop      lhs         .   gathTvKiVarMp       =   foTvKiVarMp @fo_fitR_
  | Con         lhs         .   gathTvKiVarMp       =   varmpUnions [foTvKiVarMp @fo_fitP_,foTvKiVarMp @fo_fitR_]
  | SConst Var  lhs         .   gathTvKiVarMp       =   foTvKiVarMp @fo_
  | VarAs TypeAs
  				lhs         .   gathTvKiVarMp       =   varmpUnions [foTvKiVarMp @fo_,@patExpr.gathTvKiVarMp]
%%[[97
  | Expr		lhs         .   gathTvKiVarMp       =   varmpUnions [foTvKiVarMp @fo_,@expr.gathTvKiVarMp]
%%]]
%%]

%%[(7777 hmtyinfer)
SEM DataFieldExpr
  | Upd         lhs         .   gathTvKiVarMp       =   varmpUnions [foTvKiVarMp @fo_,@dataFieldExpr.gathTvKiVarMp,@expr.gathTvKiVarMp]
  | Con         lhs         .   gathTvKiVarMp       =   foTvKiVarMp @fo_

SEM DataFieldPatExpr
  | Ext         lhs         .   gathTvKiVarMp       =   varmpUnions [foTvKiVarMp @fo_,@dataFieldPatExpr.gathTvKiVarMp,@patExpr.gathTvKiVarMp]
  | Con         lhs         .   gathTvKiVarMp       =   foTvKiVarMp @fo_
%%]

%%[(7777 hmtyinfer)
SEM Expr
  | DataFields  lhs         .   gathTvKiVarMp       =   varmpUnions $ map foTvKiVarMp @foL
%%]

%%[(7777 hmtyinfer)
SEM RecExpr
  | Empty       lhs         .   gathTvKiVarMp       =   foTvKiVarMp @fo_
  | Ext Upd     lhs         .   gathTvKiVarMp       =   varmpUnions [foTvKiVarMp @foKnRec,@recExpr.gathTvKiVarMp,@expr.gathTvKiVarMp]

SEM RecPatExpr
  | Empty       lhs         .   gathTvKiVarMp       =   foTvKiVarMp @fo_
  | Ext         lhs         .   gathTvKiVarMp       =   varmpUnions [foTvKiVarMp @fo_,@recPatExpr.gathTvKiVarMp,@patExpr.gathTvKiVarMp]
%%]

