%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Pretty print to HTML
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


%%[7_2

ATTR AGItf [|| ppHTML : {String} ]
SEM AGItf
  | AGItf
      loc.ppHTML = mkHTMLDocument (   @expr.ppHTML
                                  >-< hlist @expr.ppInfos
                                  )

%%]


Pretty print to HTML for expressions

%%[7_2

ATTR AllExpr AllCase AllDecl AllPatExpr [|| ppInfos USE {++} {[]} : {[PP_Doc]} ]
ATTR AllExpr [|| ppHTML : {PP_Doc} ]
ATTR AllCase [|| ppHTML USE {>-<} {empty} : {PP_Doc} ]

SEM Expr
  | CConst
      loc.ppTermHTML = pp (show @char)
  | SConst
      loc.ppTermHTML = pp (show @str)
  | IConst
      loc.ppTermHTML = pp (show @int)
  | Con
      loc.ppTermHTML = pp (show @nm)
  | Var
      loc.ppTermHTML = pp (show @nm)
  | CConst IConst Con Var SConst
      lhs.ppHTML = ppIdentLink @loc.ppInfoUID @loc.ppTermHTML
      loc.ppInfoUID = @loc.ppHtmlBlockUID_
      lhs.ppInfos = [invisible @loc.ppInfoHtmlBlock]
      loc.ppInfoHtmlBlock = mkInfoHtmlBlock @loc.ppHtmlBlockUID_ @loc.ppHtmlInfo
      loc.ppHtmlInfo = @loc.ppTermHTML >#< ppSymbolHTML "::" >#< (   ppTyHTML (ppAnn show) @loc.tyAnnExp
                                                                 >-< ppTyHTML (ppAnn (\ann -> Map.findWithDefault (show "?") ann (Map.map show @lhs.uniquenessSubst))) @loc.tyAnnExp
                                                                 >-< ppTyHTML (ppAnn (\ann -> Map.findWithDefault (show "?") ann (Map.map show @loc.belownessInfo))) @loc.tyAnnExp
                                                                 >-< ppTyHTML (ppAnn (\ann -> Map.findWithDefault (show "?") ann (Map.map show @loc.varianceInfo))) @loc.tyAnnExp
                                                                 )
  | App AppImpred
      lhs.ppHTML = @func.ppHTML >#< @arg.ppHTML
  | Parens
      lhs.ppHTML = ppParensHTML @loc.ppParensUniq @expr.ppHTML
  | Lam
      lhs.ppHTML = ppSymbolHTML (pp "&" >|< invisible (pp "lambda;")) >|< @arg.ppHTML >#< ppSymbolHTML (pp "->") >#< @body.ppHTML
  | Let
      lhs.ppHTML = ppKeywordHTML (pp "let") >|< ppEnclosingTag "<sub class=\"bndg\">" (show @loc.declsBndgId) "</sub>" >#< @decls.ppHTML
                   >-<
                   " " >|< ppKeywordLink @loc.ppHtmlBlockUID (pp "in") >|< ppEnclosingTag "<sub class=\"bndg\">" (show @lhs.bndgId) "</sub>"  
                                                                       >#< ( @body.ppHTML
                                                                            >-< hlist @loc.ppInfos
                                                                            )
      loc.ppInfos = [invisible @loc.ppInfoHtmlBlock] ++ @decls.ppInfos ++ @body.ppInfos
      loc.ppInfoHtmlBlock = mkInfoHtmlBlock @loc.ppHtmlBlockUID @loc.ppHtmlInfo
      loc.ppHtmlInfo = ppSymbolHTML "in" >#< ppSymbolHTML "::" >#< ppTyHTML (ppAnn show) @body.annTy
      lhs.ppInfos = []
  | Case
      lhs.ppHTML = ppKeywordHTML (pp "case") >#< @expr.ppHTML >#< ppKeywordHTML (pp "of")
                   >-<
                   "  " >|< @alts.ppHTML
  | Sel
      lhs.ppHTML = @expr.ppHTML >|< ppSymbolHTML (pp ".") >|< show @lbl

SEM RecExpr
  | Empty
      lhs.ppHTML = ppKeywordHTML (pp "()")
  | Ext
      lhs.ppHTML = ppParensHTML @loc.ppParensUniq (@recExpr.ppHTML >#< ppSymbolHTML (pp "|") >#< pp @nm >|< ppSymbolHTML (pp "=") >|< @expr.ppHTML)
  | Upd
      lhs.ppHTML = ppParensHTML @loc.ppParensUniq (@recExpr.ppHTML >#< ppSymbolHTML (pp "|") >#< show @nm >|< ppSymbolHTML (pp ":=") >|< @expr.ppHTML)

SEM CaseAlt
  | Pat
      lhs.ppHTML = @patExpr.ppHTML >#< ppSymbolHTML (pp "->") >#< @expr.ppHTML

SEM DataFieldExpr
  | Con
      lhs.ppHTML = pp "!!!not supported!!!"

%%]


Pretty print to HTML for patterns

%%[7_2

ATTR AllPatExpr [|| ppHTML : {PP_Doc} ]

SEM PatExpr
  | IConst
      loc.ppTermHTML = pp (show @int)
  | CConst
      loc.ppTermHTML = pp (show @char)
  | SConst
      loc.ppTermHTML = pp (show @str)
  | Con
      loc.ppTermHTML = pp (show @nm)
  | Var
      loc.ppTermHTML = pp (show @nm)
  | IConst CConst SConst Con Var
      lhs.ppHTML = ppIdentLink @loc.ppHtmlBlockUID @loc.ppTermHTML
      loc.ppInfos = [invisible @loc.ppInfoHtmlBlock]
      loc.ppInfoHtmlBlock = mkInfoHtmlBlock @loc.ppHtmlBlockUID @loc.ppHtmlInfo
      loc.ppHtmlInfo = @loc.ppTermHTML >#< ppSymbolHTML "::" >#< (   ppTyHTML (ppAnn show) @lhs.annPatTy
                                                                 >-< ppTyHTML (ppAnn (\ann -> show $ Map.findWithDefault UniquenessConflict ann @lhs.uniquenessSubst)) @lhs.annPatTy
                                                                 )
  | App
      lhs.ppHTML = @func.ppHTML >#< @arg.ppHTML
  | Parens
      lhs.ppHTML = ppParensHTML @loc.ppParensUniq @patExpr.ppHTML

SEM RecPatExpr
  | Empty
      lhs.ppHTML = pp "()"
  | Ext
      lhs.ppHTML = ppParensHTML @loc.ppParensUniq (@recPatExpr.ppHTML >#< ppSymbolHTML (pp "|") >#< pp @nm >|< ppSymbolHTML (pp "=") >|< @patExpr.ppHTML)

SEM DataFieldPatExpr
  | Con
      lhs.ppHTML = pp "!!!not supported!!!"

%%]


Pretty print a subset of the declarations

%%[7_2

ATTR AllDecl AllDataConstr [|| ppHTML USE {>-<} {empty} : {PP_Doc} ]
ATTR TyVars TyVar [|| ppHTML USE {>#<} {empty} : {PP_Doc} ]

SEM Decl
  | Val
      lhs.ppHTML = @patExpr.ppHTML >#< ppSymbolLink @loc.ppHtmlBlockUID (pp "=") >#< @expr.ppHTML
                   >-< hlist @loc.ppInfos
      loc.ppInfos = invisible @loc.ppInfoHtmlBlock : @patExpr.ppInfos ++ @expr.ppInfos
      loc.ppInfoHtmlBlock = mkInfoHtmlBlock @loc.ppHtmlBlockUID @loc.ppHtmlInfo
      loc.ppHtmlInfo = @patExpr.ppHTML >#< ppSymbolHTML "::" >#< ppTyHTML (ppAnn show) @expr.annTy
      lhs.ppInfos = []
  | Data
      lhs.ppHTML = ppKeywordHTML (pp "data") >|< ppEnclosingTag "<sup>" (ppAnn show @loc.ann) "</sup>"
                                             >#< show @tyNm >#< @tyVars.ppHTML
                                             >#< ppEnclosingTag "<sub>" (ppListSep "{" "}" "," [ ppAnn show ann | ann <- Set.toList @loc.exposedAnns]) "</sub>"
                   >-< "  " >|< @constrs.ppHTML

SEM DataConstr
  | Constr
      lhs.ppHTML = ppSymbolHTML (pp "|") >#< show @conNm >#< ppSymbolHTML (pp "::") >#< ppTyHTML (ppAnn show) @loc.expAnnTy

SEM TyVar
  | Var
      lhs.ppHTML = ppPatIdentHTML (pp (show @nm))

%%]
