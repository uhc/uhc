-------------------------------------------------------------------------
-- Shared
-------------------------------------------------------------------------

include EhcRulesShared2

-------------------------------------------------------------------------
-- Ty alternative elimination
-------------------------------------------------------------------------

ruleset tyAltTyElim scheme tyAltTyElim viewsel I2 - * "Type alternative elimination" =
  rule ty.ae.alts =
    view I2 =
      judge C : bind1TyVarToTy = tyVarMp === [tvarv :-> ty]
      judge NE : notIsEmpty = `|` (ty.thardH.._, ty.Qu.._) `|` > 0
      judge EQ : eqRLTy = (tvarv [ talt..._ ]) =<= ity
      judge tysH : tyAltSelect = ty.thardH.._ === talt..._ , ty, thardH, tneed
      judge tysS : tyAltSelect = ty.thardS.._ === talt..._ , ty.nQu, thardS, tneed
      judge tysQ : tyAltSelect = ty.Qu.._ === talt..._ , ty.Qu, thardS, tneed
      judge H : match = fiopt :- ((ty.thardH.._, ty.Qu.._)) <=>.(<=>) ANY : ity.thardH ~> ityVarMp.h
      judge S : match = fiopt :- (ityVarMp.h ty.thardS.._) <=>.(<=>) ity.thardH : ity.thardS ~> _
      judge AE : tyAltTyElim = fiopt ; ityVarMp.in; tvarv.g.._ :- ity.thardS : ty ~> tyVarMp.e
      judge need : fioptMkNeed = tneed === fiopt
      judge glob : notElemTyVarIdS = tvarv `notElem` tvarv.g.._
      ---
      judge R : tyAltTyElim = fiopt ; ityVarMp.in; tvarv.g.._ :- ity : ty ~> (tyVarMp tyVarMp.e)

  rule ty.ae.var =
    view I2 =
      judge P : tyAltPartition = (tvarv [ _ ]) === ity
      judge glob : notElemTyVarIdS = tvarv `notElem` tvarv.g.._
      ---
      judge R : tyAltTyElim = fiopt ; ityVarMp.in; tvarv.g.._ :- ity : tvarv ~> emptyVarMp

  rule ty.ae.ty =
    view I2 =
      ---
      judge R : tyAltTyElim = fiopt ; ityVarMp.in; tvarv.g.._ :- ty : ty ~> emptyVarMp

  rule ty.ae.arrow =
    view I2 =
      judge Res : tyAltTyElim = fiopt ; ityVarMp.in; tvarv.g.._ :- ity.r : ty.r ~> tyVarMp.r
      judge Arg : tyAltTyElim = fiopt.a ; ityVarMp.in; tvarv.g.._ :- ity.a : ty.a ~> tyVarMp.a
      judge S : fioptSwapMeetJoin = fiopt.a === fiopt
      ---
      judge R : tyAltTyElim = fiopt ; ityVarMp.in; tvarv.g.._ :- (ity.a -> ity.r) : (ty.a -> ty.r) ~> (tyVarMp.a tyVarMp.r)

-------------------------------------------------------------------------
-- Gam Ty alternative elimination
-------------------------------------------------------------------------

ruleset valElimExprAlts scheme valElimExprAlts viewsel I2 - * "Type alternative elimination (for a |Gamma|)" =
  rule g.ae.cons =
    view I2 =
      judge G : valElimExprAlts = fiopt ; ityVarMp.in; tvarv.g.._ :- (ityVarMp.a valGam) : ityVarMp.g
      judge A : tyAltTyElim = fiopt ; ityVarMp.in; tvarv.g.._ :- ityVarMp.in ity : _ ~> ityVarMp.a
      ---
      judge R : valElimExprAlts = fiopt ; ityVarMp.in; tvarv.g.._ :- ((_ :-> ity, valGam)) : (ityVarMp.g ityVarMp.a)

-------------------------------------------------------------------------
-- 'Both' alternative elimination
-------------------------------------------------------------------------

ruleset tyBtTyElim scheme tyBtTyElim viewsel I2 - * "Type `both' elimination" =
  rule ty.eb.any =
    view I2 =
      judge E : tvarsHasTvar = tvarv `elem` bv
      ---
      judge R : tyBtTyElim = bv :- (tvarv /=/ ANY) : tvarv ~> tvarv; ([])

  rule ty.eb.var =
    view I2 =
      judge T : tyBtTyElim = bv :- ty.b : ty ~> tvarv.e ; tyVarMp
      judge E : tvarsHasTvar = tvarv `elem` bv
      ---
      judge R : tyBtTyElim = bv :- (tvarv /=/ ty.b) : tvarv ~> tvarv; ([tvarv.e :-> tvarv] tyVarMp)

  rule ty.eb.ty =
    view I2 =
      judge T : tyBtTyElim = bv :- ty.b : ty ~> ty.e ; tyVarMp
      judge E : tvarsHasTvar = tvarv `elem` bv
      ---
      judge R : tyBtTyElim = bv :- (tvarv /=/ ty.b) : tvarv ~> ty.e ; ([tvarv :-> ty.e] tyVarMp)

