-------------------------------------------------------------------------
-- Pattern Expr
-------------------------------------------------------------------------

scheme patexpr "PatExpr" =
  view K =
    holes [ knTy: Ty, node p: PatExpr | thread valGam: ValGam |  ]
    judgespec valGam.inh ; knTy :-.."p" p : valGam.syn
    explain (Knowing the type of pattern |p| to be |knTy| , yielding additional bindings |valGam.syn| (for identifiers introduced by |p|))
    explain knTy = (Known type of pattern)
    explain valGam.inh = (Already gathered bindings (for this EH version initially | [] |))
    explain valGam.syn = (|valGam.inh| + new bindings)
  view C =
    holes [ | thread tyVarMp: VarMp | retain ty: Ty, patFunTy: Ty ]
    judgespec tyVarMp.inh ; valGam.inh ; knTy :-.."p" p : ty ; valGam.syn ~> tyVarMp.syn ; patFunTy
    explain (Knowing the type of pattern |p| to be |tyVarMp.inh knTy| ,
             |p| has type |ty| and bindings |valGam.syn| (for identifiers introduced by |p|) ,
             under constraints |tyVarMp.syn|
            )
    explain tyVarMp.inh = (Already known constraints)
    explain tyVarMp.syn = (|tyVarMp.inh| + new constraints)
    explain ty = (Type of pattern |p|)
    -- explain patFunTy = (The type which encodes the value dissection as a function type, from value to tuple (holding the constituents of the value))
    explain patFunTy = ((Internal use only) Encoding of the value dissection as a type of the form |ty.v -> ty.e| ,
                        where a value of type |ty.v| is dissected, yielding a tuple type |ty.e| with the elements (of the dissection)
                       )
  view I1 =
    holes [ fiopt: FIOpts | thread tyGam: TyGam | ]
    judgespec fiopt ; tyGam.inh ; valGam.inh ; tyVarMp.inh ; knTy :- p : ty ; tyGam.syn ; valGam.syn ~> tyVarMp.syn ; patFunTy
    judgeuse tex fiopt ; valGam.inh ; tyVarMp.inh ; knTy :-.."p" p : ty ; valGam.syn ~> tyVarMp.syn ; patFunTy
    explain (Knowing the type of pattern |p| to be |knTy| , |valGam.syn| hold bindings for identifiers introduced by |p| , |tyGam.syn| holds bindings for lexically scoped type variables .)
    explain fiopt = (|fitsIn| options, additional contextual information for | <= |)
    explain tyGam.inh = (Already gathered type variable bindings)
    explain tyGam.syn = (|tyGam.inh| + new bindings)


-------------------------------------------------------------------------
-- Type Expr
-------------------------------------------------------------------------

scheme tyexpr "TyExpr" =
  view E =
    holes [ node t: TyExpr | | retain ty: Ty ]
    judgespec :-.."t" t : ty
    explain (Type expression |t| has a corresponding type signature |ty| .)
    explain ty = (Type signature)
    explain t = (Type expression)
  view K =
    holes [ tyGam: TyGam | | ]
    judgespec tyGam :-.."t" t : ty
    explain (Within environment |tyGam| , type expression |t| has a (replica) type signature |ty| .)
    explain tyGam = (Environment | (ident :-> ty)..._ | for type identifiers)
  view HM =
    holes [ | thread tyGam: TyGam | tyWildL: TyL ]
    judgespec tyGam.inh :-.."t" t : ty ~> tyGam.syn ; tyWildL
    explain (Within environment |tyGam.inh| , type expression |t| has a (replica) type signature |ty|
            , yielding additional bindings |tyGam.syn| and wild type variables |tyWildL|
            .)
    explain tyGam.inh = (Environment | (ident :-> ty)..._ | with known bindings for type identifiers)
    explain tyGam.syn = (Environment with |tyGam.inh| + new bindings)
    explain tyWildL = (Type variables which occur as wildcard)


-------------------------------------------------------------------------
-- Predicates (proving of)
-------------------------------------------------------------------------

scheme pred "Pred" =
  view E =
    holes [ predGam: PredGam, node pred: Pred | |  ]
    judgespec predGam :-.."pi" pred
  view P =
    holes [ | | ty: Ty, translExpr: TranslExpr ]
    judgespec predGam :-.."pi" pred ~> translExpr : ty

-------------------------------------------------------------------------
-- 'Both' alternative elimination
-------------------------------------------------------------------------

scheme tyBtTyElim =
  view I2 =
    holes [ bv: TyVarIdS, ty.tboth: Ty | | ty: Ty, ty.elim: Ty, tyVarMp: VarMp ]
    judgespec bv :-...("/=/ elim") ty.tboth : ty ~> ty.elim ; tyVarMp
    explain (Split |ty.tboth| holding |tboth| types into |ty| holding type variables (of |tboth| types) and |tyVarMp| holding constraints on those type variables.)
    explain ty.tboth = (Type to be |tboth| type eliminated)
    explain ty = (Result type, |tboth| types replaced by their original type variable)
    explain ty.elim = (Type where |tboth| types are replaced by their |tboth| type (if not |ANY|), only used internally)
    explain tyVarMp = (Constraints for |tboth| type variables, mapping to their |tboth| type)
    explain bv = (Already bound variables for which no elimination takes place)

-------------------------------------------------------------------------
-- Quantification of type
-------------------------------------------------------------------------

scheme tyqu =
  view I1 =
    holes [ node ty: Ty, tvars.g: TyVarIdS, coco: CoCo | | ty.q: Ty, tvars.f: TyVarIdS ]
    judgespec tvars.g; coco :-.."Qu" ty : ty.q ~> tvars.f
    -- explain (Type |ty.q| equals |ty| , with quantifiers for type variables in |ty.q| not in |tvars.g|)
    explain (Type |ty.q| has quantified type |ty| , with quantifiers for type variables | `elem` (ftv(ty.q) \\ tvars.g)|)
    explain coco = ("Co/contravariance" context, used internally)
    explain ty =  (Type to be quantified)
    explain ty.q = (Quantified type)
    explain tvars.g = (Global type  variables, are not quantified)
    explain tvars.f = (Free type variables of |ty| , used internally)      

