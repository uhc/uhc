%%[0
%include lhs2TeX.fmt
%include afp.fmt
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Gather errors
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[1
ATTR AllNT AGItf [ | | errSq USE {`Seq.union`} {Seq.empty} : ErrSq ]
%%]

%%[1.Module
SEM Module
    | Module
        loc         .   errSq       =   Seq.firstNotEmpty [Seq.fromList @errUndef,@body.errSq]

SEM Body
    | Body
        loc         .   errSq       =   Seq.unions [Seq.fromList @errDupIntro, Seq.fromList @errReorder, @declarations.errSq]
%%]

%%[20 -1.Module
SEM Module
    | Module
        lhs         .   errSq       =   Seq.firstNotEmpty [Seq.fromList @errUndef,Seq.fromList @errModName,@body.errSq]

SEM Body
    | Body
        lhs         .   errSq       =   Seq.firstNotEmpty [Seq.fromList @errDupIntro, Seq.fromList @errIdUse,Seq.fromList @errReorder, @declarations.errSq]
%%]

%%[1
SEM Expression
    | Literal
        loc         .   errSq       =   Seq.unions [Seq.fromList @errIdUse, @literal.errSq]
    | Variable Constructor
        loc         .   errSq       =   Seq.fromList @errIdUse
    | Let
        loc         .   errSq       =   Seq.unions [Seq.fromList @errDupIntro, Seq.fromList @errReorder, @declarations.errSq, @expression.errSq]
    | Lambda
%%[[12
      ImplicitLambda
%%]]
        loc         .   errSq       =   Seq.unions [Seq.fromList @errDupIntro, @patterns.errSq, @expression.errSq]
    | InfixApplicationChainTop 
        loc         .   errSq       =   Seq.unions [Seq.fromList @errRearr, @expression.errSq]
    | Negate 
        loc         .   errSq       =   Seq.unions [Seq.fromList @errIdUse, @expression.errSq]
%%[[5
    | List
        loc         .   errSq       =   Seq.unions [Seq.fromList @errIdUse, @expressions.errSq]
    | Enum
        loc         .   errSq       =   Seq.unions [Seq.fromList @errIdUse, @from.errSq, @then.errSq, @to.errSq]
    | If
        loc         .   errSq       =   Seq.unions [Seq.fromList @errIdUseVal, Seq.fromList @errIdUseType, @guardExpression.errSq, @thenExpression.errSq, @elseExpression.errSq]
%%]]
%%[[7
    | RecordConstruction
        loc         .   errSq       =   Seq.unions [Seq.fromList @errIdUse, @recordExpressionBindings.errSq]
%%]]

SEM RightHandSide
    | Expression
        loc         .   errSq       =   Seq.unions [Seq.fromList @errReorder, @expression.errSq, @where.errSq]
%%]

%%[1
SEM FunctionBinding
    | FunctionBinding
        loc         .   errSq       =   Seq.unions [Seq.fromList @errDupIntro, @lefthandside.errSq, @righthandside.errSq]
%%]

%%[1
SEM Pattern
    | Constructor
%%[[5
      List
%%]]
        loc         .   errSq       =   Seq.unions [Seq.fromList @errIdUse, @patterns.errSq]
%%[[5
    | InfixConstructor
        loc         .   errSq       =   Seq.unions [Seq.fromList @errIdUse, @leftPattern.errSq, @rightPattern.errSq]
    | Literal
        loc         .   errSq       =   Seq.unions [ Seq.fromList @errIdUse, Seq.fromList @errIdUseEq
%%[[97
                                                   , Seq.fromList @errIdUseCls
%%]]
                                                   , @literal.errSq
                                                   ]
%%]]
%%[[7
    | Record
        loc         .   errSq       =   Seq.unions [Seq.fromList @errIdUse, @recordPatternBindings.errSq]
%%]]
%%]

%%[1
SEM Type
    | Constructor
%%[[3
      Variable NamedWildcard
%%]]
        loc         .   errSq       =   Seq.fromList @errIdUse
%%[[4
    | Forall Exists
        loc         .   errSq       =   Seq.unions [Seq.fromList @errDupIntro, @type.errSq]
%%]]
%%[[9
    | InfixApplication
        loc         .   errSq       =   Seq.unions [Seq.fromList @ctxtFormErrs, @leftType.errSq, @operator.errSq, @rightType.errSq]
%%]]
%%]

%%[5
SEM Declaration
    | Data
        loc         .   locErrs     =   Seq.empty
    | Newtype
        loc         .   locErrs     =   Seq.fromList @errNewtype
    | Data Newtype
        loc         .   errSq       =   Seq.unions [ @locErrs
                                                   , @simpletype.errSq
                                                   , Seq.fromList @errDupIntro
%%[[8
                                                   , Seq.fromList @errIdUseVal
%%]]
                                                   , @constructors.errSq
%%[[9
                                                   , @context.errSq
%%]]
%%[[95
                                                   , @derivings.errSq
%%]]
                                                   ]
%%]

%%[5
SEM GuardedExpression
    | GuardedExpression
        loc         .   errSq       =   Seq.unions [Seq.fromList @errIdUseVal, Seq.fromList @errIdUseType, @guard.errSq, @expression.errSq]

SEM Alternative
    | Alternative
        loc         .   errSq       =   Seq.unions [Seq.fromList @errDupIntro, @pattern.errSq, @righthandside.errSq]
%%]

%%[5
SEM Qualifier
    | Let
        loc         .   errSq       =   Seq.firstNotEmpty [Seq.fromList @errDupIntro, @declarations.errSq, Seq.fromList @errReorder]
    | Guard
        loc         .   errSq       =   Seq.unions [Seq.fromList @errIdUseVal, Seq.fromList @errIdUseType, @guard.errSq]
    | Generator
        loc         .   errSq       =   Seq.unions [Seq.fromList @errDupIntro, Seq.fromList @errIdUse, @pattern.errSq, @expression.errSq]
    | Empty
        loc         .   errSq       =   Seq.fromList @errIdUse
%%]

%%[7
SEM RecordExpressionBinding
    | Binding
        loc         .   errSq       =   Seq.unions [Seq.fromList @errIdUse, @expression.errSq]
%%]

%%[7
SEM RecordPatternBinding
    | Binding
        loc         .   errSq       =   Seq.unions [Seq.fromList @errIdUse, @pattern.errSq]
    | Pun
        loc         .   errSq       =   Seq.fromList @errIdUse
%%]

%%[9
SEM Statement
    | Let
        loc         .   errSq       =   Seq.unions [Seq.fromList @errDupIntro, Seq.fromList @errReorder, @declarations.errSq]
    | Expression
        loc         .   errSq       =   Seq.unions [Seq.fromList @errIdUse, @expression.errSq]
    | Generator
        loc         .   errSq       =   Seq.unions [Seq.fromList @errDupIntro, Seq.fromList @errIdUse, @pattern.errSq, @expression.errSq]

SEM ContextItem
    | Class
        loc         .   errSq       =   Seq.unions [Seq.fromList @errIdUse, @types.errSq]

SEM Declaration
    | Class
        loc         .   errSq       =   Seq.unions [ Seq.fromList @errDupIntro, Seq.fromList @errReorder, @context.errSq, @simpletype.errSq
%%[[15
                                                   , @dependencies.errSq
%%]]
                                                   , @where.errSq
                                                   ]
    | Instance
        loc         .   errSq       =   Seq.firstNotEmpty [Seq.fromList @errIdUse, @context.errSq, @types.errSq, @where.errSq, Seq.fromList @errReorder]
    | InstanceUseImplicitly
        loc         .   errSq       =   Seq.unions [Seq.fromList @errIdUse, @expression.errSq, @types.errSq]
%%]

%%[11
SEM Declaration
    | Type
        loc         .   errSq       =   Seq.unions [ Seq.fromList @errDupIntro, @simpletype.errSq, @type.errSq ]
%%]

%%[94
SEM Declaration
    | ForeignImport
        loc         .   errSq       =   Seq.unions [ Seq.fromList (rngLift @range mkNestErr (pp ("Parse of foreign entity '" ++ @nmForParse ++ "'")) @entErrs)
                                                   , @type.errSq
                                                   ]
    | ForeignExport
        loc         .   errSq       =   Seq.unions [ Seq.fromList @errIdUse
                                                   , Seq.fromList (rngLift @range mkNestErr (pp ("Parse of foreign entity '" ++ @nmForParse ++ "'")) @entErrs)
                                                   , @type.errSq
                                                   ]
%%]

%%[95
SEM Deriving
    | Deriving
        loc         .   errSq       =   Seq.fromList @errIdUse
%%]

