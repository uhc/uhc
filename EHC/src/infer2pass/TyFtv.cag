% $Id: {%{TY}Ftv}.cag 260 2005-07-23 12:18:44Z atze $
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Haskell importable interface to Ty subst
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[1 hs import(Data.List,Common,Ty) export(tyFtv)
%%]

%%[1.WRAPPER import(TyAbsSyn)
WRAPPER TyAGItf
%%]

%%[1.tyFtv hs
tyFtv :: Ty -> TyVarIdL
tyFtv ty
  =  let  t =  wrap_TyAGItf
                 (sem_TyAGItf (TyAGItf_AGItf ty))
                 (Inh_TyAGItf)
     in   tvs_Syn_TyAGItf t
%%]

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Apply substitution
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%[1.TyFtv
ATTR TyAGItf AllTy  [ | | tvs USE {`union`} {[]}: TyVarIdL ]

SEM Ty
  | Var             lhs     .   tvs         =   [@tv]
  | All             lhs     .   tvs         =   @tv `delete` @ty.tvs
%%]
