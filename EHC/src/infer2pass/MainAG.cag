-------------------------------------------------------------------------
-- Main AG
-------------------------------------------------------------------------

%%[1 hs import (IO,Data.List,UU.Pretty,Infer2PassSupport)
%%]

%%[3 hs import (TyElimAlts,TyElimBoth)
%%]

%%[1
INCLUDE "RulerInfer2Pass.ag"

WRAPPER AGItf
%%]

-------------------------------------------------------------------------
-- AST
-------------------------------------------------------------------------

%%[1
{-
DATA AGItf
  | AGItf  e  : Expr
-}
%%]

%%[1.AllAS
SET AllAS = Expr
%%]

%%[2.AllAS -1.AllAS
SET AllAS = Expr TyExpr
%%]

-------------------------------------------------------------------------
-- Initialisation
-------------------------------------------------------------------------

%%[1
{-
SEM AGItf
  | AGItf  e  .   g  =   []
              .   c  =   []
-}
%%]

%%[2
{-
SEM AGItf
  | AGItf  e  .   kty=   Ty_Var @lUniq
              .   kc =   []
-}
%%]

-------------------------------------------------------------------------
-- Pretty printing
-------------------------------------------------------------------------

%%[1
ATTR AGItf AllAS [ | | pp: PP_Doc ]

SEM Expr
  | App  lhs  .   pp   =   @f.pp >#< pp_parens @a.pp
                           >-< mkErr @mtErrs
  | Int  lhs  .   pp   =   pp @int
  | Var  lhs  .   pp   =   pp @i >-< mkErr @nmErrs
  | Lam  lhs  .   pp   =   "\\" >|< pp @i >#< "->" >#< @b.pp
  | Let  lhs  .   pp   =   "let"     >#< pp @i
                           >#< (   "::"  >#< show @pty_e_
                               >-< "="   >#< @e.pp
                               >-< mkErr @mtErrs
                               )
                           >-< "in " >#< @b.pp
%%]

%%[2
SEM Expr
  | Let  loc  .   ppTy =   show @pty_e_
  | TLet loc  .   ppTy =   @te.pp
  | Let TLet
         lhs  .   pp   :=  "let"     >#< pp @i
                           >#< (   "::"  >#< @ppTy
                               >-< "="   >#< @e.pp
                               )
                           >-< "in " >#< @b.pp
  | Char lhs  .   pp   =   pp (show @char) >-< mkErr @mtErrs_
  | Int  lhs  .   pp   :=  pp @int >-< mkErr @mtErrs_
  | Var  lhs  .   pp   :=  pp @i >-< mkErr @nmErrs >-< mkErr @mtErrs_
  | Lam  lhs  .   pp   :=  "\\" >|< pp @i >#< "->" >#< @b.pp >-< mkErr @mtErrs_fitKn_
  | App  lhs  .   pp   :=  @f.pp >#< pp_parens @a.pp

SEM TyExpr
  | Int  lhs  .   pp   =   pp "Int"
  | Char lhs  .   pp   =   pp "Char"
  | Var  lhs  .   pp   =   pp @i
  | All  lhs  .   pp   =   "forall" >#< @i >#< "." >#< @te.pp
  | Arr  lhs  .   pp   =   pp_parens @a.pp >#< "->" >#< @r.pp
%%]

%%[3
SEM Expr
  | App  lhs  .   pp   :=  (@f.pp >-< mkErr @mtErrs_ifitF_)
                           >#< pp_parens (@a.pp >-< mkErr @mtErrs_ifitA_)
  | Lam  lhs  .   pp   :=  "\\" >|< pp @i >#< "->" >#< @b.pp
                           >-< mkErr @mtErrs_fitKn_ >-< mkErr @mtErrs_F_
%%]
                               >-< ":lhs.kty  :"  >#< show @lhs.kty
                               >-< ":tvarv_   :"  >#< show @tvarv_
                               >-< ":tvarv_r_ :"  >#< show @tvarv_r_
                               >-< ":kc_F_    :"  >#< ppCnstr @kc_F_
                               >-< ":kc_A_    :"  >#< ppCnstr @kc_A_
                               >-< ":c_f_     :"  >#< ppCnstr @c_f_
                               >-< ":b.ity    :"  >#< show @b.ity
                               >-< ":b.kc     :"  >#< ppCnstr @b.kc
                               >-< ":lhs.c    :"  >#< ppCnstr @lhs.c
                               >-< ":b.c      :"  >#< ppCnstr @b.c
  | Let  lhs  .   pp   :=  "let"     >#< pp @i
                           >#< (   "::"  >#< show @pty_e_
                               >-< ":tvarv_ :"  >#< show @tvarv_
                               >-< ":e.ity  :"  >#< show @e.ity
                               >-< ":e.kc   :"  >#< ppCnstr @e.kc
                               >-< ":kc_E_  :"  >#< ppCnstr @kc_E_
                               >-< ":lhs.c  :"  >#< ppCnstr @lhs.c
                               >-< ":e.c    :"  >#< ppCnstr @e.c
                               >-< "="   >#< @e.pp
                               )
                           >-< "in " >#< @b.pp

-------------------------------------------------------------------------
-- Uniq
-------------------------------------------------------------------------

%%[1
ATTR AGItf AllAS [ | uniq: UID | ]

{-
SEM AGItf
  | AGItf  e  .   uniq  =   uidStart
-}
%%]

%%[2
{-
SEM AGItf
  | AGItf  (e.uniq,loc.lUniq)
                        :=  rulerMk1Uniq uidStart
-}
%%]

