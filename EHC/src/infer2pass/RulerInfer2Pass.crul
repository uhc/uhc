%%[1
preamble tex "%include lhs2TeX.fmt\n%include afp.fmt\n"
%%]

-------------------------------------------------------------------------------------------
-- View hierarchy
-------------------------------------------------------------------------------------------

%%[1
viewhierarchy = HM < I1 < I2
%%]

-------------------------------------------------------------------------------------------
-- Data type
-------------------------------------------------------------------------------------------

%%[1
data AGItf [prog]
  view HM
    = AGItf [p.prog] e   :: Expr

data Expr [expr, expr.kn, expr.hm]
  view HM =
      App  [e.app]  eFun :: Expr
                    eArg :: Expr
    | Int  [e.int]  int  :: Int
    | Var  [e.var]  i    :: String
    | Lam  [e.lam]  i    :: String
                    b    :: Expr
    | Let  [e.let]  i    :: String
                    e    :: Expr
                    b    :: Expr
  view I1 =
      Char [e.char : e.int]
                    char :: Char
    | TLet [e.tlet : e.let]
                    i    :: String
                    te   :: TyExpr
                    e    :: Expr
                    b    :: Expr

data TyExpr [tyexpr]
  view I1 =
      Arr  [te.arr] a    :: TyExpr
                    r    :: TyExpr
    | Var  [te.var] i    :: String
    | Int  [te.int]
    | Char [te.char]
    | All  [te.all] i    :: String
                    te   :: TyExpr
%%]

-------------------------------------------------------------------------------------------
-- Externally defined
-------------------------------------------------------------------------------------------

%%[1
external Ty_Int Ty_Var Ty_All Ty_Char
external emptyGam emptyCnstr
external strongFIOpts joinFIOpts meetFIOpts
external
  fioBindToTyAltsY fioBindToTyAltsN
  fioLeaveRInstY fioLeaveRInstN
  fioBindLFirstY fioBindLFirstN
  fioBindRFirstY fioBindRFirstN
  fioBindLBeforeRY fioBindLBeforeRN
  fioJoinY fioMeetY fioFitY
  fioDontBind
%%]

-------------------------------------------------------------------------------------------
-- Formatting
-------------------------------------------------------------------------------------------

%%[1
format eFun = f
format eArg = a

format tex Ty_Int = Int
format tex Ty_Char = Char
format tex Ty_Var = 

format tex Gam = Gamma
format tex valGam = Gamma
format tex tyGam = TGamma
format emptyGam = []

format tex ty = tau
format tex ty.l = tau.l
format tex ty.r = tau.r
format tex ty.f = tau.f
format tex ity = isigma
format tex pty = sigma
format tex pty.f = sigma.f
format tex pty.l = sigma.l
format tex pty.r = sigma.r
format tex mty = tau

format tex knTy = sigma..k
format ag knTy = kty

format tex tvarv = v

format tex emptyCnstr = []
format tex cnstr.inh = Cnstr..k
format tex cnstr.syn = Cnstr
format tex cnstr     = Cnstr

format tex knCnstr.inh = ICnstr..k
format tex knCnstr.syn = ICnstr
format tex knCnstr     = ICnstr

format ag cnstr     = c
format ag knCnstr   = kc
format ag valGam       = g

format fmtcmd rulerMk1Uniq = mkNewLevUID
format fmtcmd rulerMk2Uniq = mkNewLevUID2
format fmtcmd rulerMk3Uniq = mkNewLevUID3
format fmtcmd rulerMk4Uniq = mkNewLevUID4
format fmtcmd rulerMk5Uniq = mkNewLevUID5
format fmtcmd rulerMk6Uniq = mkNewLevUID6

format ag  fioBindRFirstY = fioBindRFirst `=` True
format ag  fioBindRFirstN = fioBindRFirst `=` False
format ag  fioBindLFirstY = fioBindLFirst `=` True
format ag  fioBindLFirstN = fioBindLFirst `=` False
format ag  fioBindToTyAltsY = fioBindToTyAlts `=` True
format ag  fioBindToTyAltsN = fioBindToTyAlts `=` False
format ag  fioBindLBeforeRY = fioBindLBeforeR `=` True
format ag  fioBindLBeforeRN = fioBindLBeforeR `=` False

format ag def f, (o|FIOpts) = ((o {f})|FIOpts)
format ag def f1, f2, (o|FIOpts) = ((o {f1, f2})|FIOpts)
%%]

-------------------------------------------------------------------------------------------
-- Rewriting
-------------------------------------------------------------------------------------------

-- rewrite tex def Ty_All tv t = forall tv `.` t
-- rewrite ag def Ty_All tv t = (Ty_All (tyTvId (tv)) t)
%%[1
rewrite ag def forall tv `.` (t|Ty) = (mkTyAll [tyTvId (tv)] t)

rewrite ag def  (a | Ty) -> (r | Ty) = ((a) `Ty_Arr` (r) | Ty)

rewrite ag def  (c1 | Cnstr) (c2 | Cnstr) (c3 | Cnstr) (v | a) = (c1 |=> c2 |=> c3 |=> (v) | a)
rewrite ag def  (c1 | Cnstr) (c2 | Cnstr) (v | a) = (c1 |=> c2 |=> (v) | a)
rewrite ag def  (c | Cnstr) (v | a) = (c |=> (v) | a)
rewrite ag def  i :-> t = ([(i,t)] | Gam)
rewrite ag def  tv ::-> t = ([(tyTvId (tv),t)] | Cnstr)
rewrite tex     tv ::-> t = tv :-> t
rewrite ag def  (g1 | Gam), (g2 | Gam) = ((g1) ++ (g2) | Gam)
%%]

-------------------------------------------------------------------------------------------
-- Expr scheme
-------------------------------------------------------------------------------------------

%%[1
scheme expr =
  view HM =
    holes scheme expr.hm
    judgeuse tex cnstr.inh ; valGam :-.."e" e : ty ~> cnstr.syn
  view I1 =
    holes scheme expr.kn
    judgeuse tex knCnstr.inh ; cnstr.inh ; valGam ; knTy :-.."e" e : ty ~> knCnstr.syn ; cnstr.syn
  view I2 =
    judgeuse tex knCnstr.inh ; cnstr.inh ; valGam ; knTy :-.."e" e : ity ; ty ~> knCnstr.syn ; cnstr.syn
%%]

-------------------------------------------------------------------------------------------
-- Expr rules
-------------------------------------------------------------------------------------------

%%[1
rulesgroup expr.forPaper scheme expr "Expression type rules" =
  rule expr.base e.int
  rule expr.base e.var
  rule expr.base e.app
  rule expr.base e.lam
  rule expr.base e.let
  rule expr.base e.tlet

ruleset expr.base scheme expr  "Expression type rules" =
  rule e.int =
    view HM =
      ruleset expr.hm rule e.int
    view I1 =
      ruleset expr.kn rule e.int

  rule e.char =
    view I1 =
      ruleset expr.hm rule e.char
      | ruleset expr.kn rule e.char

  rule e.var =
    view HM =
      ruleset expr.hm rule e.var
    view I1 =
      ruleset expr.kn rule e.var

  rule e.app =
    view HM =
      ruleset expr.hm rule e.app
    view I1 =
      ruleset expr.kn rule e.app

  rule e.lam =
    view HM =
      ruleset expr.hm rule e.lam
    view I1 =
      ruleset expr.kn rule e.lam
    view I2 =
      judge F : fit = (fioBindLBeforeRN, strongFIOpts) ; (knCnstr.A (knCnstr.F cnstr..k) knCnstr.F) :- (tvarv -> tvarv.r) <= pty.F : _ ~> cnstr.f ~> mtErrs.F
      judge B : expr
          | cnstr.inh = cnstr.f knCnstr.A (knCnstr.F cnstr..k) knCnstr.F
      ---

  rule e.let =
    view HM =
      ruleset expr.hm rule e.let
    view I1 =
      ruleset expr.kn rule e.let |
      ( judge D : expr
            | cnstr.inh = knCnstr.e cnstr..k
        ---
      )
    view I2 =
      judge D : expr
          | cnstr.inh = knCnstr.E cnstr..k
      ---

  rule e.tlet =
    view I1 =
      ruleset expr.hm rule e.tlet
      | ruleset expr.kn rule e.tlet
    view I2 =
      judge D : expr
          | cnstr.inh = (tvarv ::-> pty) knCnstr.E cnstr..k
      ---
%%]

-------------------------------------------------------------------------------------------
-- Expr scheme: HM
-------------------------------------------------------------------------------------------

%%[1
scheme expr.hm =
  view HM =
    holes [ node e: Expr, valGam: Gam | thread cnstr: Cnstr | ty: Ty ]
    judgespec cnstr.inh ; valGam :-.."e" e : ty ~> cnstr.syn
  view I1 =
    holes [ extern inh knTy: Ty ]
    judgeuse tex cnstr.inh ; valGam ; knTy :-.."e" e : ty ~> cnstr.syn

ruleset expr.hm scheme expr.hm  "Expression type rules for Hindley-Milner" =
  rule e.int =
    view HM =
      ---
      judge R : expr.hm = cnstr..k ; valGam :- int : Ty_Int ~> cnstr..k
    view I2 =
      judge F : fit = strongFIOpts ; cnstr..k :- Ty_Int <= knTy : _ ~> cnstr ~> mtErrs
      ---
      judge R : expr.hm
          | cnstr.syn = cnstr cnstr..k

  rule e.char =
    view I1 =
      ---
      judge R : expr.hm 
          | e = char
          | ty = Ty_Char
    view I2 =
      judge F : fit 
          | ty.l = Ty_Char
          | fiopt = strongFIOpts
      ---

  rule e.var =
    view HM =
      judge G : gamLookupIdTy = i :-> pty `elem` valGam
      judge I : tyInst = ty `=` inst(pty)
      ---
      judge R : expr.hm = cnstr..k ; valGam :- i : ty ~> cnstr..k
    view I1 =
      judge - I
      ---
      judge R : expr.hm
          | ty = knTy
    view I2 =
      judge F : fit = strongFIOpts ; cnstr..k :- pty <= knTy : _ ~> cnstr ~> mtErrs
      ---
      judge R : expr.hm
          | cnstr.syn = cnstr cnstr..k

  rule e.app =
    view HM =
      judge V : tvFresh  =  (cnstr..k valGam) :- tvarv
      judge M : match    =  :- (cnstr.a (ty.a -> tvarv)) <=> (cnstr.a ty.f) ~> cnstr
      judge A : expr.hm = cnstr.f ; valGam :- eArg : ty.a ~> cnstr.a
      judge F : expr.hm = cnstr..k ; valGam :- eFun : ty.f ~> cnstr.f
      ---
      judge R : expr.hm = cnstr..k ; valGam :- (eFun eArg) : (cnstr cnstr.a tvarv) ~> (cnstr cnstr.a)
    view I1 =
      judge - M
      ---
      judge R : expr.hm
          | ty = knTy
          | cnstr.syn = cnstr.a

  rule e.lam =
    view HM =
      judge V : tvFresh = (cnstr..k valGam) :- tvarv
      judge B : expr.hm = cnstr..k ; ((i :-> tvarv) , valGam) :- b : ty.b ~> cnstr.b
      ---
      judge R : expr.hm = cnstr..k ; valGam :- (\i -> b) : (cnstr.b tvarv -> ty.b) ~> cnstr.b
    view I1 =
      ---
      judge R : expr.hm
          | ty = knTy
{-
    view I2 =
      judge F : fit = (fioBindLBeforeRN, strongFIOpts) ; (knCnstr.A cnstr..k knCnstr.F) :- (tvarv -> tvarv.r) <= pty.F : _ ~> cnstr.f ~> mtErrs.F
      judge B : expr.hm
          | cnstr.inh = cnstr.f knCnstr.A cnstr..k knCnstr.F
      ---
-}

  rule e.let =
    view HM =
      judge V : tvFresh = (cnstr..k valGam) :- tvarv
      judge D : expr.hm = cnstr..k ; ((i :-> tvarv) , valGam) :- e : ty.e ~> cnstr.e
      judge B : expr.hm = (cnstr cnstr.e) ; ((i :-> pty.e), valGam) :- b : ty.b ~> cnstr.b
      judge M : match    =  :- (cnstr.e tvarv) <=> ty.e ~> cnstr
      judge G : tyGen = pty.e `=` ty.e \\ (cnstr cnstr.e valGam)
      ---
      judge R : expr.hm = cnstr..k ; valGam :- (let i `=` e in b) : ty.b ~> cnstr.b
    view I1 =
      judge G : tyGen
          | ty = cnstr.e tvarv
          | valGam = cnstr.e valGam
      -- judge D : expr.hm
      --     | cnstr.inh = knCnstr.e cnstr..k
      judge B : expr.hm
          | cnstr.inh = (tvarv ::-> pty.e) cnstr.e
          | valGam = (i :-> tvarv), valGam
      judge - M
      ---
      judge R : expr.hm
          | ty = knTy
    view I2 =
      -- judge D : expr.hm
      --     | cnstr.inh = knCnstr.E cnstr..k
      ---

  rule e.tlet =
    view I1 =
      judge T : tyexpr = emptyGam :- te : pty
      judge B : expr.hm
          | cnstr.inh = cnstr.e
      judge - G
      ---
      judge R : expr.hm
          | e = let i :: te `=` e in b
    view I2 =
      -- judge D : expr.hm
      --     | cnstr.inh = (tvarv ::-> pty) knCnstr.E cnstr..k
      ---
%%]

-------------------------------------------------------------------------------------------
-- Expr scheme: known
-------------------------------------------------------------------------------------------

%%[1
scheme expr.kn =
  view I1 =
    holes [ node e: Expr, extern valGam: Gam, knTy: Ty | thread knCnstr: Cnstr | ]
    judgespec knCnstr.inh ; knTy :-.."e" e ~> knCnstr.syn
  view I2 =
    holes [ syn ity: Ty ]
    judgespec knCnstr.inh ; knTy :-.."e" e : ity ~> knCnstr.syn
%%]

-------------------------------------------------------------------------------------------
-- Expr rules: known
-------------------------------------------------------------------------------------------

%%[1
rulesgroup expr.kn.forPaper scheme expr "Expression quantifier propagation rules" =
  rule expr.kn e.int
  rule expr.kn e.var
  rule expr.kn e.app
  rule expr.kn e.lam
  rule expr.kn e.let

ruleset expr.kn scheme expr.kn viewsel I1 - * "Expression quantifier propagation rules" =
  rule e.int =
    view I1 =
      judge fitKn : fit = knCnstr..k :- Ty_Int <= knTy ~> cnstr ~> mtErrs
      ---
      judge R : expr.kn = knCnstr..k ; knTy :- int ~> (cnstr knCnstr..k)
    view I2 =
      judge - fitKn
      ---
      judge R : expr.kn
          | knCnstr.syn = knCnstr..k
          | ity = Ty_Int

  rule e.char =
    view I1 =
      judge fitKn : fit
          | ty.l = Ty_Char
      ---
      judge R : expr.kn
          | e = char
    view I2 =
      ---
      judge R : expr.kn
          | ity = Ty_Char

  rule e.var =
    view I1 =
      extern pty
      judge fitKn : fit = knCnstr..k :- pty <= knTy ~> cnstr ~> mtErrs
      ---
      judge R : expr.kn = knCnstr..k ; knTy :- i ~> (cnstr knCnstr..k)
    view I2 =
      extern pty
      judge - fitKn
      ---
      judge R : expr.kn
          | knCnstr.syn = knCnstr..k
          | ity = pty

  rule e.app =
    view I1 =
      judge V : tvFresh2  =  (knCnstr..k valGam) :- tvarv, tvarv.a
      judge A : expr.kn = knCnstr.f ; tvarv.a :- eArg ~> knCnstr.a
      judge F : expr.kn = knCnstr..k ; (tvarv.a -> knTy) :- eFun ~> knCnstr.f
      ---
      judge R : expr.kn = knCnstr..k ; knTy :- (eFun eArg) ~> knCnstr.a
    view I2 =
      judge A : expr.kn
          | ity = ity.a
          | knCnstr.inh = knCnstr.F knCnstr.f
      judge F : expr.kn
          | ity = ity.f
      judge ifitF : fit = (fioBindToTyAltsY,(strongFIOpts|FIOpts)) ; knCnstr.f :- ity.f <= (tvarv.a -> knTy) : _ ~> knCnstr.F ~> mtErrs.ifitF
      judge ifitA : fit = (fioBindToTyAltsY,(strongFIOpts|FIOpts)) ; knCnstr.a :- ity.a <= tvarv.a : _ ~> knCnstr.A ~> mtErrs.ifitA
      ---
      judge R : expr.kn
          | ity = knTy
          | knCnstr.syn = knCnstr.A knCnstr.a

  rule e.lam =
    view I1 =
      judge V : tvFresh2 = (knCnstr..k valGam) :- tvarv, tvarv.r
      judge fitKn : fit = knCnstr..k :- (tvarv -> tvarv.r) <= knTy ~> cnstr ~> mtErrs.fitKn
      judge B : expr.kn = (cnstr knCnstr..k) ; tvarv.r :- b ~> knCnstr.b
      ---
      judge R : expr.kn = knCnstr..k ; knTy :- (\i -> b) ~> knCnstr.b
    view I2 =
      extern valGam
      judge fitKn : fit
          | fiopt = strongFIOpts
          | ty.r = pty.e.k
          | ty.f = pty.F
          | cnstr = knCnstr.F
      judge B : expr.kn
          | ity = ity.b
          | knCnstr.inh = knCnstr.F knCnstr..k
      judge ftvG : valGamFtv = tvarv.g.._ === valGam
      judge elimK : tyAltTyElim = meetFIOpts ; knCnstr..k ; tvarv.g.._ :- knTy : pty.e.k ~> _ ~> fo.elimK
      judge elimA : tyAltTyElim = meetFIOpts ; knCnstr.b ; tvarv.g.._ :- tvarv : _ ~> knCnstr.A ~> fo.elimA
      ---
      judge R : expr.kn
          | ity = tvarv -> ity.b
          | knCnstr.syn = knCnstr.A knCnstr.b

  rule e.let =
    view I1 =
      extern tvarv
      judge D : expr.kn = knCnstr..k ; tvarv :- e ~> knCnstr.e
      judge B : expr.kn = knCnstr.e ; knTy :- b ~> knCnstr.b
      ---
      judge R : expr.kn = knCnstr..k ; knTy :- (let i `=` e in b) ~> knCnstr.b
    view I2 =
      extern tvarv valGam
      judge D : expr.kn
          | ity = ity.e
      judge B : expr.kn
          | ity = ity.b
          | knCnstr.inh = knCnstr.E knCnstr.e
      judge ftvG : valGamFtv = tvarv.g.._ === valGam
      judge elimD : tyAltTyElim = joinFIOpts ; knCnstr.e ; tvarv.g.._ :- ity.e : _ ~> knCnstr.E ~> fo.elimD
      ---
      judge R : expr.kn
          | ity = ity.b

  rule e.tlet =
    view I1 =
      extern te pty tvarv
      judge D : expr.kn
          | knTy = pty
          | knCnstr.inh = (tvarv ::-> pty) knCnstr..k
      ---
      judge R : expr.kn
          | e = let i :: te `=` e in b
    view I2 =
      extern te pty tvarv valGam
      ---
%%]

-------------------------------------------------------------------------------------------
-- TyExpr scheme
-------------------------------------------------------------------------------------------

%%[1
scheme tyexpr =
  view I1 =
    holes [ node te: TyExpr, tyGam: Gam | | ty: Ty ]
    judgespec tyGam :-.."te" te : ty
%%]

-------------------------------------------------------------------------------------------
-- TyExpr rules
-------------------------------------------------------------------------------------------

%%[1
ruleset tyexpr.base scheme tyexpr viewsel I1 - * "Typr expression type rules" =
  rule te.int =
    view I1 =
      ---
      judge R : tyexpr = tyGam :- int : Ty_Int

  rule te.char =
    view I1 =
      ---
      judge R : tyexpr = tyGam :- char : Ty_Char

  rule te.var =
    view I1 =
      judge G : gamLookupIdTy = i :-> ty `elem` tyGam
      ---
      judge R : tyexpr = tyGam :- i : ty

  rule te.all =
    view I1 =
      judge V : tvFreshTyGam = tyGam :- tvarv
      judge T : tyexpr = ((i :-> tvarv) , tyGam) :- te : pty
      ---
      judge R : tyexpr = tyGam :- (forall i `.` te) : (forall tvarv `.` pty)

  rule te.arr =
    view I1 =
      judge Arg : tyexpr = tyGam :- a : pty.a
      judge Res : tyexpr = tyGam :- r : pty.r
      ---
      judge R : tyexpr = tyGam :- (a -> r) : (pty.a -> pty.r)
%%]

-------------------------------------------------------------------------------------------
-- Program
-------------------------------------------------------------------------------------------

%%[1
scheme prog =
  view HM =
    holes [ node prog: AGItf | |  ]
    judgespec :-.."prog" prog

ruleset prog scheme prog "Program" =
  rule p.prog =
    view HM =
      judge E : expr = emptyCnstr ; emptyGam :- e : _ ~> _
      ---
      judge R : prog = :- e
    view I1 =
      judge V : tvFresh = emptyGam :- tvarv
      judge E : expr
          | knCnstr.inh = emptyCnstr
          | knCnstr.syn = _
          | knTy = tvarv
      ---
%%]

-------------------------------------------------------------------------------------------
-- Match two types
-------------------------------------------------------------------------------------------

%%[1
relation match =
  view HM =
    holes [ ty.l: Ty, ty.r: Ty | | cnstr: Cnstr ]
    judgespec :- ty.l <=> ty.r ~> cnstr
    judgeuse tex :-..(<=>) ty.l <=> ty.r ~> cnstr
    judgeuse ag (cnstr,mtErrs) `=` (ty.l) <=> (ty.r)
  view I2 =
    holes [ fiopt: FIOpts, knCnstr: Cnstr | | mtErrs: ErrL, ty.f: Ty ]
    judgeuse tex fiopt ; knCnstr :-..(<=>) ty.l <=> ty.r : ty.f ~> cnstr

rulesgroup match.baseForImpredPaper scheme match "Type matching |<=>|" =
  rule match.all m.var
  rule match.all m.var.l1
  rule match.all m.var.r1
  rule match.all m.arrow

ruleset match.all scheme match viewsel HM "Type matching rules" =
  rule m.var =
    view HM =
      judge E : eqTy = tvar.1 === tvar.2
      ---
      judge R : match = :- tvar.1 <=> tvar.2 ~> ([])

  rule m.var.l1 =
    view HM =
      judge O : tvNotIn = (ftv(ty)) :- tvarv
      judge C : bind1TyVarToTy = cnstr === [tvarv :-> ty]
      ---
      judge R : match = :- tvarv <=> ty ~> cnstr

  rule m.var.r1 =
    view HM =
      judge O : tvNotIn = (ftv(ty)) :- tvarv
      judge C : bind1TyVarToTy = cnstr === [tvarv :-> ty]
      ---
      judge R : match = :- ty <=> tvarv ~> cnstr

  rule m.arrow =
    view HM =
      judge Arg : match = :- ty.2.a <=> ty.1.a ~> cnstr.a
      judge Res : match = :- (cnstr.a ty.1.r) <=> (cnstr.a ty.2.r) ~> cnstr.r
      ---
      judge R : match = :- (ty.1.a -> ty.1.r) <=>.(<=>) (ty.2.a -> ty.2.r) ~> (cnstr.r cnstr.a)
%%]

-------------------------------------------------------------------------
-- Fit
-------------------------------------------------------------------------

%%[1
relation fit =
  view I1 =
    holes [ ty.l: Ty, ty.r: Ty, knCnstr: Cnstr | | cnstr: Cnstr, mtErrs: ErrL ]
    judgespec knCnstr :- ty.l <= ty.r ~> cnstr ~> mtErrs
    judgeuse tex knCnstr :- ty.l <= ty.r ~> cnstr
    judgeuse ag (cnstr,mtErrs) `=` fitsIn (emptyFI {fiUniq `=` unique , fiCnstr `=` knCnstr}) (ty.l) (ty.r)
  view I2 =
    holes [ fiopt: FIOpts | | ty.f: Ty ]
    judgespec fiopt ; knCnstr :- ty.l <= ty.r : ty.f ~> cnstr ~> mtErrs
    judgeuse tex fiopt ; knCnstr :-..(<=) ty.l <= ty.r : ty.f ~> cnstr
    judgeuse ag (ty.f,cnstr,mtErrs) `=` fitsIn (emptyFI {fiUniq `=` unique , fiCnstr `=` knCnstr, fiFIOpts `=` fiopt}) (ty.l) (ty.r)

ruleset fit scheme fit viewsel I2 - * "Fitting of types" =
  rule fit =
    view I2 =
      judge M : match
          | ty.r = knCnstr pty.r
          | ty.l = knCnstr pty.l
          | ty.f = pty.f
          | fiopt = fioFitY, fiopt
      ---
      judge R : fit
          | ty.r = pty.r
          | ty.l = pty.l
          | ty.f = pty.f
%%]

-------------------------------------------------------------------------
-- Join
-------------------------------------------------------------------------

%%[1
relation join =
  view I2 =
    holes [ ty.l: Ty, ty.r: Ty, knCnstr: Cnstr, fiopt: FIOpts | | ty.f: Ty, cnstr: Cnstr, mtErrs: ErrL ]
    judgespec fiopt ; knCnstr :- ty.l <-> ty.r : ty.f ~> cnstr ~> mtErrs
    judgeuse tex fiopt ; knCnstr :-..(<->) ty.l <-> ty.r : ty.f ~> cnstr

ruleset join scheme join viewsel I2 - * "Join of types" =
  rule join =
    view I2 =
      judge M : match
          | ty.r = knCnstr pty.r
          | ty.l = knCnstr pty.l
          | ty.f = pty.f
          | fiopt = fioJoinY, fiopt
      ---
      judge R : join
          | ty.r = pty.r
          | ty.l = pty.l
          | ty.f = pty.f
%%]

-------------------------------------------------------------------------
-- Meet
-------------------------------------------------------------------------

%%[1
relation meet =
  view I2 =
    holes [ ty.l: Ty, ty.r: Ty, knCnstr: Cnstr, fiopt: FIOpts | | ty.f: Ty, cnstr: Cnstr, mtErrs: ErrL ]
    judgespec fiopt ; knCnstr :- ty.l <+> ty.r : ty.f ~> cnstr ~> mtErrs
    judgeuse tex fiopt ; knCnstr :-..(<+>) ty.l <+> ty.r : ty.f ~> cnstr

ruleset meet scheme meet viewsel I2 - * "Meet of types" =
  rule meet =
    view I2 =
      judge M : match
          | ty.r = knCnstr pty.r
          | ty.l = knCnstr pty.l
          | ty.f = pty.f
          | fiopt = fioMeetY, fiopt
      ---
      judge R : meet
          | ty.r = pty.r
          | ty.l = pty.l
          | ty.f = pty.f
%%]

-------------------------------------------------------------------------------------------
-- Lookup ty in gam
-------------------------------------------------------------------------------------------

%%[1
relation gamLookupIdTy =
  view HM =
    holes [ nm: Nm, gam: Gam | | ty: Ty ]
    judgespec nm :-> ty `elem` gam
    judgeuse ag (ty,nmErrs) `=` gamLookup nm gam
%%]

-------------------------------------------------------------------------------------------
-- Occur check
-------------------------------------------------------------------------------------------

%%[1
relation tvNotIn =
  view HM =
    holes [ inh tvarv: Ty, syn tvars: TyVarIdS ]
    judgespec tvars :- tvarv
    judgeuse tex tvarv `notElem` tvars
%%]

-------------------------------------------------------------------------------------------
-- Fresh type variables
-------------------------------------------------------------------------------------------

%%[1
relation tvFresh =
  view HM =
    holes [ notFreeInGam: ValGam | | tvarv: Ty ]
    judgespec notFreeInGam :- tvarv
    -- judgeuse tex tvarv `notElem` ftv(notFreeInGam)
    judgeuse tex tvarv (text "fresh")
    judgeuse ag tvarv `=` Ty_Var unique

relation tvFreshTyGam =
  view HM =
    holes [ notFreeInGam: Gam | | tvarv: Ty ]
    judgespec notFreeInGam :- tvarv
    -- judgeuse tex tvarv `notElem` ftv(notFreeInGam)
    judgeuse tex tvarv (text "fresh")
    judgeuse ag tvarv `=` Ty_Var unique

relation tvFresh2 =
  view I1 =
    holes [ notFreeInGam: ValGam | | tvarv.1: Ty, tvarv.2: Ty ]
    judgespec notFreeInGam :- tvarv.1, tvarv.2
    -- judgeuse tex tvarv.1, tvarv.2 `notElem` ftv(notFreeInGam)
    judgeuse tex tvarv.1, tvarv.2 (text "fresh")
    judgeuse ag tvarv.1 `=` Ty_Var unique
              | tvarv.2 `=` Ty_Var unique
%%]

-------------------------------------------------------------------------------------------
-- Type instantiation
-------------------------------------------------------------------------------------------

%%[1
relation tyInst =
  view HM =
    holes [ ty: Ty | | ty.i: Ty ]
    judgespec ty.i `=` inst(ty)
    judgeuse ag ty.i `=` tyInst unique (ty)
%%]

-------------------------------------------------------------------------------------------
-- Type generalisation
-------------------------------------------------------------------------------------------

%%[1
relation tyGen =
  view HM =
    holes [ ty: Ty, valGam: Gam | | pty: Ty ]
    judgespec pty `=` ty \\ valGam
    judgeuse tex pty `=` forall (ftv(ty) \\ ftv(valGam)) `.` ty
    judgeuse ag  (retain pty) `=` mkTyAll (ftv(ty) \\ ftv(valGam)) (ty)
%%]

-------------------------------------------------------------------------
-- Ty alternative elimination
-------------------------------------------------------------------------

%%[1
relation tyAltTyElim =
  view I2 =
    holes [ fiopt: FIOpts, ity: Ty, ityCnstr.in: Cnstr, tvarv.g.._: TyVarIdS | | ty: Ty, ityCnstr: Cnstr, fo: FIOut ]
    judgespec fiopt; ityCnstr.in; tvarv.g.._ :- ity : ty ~> ityCnstr ~> fo
    judgeuse tex fiopt; ityCnstr.in; tvarv.g.._ :-..."talt elim" ity : ty ~> ityCnstr
    judgeuse ag (retain fo)         `=` tyElimAlts mkFitsInWrap' (fiopt) (tvarv.g.._) unique (ityCnstr.in (ity))
              | (retain ityCnstr  ) `=` ( "let" c `=` cnstrFilterTyAltsMappedBy (ityCnstr.in) (foCnstr fo)
                                        - "in"  cnstrDelAlphaRename $ tyElimAltsCleanup (ityCnstr.in) ((foCnstr fo) |=> c)
                                        )
              | (retain ty        ) `=` foTy fo
%%]

{-
valGamElimAlts :: FIOpts -> FIEnv -> TyVarIdL -> UID -> Cnstr -> ValGam -> (ValGam,Cnstr,ErrGam)
valGamElimAlts opts env globTvL uniq gCnstr g
  =  let  (g',(c,eg,_))
            =  gamMapThr
                  (\(n,vgi) (c,eg,u)
                  	->  let  (u',u1) = mkNewLevUID u
                  	         fo = tyElimAlts (mkFitsInWrap' env) opts globTvL u1 (c |=> vgiTy vgi)
                  	         cg = cnstrFilterTyAltsMappedBy gCnstr (foCnstr fo)
                  	    in   ((n,vgi {vgiTy = foTy fo}),(foCnstr fo |=> c |=> cg,gamAdd n (foErrL fo) eg,u'))
                  )
                  (emptyCnstr,emptyGam,uniq) (gCnstr |=> g)
     in   (g',tyElimAltsCleanup gCnstr c,eg)
-}

-------------------------------------------------------------------------
-- Gam Ty alternative elimination
-------------------------------------------------------------------------

{-
relation valElimExprAlts =
  view I2 =
    holes [ fiopt: FIOpts, valGam: ValGam, ityCnstr.in: ICnstr, tvarv.g.._: TyVarIdS | | ityCnstr: ICnstr ]
    judgespec fiopt; ityCnstr.in; tvarv.g.._ :-..."Gamma talt elim" valGam : ityCnstr
    judgeuse ag (lArgElimValGam,ityCnstr,errGam)
                    `=` valElimExprAlts (fiopt) "@fe" (tvarv.g.._) unique (ityCnstr.in) (valGam)
-}

-------------------------------------------------------------------------
-- Free tvars of ...
-------------------------------------------------------------------------

%%[1
relation valGamFtv =
  view I2 =
    holes [ g: Gam | | tvars: TyVarIdS ]
    judgespec tvars === g
    judgeuse tex tvars `=` ftv(g)
    judgeuse ag tvars `=` ftv(g)
%%]

-------------------------------------------------------------------------
-- Equality
-------------------------------------------------------------------------

%%[1
relation eqTy =
  view HM =
    holes [ ty.1: Ty, ty.2: Ty | | ]
    judgespec ty.1 === ty.2
    judgeuse tex ty.1 `=` ty.2
%%]

-------------------------------------------------------------------------
-- Make a Cnstr
-------------------------------------------------------------------------

%%[1
relation bind1TyVarToTy =
  view HM =
    holes [ tvarv: TyVarId, ty: Ty | | tyCnstr: Cnstr ]
    judgespec tyCnstr === [tvarv :-> ty]
    judgeuse tex tyCnstr `=` [tvarv :-> ty]
    judgeuse ag  tyCnstr `=` cnstrTyUnit (tvarv) (ty)
%%]
