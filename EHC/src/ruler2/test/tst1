preamble tex "%include lhs2TeX.fmt\n%include afp.fmt"

extern ty2

format ag ty.identv = gTy
format ag identv = nm

format ag def (a) -> (r) = a `mkTyArrow` r
format ag def ((c | Cnstr) (v | a)) = (c |=> v | a)
format ag use ((a) -> (r)) `=` (v) = (a,r) `=` tyArgRes v

format ag eFun = func
format ag eArg = arg

format ag exprs.hd = hd
format ag exprs.tl = tl

format tex ty = sigma
format tex ty.inh = sigma..k
format tex ty.syn = sigma
format tex tyCnstr = Cnstr
format tex tyCnstr.inh = Cnstr..k
format tex tyCnstr.syn = Cnstr
format tex tyCnstr.fun = Cnstr.f
format tex tyCnstr.arg = Cnstr.a
format tex valGam = Gamma

-- format ag ty = tyx

format tex eFun = e.1
format tex eArg = e.2

viewhierarchy = E < K < 1 < 2 --, K K1, 1 11

relation bindIdTy =
  view E =
    hole [ nm: Nm, valGam: ValGam | | ty: Ty ]
    judgeshape tex nm :-> ty `elem` valGam
    judgeshape ag ty `=` valGamLookup (nm) (valGam)

scheme expr "Expr" =
  view E =
    hole [ node e: Expr, valGam: ValGam | ty: Ty | ]
    judgeshape tex valGam :-.."e" e : ty
    explain (Within the environment |valGam| , |e| has (bla) type |ty| .)
    explain ty = (Type of the expression |e| (bla bla).)
  view K =
    hole [ | updown ty: Ty |  ]
    judgeshape tex valGam; ty.inh :-.."e" e : ty.syn
  view 2 =
    hole [ | thread tyCnstr: Cnstr | ]
    judgeshape tex valGam ; tyCnstr.inh ; ty.inh :-.."e" e : ty.syn ~> tyCnstr.syn

scheme exprs : [expr] "Exprs"

rulesgroup expr.subset scheme expr "Subset of Expr type rules" =
  rule expr.base e.var 

rules expr.base scheme expr "Expr type rules" =
  rule e.var "Var" =
    view E =
      judge G : bindIdTy = identv :-> ty `elem` valGam
      -
      judge R : expr = valGam :- identv : ty

    view K =
      judge G : bindIdTy
          | ty = ty.identv
      judge F : fit
          | lty = (ltyPrev= ty.identv)
          | rty = ty.inh
      -
      judge R : expr
          | ty.syn = ty

    view 2 =
      judge F : fit
          | lty = tyCnstr.inh ltyPrev
          | rty = tyCnstr.inh ty.inh
          | cnstr = tyCnstr
      -
      judge R : expr
          | tyCnstr.syn = tyCnstr tyCnstr.inh

  rule e.var2 : e.var "Var2" =
    view K =
      judge F : fit
          | rty = ty2
      -
      judge R : expr
          | ty.syn = ty2


  rule e.app "App" =
    view E =
      judge F : expr = valGam :- eFun : (tyFun= ty.a -> ty)
      judge A : expr = valGam :- eArg : ty.a
      -
      judge R : expr = valGam :- ((node 1 = eFun) ^^ (node 2 = eArg)) : ty

    view K =
      judge F : expr
          | ty.inh = _ -> ty.inh
          | ty.syn = tyFun
      judge A : expr
          | ty.inh = ty.a
          | ty.syn = _
      -
      judge R : expr
          | ty.syn = ty

    view 2 =
      judge V : fresh
      judge F : expr
          | ty.inh = tvarv -> ty.inh
          | tyCnstr.inh = tyCnstr.inh
          | tyCnstr.syn = tyCnstr.fun
      judge A : expr
          | tyCnstr.inh = tyCnstr.fun
          | tyCnstr.syn = tyCnstr.arg
      -
      judge R : expr
          | ty.syn = tyCnstr.arg ty
          | tyCnstr.syn = tyCnstr.arg

relation fit =
  view K =
    hole [ lty: Ty, rty: Ty | | ty: Ty ]
    judgeshape tex :-.."f" lty <= rty : ty
    judgeshape ag ty `=` lty `fitsIn` rty
  view 2 =
    hole [ | | cnstr: Cnstr ]
    judgeshape tex :-.."f" lty <= rty : ty ~> cnstr
    judgeshape ag (ty,cnstr) `=` (lty) `fitsIn` (rty)
--    judgeshape ag (ty,cnstr) `=` fitsIn (lty) (rty)

relation fresh =
  view 2 =
    hole [ | | tvarv: UID ]
    judgeshape tex tvarv (text "fresh")
    judgeshape ag tvarv `=` mkTyVar uniq


