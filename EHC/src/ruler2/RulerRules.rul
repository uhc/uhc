preamble tex "%include lhs2TeX.fmt\n%include afp.fmt\n%include ruler.fmt"

-- -----------------------------------------------------------------------
-- View hierarchy
-- -----------------------------------------------------------------------

viewhierarchy = E

-- -----------------------------------------------------------------------
-- Formatting
-- -----------------------------------------------------------------------

external _

format tex  scGam 		= Gamma..s
format tex  vwScGam 	= Gamma..sv
format tex  atScGam 	= Gamma..h
format tex  atScGam.p 	= Gamma.p.h
format tex  jdGam 		= Gamma..j
format tex  jdGam.p 	= Gamma.p.j
format tex  rsGam 		= Gamma..rs
format tex  rlRsGam 	= Gamma..r
format tex  vwRlRsGam 	= Gamma..rv
format tex  agAtGam 	= Gamma..t

format tex  vwGr 		= G

external AtInh AtInOut AtSyn AtNode
external Post Pre

format tex 	atDir		= delta
format tex 	AtInh		= delta.downarrow
format tex 	AtSyn		= delta.uparrow
format tex 	AtNode		= delta.n
format tex 	AtInOut		= delta.updownarrow

format tex  trfAG		= theta

-- -----------------------------------------------------------------------
-- Rewriting
-- -----------------------------------------------------------------------

format tex [n :-> v] = (n :-> v)..._
format tex n `frac` d = frac(n)(d)

-- -----------------------------------------------------------------------
-- Program
-- -----------------------------------------------------------------------

scheme prog =
  view E =
    holes [ node p: Prog | | trfAG: TrfAG ]
    judgespec :-.."prog" p : trfAG

ruleset prog scheme prog "Ruler program" =
  rule prog =
    view E =
      judge H : vwhier = vwGr :- views
      judge S : scms = vwGr ; scGam :- schemes
      judge RS : rsets = vwGr ; scGam ; rsGam :- rulesets : trfAG
      ---
      judge R : prog = :- (views schemes rulesets) : trfAG

-- -----------------------------------------------------------------------
-- View hierarchy
-- -----------------------------------------------------------------------

scheme vwhier =
  view E =
    holes [ node vh: VwHier | vwGr: VwGr | ]
    judgespec vwGr :-.."vwhier" vh

-- -----------------------------------------------------------------------
-- Scheme
-- -----------------------------------------------------------------------

scheme scm =
  view E =
    holes [ node s: Scm, vwGr: VwGr | scGam: ScGam | ]
    judgespec vwGr ; scGam :-.."scm" s

scheme scms =
  view E =
    holes [ node ss: Scms, vwGr: VwGr | scGam: ScGam | ]
    judgespec vwGr ; scGam :-.."scms" ss

ruleset scm scheme scm "Scheme" =
  rule scm =
    view E =
      judge V : svws = vwGr ; vwScGam :- vws
      judge G : isInGam = scGam :- nm : vwScGam
      ---
      judge R : scm = vwGr ; scGam :- ((scheme) nm `=` vws )

-- -----------------------------------------------------------------------
-- Scheme view
-- -----------------------------------------------------------------------

scheme svw =
  view E =
    holes [ node v: SVw, vwGr: VwGr | vwScGam: VwScGam | ]
    judgespec vwGr ; vwScGam :-.."svw" v

scheme svws =
  view E =
    holes [ node vs: SVws, vwGr: VwGr | vwScGam: VwScGam | ]
    judgespec vwGr ; vwScGam :-.."svws" vs

ruleset svw scheme svw "Scheme view" =
  rule svw =
    view E =
      judge H : shls = vwGr ; (atScGam \\ atScGam.p) :- hls
      judge S : jspecs = vwGr ; (jdGam \\ jdGam.p) :- specs
      judge G : isInVwScGam = vwScGam :- v : atScGam ; jdGam
      judge P : vgrPrec = vwGr :- v : v.p
      judge GP : isInVwScGam = vwScGam :- v.p : atScGam.p ; jdGam.p
      ---
      judge R : svw = vwGr ; vwScGam :- ((view) v `=` hls specs)

-- -----------------------------------------------------------------------
-- Scheme holes
-- -----------------------------------------------------------------------

scheme shls =
  view E =
    holes [ node h: SHl, vwGr: VwGr | atScGam: AtScGam | ]
    judgespec vwGr ; atScGam :- h
    judgeuse tex atScGam :-.."shls" h

ruleset shls scheme shls "Scheme holes" =
  rule shls =
    view E =
      judge I  : hls = vwGr ; atScGam ; AtInh :- i
      judge IS : hls = vwGr ; atScGam ; AtInOut :- is
      judge S  : hls = vwGr ; atScGam ; AtSyn :- s
      ---
      judge R : shls = vwGr ; atScGam :- ((holes) [ i `|` is `|` s ])

-- -----------------------------------------------------------------------
-- Single scheme holes
-- -----------------------------------------------------------------------

scheme hl =
  view E =
    holes [ node h: Hl, vwGr: VwGr, atDir: AtDir | atScGam: AtScGam | ]
    judgespec vwGr ; atScGam ; atDir :- h
    judgeuse tex atScGam ; atDir :-.."hl" h

scheme hls =
  view E =
    holes [ node hs: Hls, vwGr: VwGr, atDir: AtDir | atScGam: AtScGam | ]
    judgespec vwGr ; atScGam ; atDir :- hs
    judgeuse tex atScGam ; atDir :-.."hls" hs

ruleset hl scheme hl "Hole" =
  rule hl =
    view E =
      judge G : isInAtScGam = atScGam :- nm : ty ; ([atDir])
      ---
      judge R : hl = vwGr ; atScGam ; atDir :- (nm : ty)

  rule nd : hl =
    view E =
      judge G : isInAtScGam
          | props = [atDir,AtNode]
      ---
      judge R : hl
          | h = (node) nm : ty

-- -----------------------------------------------------------------------
-- Scheme judge spec
-- -----------------------------------------------------------------------

scheme jspec =
  view E =
  holes [ node j: JSpec, vwGr: VwGr | jdGam: JdShpGam | ]
  judgespec vwGr ; jdGam :- j
  judgeuse tex jdGam :-.."jspec" j

scheme jspecs =
  view E =
  holes [ node js: JSpecs, vwGr: VwGr | jdGam: JdShpGam | ]
  judgespec vwGr ; jdGam :- js
  judgeuse tex jdGam :-.."jspecs" js

ruleset jspec scheme jspec "Judgement specification" =
  rule jspec =
    view E =
      judge G : isInGam = jdGam :- (spec) : e
      ---
      judge R : jspec = vwGr ; jdGam :- ((judgespec) e)

  rule juse =
    view E =
      judge G : isInGam = jdGam :- targ : e
      judge T : isValidTarget = :- targ
      ---
      judge R : jspec = vwGr ; jdGam :- ((judgeuse) targ e)

-- -----------------------------------------------------------------------
-- Rulesets
-- -----------------------------------------------------------------------

scheme rset =
  view E =
    holes [ node rs: RlSet, vwGr: VwGr, scGam: ScGam | rsGam: RsGam | trfAG: TrfAG ]
    judgespec vwGr ; scGam ; rsGam :-.."rset" rs : trfAG

scheme rsets =
  view E =
    holes [ node rss: RlSets, vwGr: VwGr, scGam: ScGam | rsGam: RsGam | trfAG: TrfAG ]
    judgespec vwGr ; scGam ; rsGam :-.."rsets" rss : trfAG

ruleset rset scheme rset "Ruleset" =
  rule rset =
    view E =
      judge RLS : ruls = vwGr ; scGam ; vwScGam ; rlRsGam :- rls : trfAG
      judge GS : isInGam = scGam :- snm : vwScGam
      judge GR : isInRsGam = rsGam :- rsnm : snm ; rlRsGam
      ---
      judge R : rset = vwGr ; scGam ; rsGam :- ((ruleset) rsnm (scheme) snm info `=` rls) : trfAG

-- -----------------------------------------------------------------------
-- Rule in ruleset
-- -----------------------------------------------------------------------

scheme rul =
  view E =
    holes [ node rl: Rl, vwGr: VwGr, scGam: ScGam, vwScGam: VwScGam, rlRsGam: RlRsGam | | trfAG: TrfAG ]
    judgespec vwGr ; scGam ; vwScGam ; rlRsGam :-.."rul" rl : trfAG

scheme ruls =
  view E =
    holes [ node rls: Rls, vwGr: VwGr, scGam: ScGam, vwScGam: VwScGam, rlRsGam: RlRsGam | | trfAG: TrfAG ]
    judgespec vwGr ; scGam ; vwScGam ; rlRsGam :-.."ruls" rls : trfAG

ruleset rul scheme rul "Rule in ruleset" =
  rule rul =
    view E =
      judge V : rvws = vwGr ; scGam ; vwScGam ; vwRlRsGam :- vws : trfAG
      judge GR : isInGam = rlRsGam :- rnm : vwRlRsGam
      ---
      judge R : rul = vwGr ; scGam ; vwScGam ; rlRsGam :- ((rule) rnm `=` vws) : trfAG

-- -----------------------------------------------------------------------
-- View on rule in ruleset
-- -----------------------------------------------------------------------

scheme rvw =
  view E =
    holes [ node v: RlVw, vwGr: VwGr, scGam: ScGam, vwScGam: VwScGam, vwRlRsGam: VwRlRsGam | | trfAG: TrfAG ]
    judgespec vwGr ; scGam ; vwScGam ; vwRlRsGam :-.."rvw" v : trfAG

scheme rvws =
  view E =
    holes [ node vs: RlVws, vwGr: VwGr, scGam: ScGam, vwScGam: VwScGam, vwRlRsGam: VwRlRsGam | | trfAG: TrfAG ]
    judgespec vwGr ; scGam ; vwScGam ; vwRlRsGam :-.."rvws" vs : trfAG

ruleset rvw scheme rvw "View on rule in ruleset" =
  rule rvw =
    view E =
      judge Pre  : jds = Pre  ; vnm ; scGam :- prejds : trfAG.pre
      judge Post : jd  = Post ; vnm ; scGam :- postjd : trfAG.post
      ---
      judge R : rvw = vwGr ; scGam ; vwScGam ; vwRlRsGam :- ((view) vnm `=` (prejds `frac` postjd)) : (trfAG.pre,trfAG.post)

-- -----------------------------------------------------------------------
-- Judgement in a view on rule in ruleset
-- -----------------------------------------------------------------------

scheme jd =
  view E =
    holes [ node j: Jd, isPre: Bool, scGam: ScGam, vnm: Nm | | trfAG: TrfAG ]
    judgespec isPre ; vnm ; scGam :-.."jd" j : trfAG

scheme jds =
  view E =
    holes [ node js: Jds, isPre: Bool, scGam: ScGam, vnm: Nm | | trfAG: TrfAG ]
    judgespec isPre ; vnm ; scGam :-.."jds" js : trfAG

ruleset jd scheme jd "Judgement in a view on rule in ruleset" =
  rule jd =
    view E =
      judge H : jdats = isPre ; atScGam :- jdhls : trfAG
      judge GS : isInGam = scGam :- snm : vwScGam
      judge GV : isInVwScGam = vwScGam :- vnm : atScGam ; _
      ---
      judge R : jd = isPre ; vnm ; scGam :- ((judge) jnm : snm `=` jdhls) : trfAG

-- -----------------------------------------------------------------------
-- Hole binding in a judgement in a view on rule in ruleset
-- -----------------------------------------------------------------------

scheme jdat =
  view E =
    holes [ node a: JdAt, isPre: Bool, atScGam: AtScGam | | trfAG: TrfAG ]
    judgespec isPre ; atScGam :-.."jdat" a : trfAG

scheme jdats =
  view E =
    holes [ node as: JdAts, isPre: Bool, atScGam: AtScGam | | trfAG: TrfAG ]
    judgespec isPre ; atScGam :-.."jdats" as : trfAG

ruleset jdat scheme jdat "Hole binding in a judgement in a view on rule in ruleset" =
  rule presyn =
    view E =
      judge G : isInAtScGam = atScGam :- nm : _ ; ([AtSyn])
      judge NG : isInAtScGam = atScGam :- nd : _ ; ([AtNode])
      judge E : expr = agAtGam :- e : nms ; _
      judge AG : areInGam = agAtGam :- n, nms : ("@loc." n)
      ---
      judge R : jdat = Pre ; atScGam :- (nm `=` e) : ([e `=` "@" nd "." nm])

  rule postinh : presyn =
    view E =
      judge G : isInAtScGam
          | props = [AtInh]
      judge - NG
      ---
      judge R : jdat
          | isPre = Post
          | trfAG = [e `=` "@lhs." nm]

  rule preinh : presyn =
    view E =
      judge G : isInAtScGam
          | props = [AtInh]
      judge E : expr
          | trfAG = trfAG.e
          | nms = _
      judge - AG
      ---
      judge R : jdat
          | trfAG = [nd "." nm `=` trfAG.e]

  rule postsyn : preinh =
    view E =
      judge G : isInAtScGam
          | props = [AtSyn]
      judge - NG
      ---
      judge R : jdat
          | isPre = Post
          | trfAG = ["lhs." nm `=` trfAG.e]

-- -----------------------------------------------------------------------
-- Expr
-- -----------------------------------------------------------------------

scheme expr =
  view E =
    holes [ node e: Expr | agAtGam: AgAtGam | nms: Nms, trfAG: TrfAG ]
    judgespec agAtGam :-.."expr" e : nms ; trfAG

ruleset expr scheme expr "Expression" =
  rule var =
    view E =
      judge G : isInGam = agAtGam :- nm : v
      ---
      judge R : expr = agAtGam :- nm : ([nm]) ; v

  rule app =
    view E =
      judge E1 : expr = agAtGam :- e.1 : n.1 ; trfAG.1
      judge E2 : expr = agAtGam :- e.2 : n.2 ; trfAG.2
      ---
      judge R : expr = agAtGam :- (e.1 e.2) : (n.1,n.2) ; (trfAG.1 trfAG.2)

  rule op =
    view E =
      judge E1 : expr = agAtGam :- e.1 : n.1 ; trfAG.1
      judge E2 : expr = agAtGam :- e.2 : n.2 ; trfAG.2
      ---
      judge R : expr = agAtGam :- (e.1 op e.2) : (n.1,n.2) ; (trfAG.1 op trfAG.2)

-- -----------------------------------------------------------------------
-- Prop for Gam's
-- -----------------------------------------------------------------------

relation isInGam =
  view E =
    holes [ nm: Nm, gam: Gam | | v: V ]
    judgespec gam :- nm : v
    judgeuse tex (nm :-> v) `elem` gam

relation isInVwScGam =
  view E =
    holes [ nm: Nm, gam: VwScGam | | atScGam: AtScGam, jdGam: JdShpGam ]
    judgespec gam :- nm : atScGam ; jdGam
    judgeuse tex (nm :-> (atScGam,jdGam)) `elem` gam

relation isInAtScGam =
  view E =
    holes [ gam: AtScGam | nm: Nm | ty: Ty, props: AtDirs ]
    judgespec gam :- nm : ty ; props
    judgeuse tex (nm :-> (ty,props)) `elem` gam

relation isInRsGam =
  view E =
    holes [ nm: Nm, gam: RsGam | | snm: Nm, rlRsGam: RlRsGam ]
    judgespec gam :- nm : snm ; rlRsGam
    judgeuse tex (nm :-> (snm,rlRsGam)) `elem` gam

relation areInGam =
  view E =
    holes [ nm: Nm, nms: Nms, gam: Gam | | v: V ]
    judgespec gam :- nm , nms : v
    judgeuse tex (nm :-> v) `elem` gam, nm `elem` nms

-- -----------------------------------------------------------------------
-- Prop
-- -----------------------------------------------------------------------

relation isValidTarget =
  view E =
    holes [ targ: FmKind | | ]
    judgespec :- targ
    judgeuse tex targ `elem` {(tex),(ag)}

relation vgrIsLT =
  view E =
    holes [ v1: Nm, v2: Nm, vegr: VwGr | | ]
    judgespec vwgr :- v1 < v2

relation vgrPrec =
  view E =
    holes [ v1: Nm, vwgr: VwGr | | v2: Nm ]
    judgespec vwgr :- v1 : v2
    judgeuse tex vwgr :- v2 === pred(v1)

relation vgrSucc =
  view E =
    holes [ v1: Nm, vwgr: VwGr | | v2: Nm ]
    judgespec vwgr :- v1 : v2
    judgeuse tex vwgr :- v2 === succ(v1)


