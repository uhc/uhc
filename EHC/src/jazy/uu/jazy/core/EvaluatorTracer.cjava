%%[(8 jazy)package uu.jazy.core ;/** * Lazy and Functional. * Package for laziness and functions as known from functional languages. * Written by Atze Dijkstra, atze@cs.uu.nl * * $Header:     $ * $Archive:    $ * $NoKeywords: $ *///import java.util.* ;//import java.io.* ;//import uu.jazy.prelude.* ;/** * Something which can be evaluated and/or applied to parameters. */public class EvaluatorTracer extends Evaluator{	private EvalTracer tracer ;		public EvaluatorTracer( EvalTracer t )	{		tracer = t ;	}	    /**     * Evaluate an Object known to be an Apply.     */    public Object eval( Apply av, boolean isTailCall )    {    	Object res = av.funcOrVal ;%%[[8		if ( doTrace && ! isTailCall )		{			tracer.pushOnStack( av ) ;		}%%][100%%]]        try        {			if ( av.nrNeededParams == 0 )			{				av.evalSet() ;				Object vv = av.funcOrVal ;%%[[8				if ( doTrace )				{					tracer.replaceTopOfStack( vv ) ;				}%%][100%%]]				av.nrNeededParams = -1 ;%%[[8				nrEvaluations++ ;%%][100%%]]				if ( vv instanceof Apply )				{					return av.funcOrVal = eval( (Apply)vv, true ) ;				}			}			else if ( av.nrNeededParams > 0 )			{				return av ;			}			else			{				return av.funcOrVal ;			}        }        catch ( Error err )        {            System.err.print( err.toString() + ", " ) ;            System.err.println( av.toString() ) ;            throw err ;        }        catch ( Throwable th )        {            //th.printStackTrace( System.err ) ;            System.err.print( th.toString() + ", " ) ;            System.err.println( av.toString() ) ;            //Utils.printCyclicOn( av, System.err, 3 ) ;            throw new Error( "Error in eval" ) ;        }        finally        {%%[[8			if ( doTrace && ! isTailCall )			{				tracer.popFromStack() ;			}%%][100%%]]        }    	return av.funcOrVal ;    }    /**     * Evaluate an Object.     * The Object itself is returned if it is not an Apply.     */    public Object eval( Object v )    {        if ( v instanceof Apply )        {            v = eval( (Apply)v, false ) ;        }        return v ;    }}%%]