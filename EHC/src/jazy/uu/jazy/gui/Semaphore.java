package uu.jazy.gui ;/** * Lazy and Functional. * Package for laziness and functions as known from functional languages. * Written by Atze Dijkstra, atze@cs.uu.nl * * $Header:     $ * $Archive:    $ * $NoKeywords: $ */import java.util.* ;import java.io.* ;//import uu.jazy.prelude.* ;/** * Semaphore */public class Semaphore{	private int counter;	public Semaphore()	{		this(0);	}	public Semaphore(int i)	{		if (i < 0) throw new IllegalArgumentException(i + " < 0");		counter = i;	}	/**	 * Increments internal counter, possibly awakening a thread	 * wait()ing in acquire().	 */	public synchronized void release()	{		if (counter == 0) {			this.notify();		}		counter++;	}	/**	 * Decrements internal counter, blocking if the counter is already	 * zero.	 *	 */	public synchronized void acquire()	{		try		{			while (counter == 0) {				this.wait();			}		}		catch ( InterruptedException ex )		{		}		counter--;	}}