-----------------------------------------------------------------------------
-- |The Helium Compiler : Static Analysis
-- 
-- Maintainer  :  bastiaan@cs.uu.nl
-- Stability   :  experimental
-- Portability :  unknown
--
-- Type inferencing.
--
-----------------------------------------------------------------------------
{
module Helium.StaticAnalysis.Inferencers.TypeInferencing
where
}
-------------------------------------------------------------------------------
-- Imports

{
-- types
import Top.Types
import Helium.StaticAnalysis.Miscellaneous.TypeConversion

-- error messages and warnings
import Helium.StaticAnalysis.Messages.Messages
import Helium.StaticAnalysis.Messages.TypeErrors
import Helium.StaticAnalysis.Messages.Warnings
import Helium.StaticAnalysis.Miscellaneous.ConstraintInfo
import Helium.StaticAnalysis.Miscellaneous.DoublyLinkedTree
import Helium.StaticAnalysis.Miscellaneous.UHA_Source

-- constraints and constraint trees
import Helium.StaticAnalysis.Miscellaneous.TypeConstraints
import Top.Ordering.Tree

-- constraint solving
import Helium.StaticAnalysis.Inferencers.SelectConstraintSolver (selectConstraintSolver)
import Top.Solver (SolveResult(..), LogEntries)
import Helium.StaticAnalysis.Heuristics.HeuristicsInfo (makeUnifier, skip_UHA_FB_RHS)
import Helium.StaticAnalysis.Inferencers.BindingGroupAnalysis

-- UHA syntax
import Helium.Syntax.UHA
import Helium.Syntax.UHA_Range                 
import Helium.Syntax.UHA_Utils (showNameAsOperator, intUnaryMinusName, NameWithRange(..), nameFromString, getNameName, enumFromThenToName, enumFromToName, enumFromName, enumFromThenName)
         
-- other
import Helium.Utils.Utils                     (internalError)
import Helium.CodeGeneration.DerivingShow              (typeOfShowFunction, nameOfShowFunction)
import Helium.ModuleSystem.ImportEnvironment  hiding (setTypeSynonyms)
import Helium.ModuleSystem.DictionaryEnvironment
import Helium.Compiler.Args

-- standard
import qualified Data.Map as M
import Data.Maybe 
import Data.List
}
{
import List
import Helium.StaticAnalysis.Directives.Matchers
import Helium.StaticAnalysis.Directives.TS_Apply (applyTypingStrategy, matchInformation)
import Helium.StaticAnalysis.Directives.TS_Core
import Helium.StaticAnalysis.Directives.TS_Attributes
}

--- Type Inference Directives (may be turned off)
INCLUDE "../Directives/TS_PatternMatching.ag"

-- SEM Module | Module   lhs . solveResult = @solveResult { debugFromResult =  debugFromResult @solveResult 
--                                                                          ++ "Inference Strategies:" 
--                                                                          } -- ++ [ ] @body.matchIO }



-- Pattern Match Warnings (may be turned off)
INCLUDE "PatternMatchWarnings.ag"
SEM Module | Module lhs . warnings = @loc.warnings ++ @body.patternMatchWarnings





{
typeInferencing :: [Option] -> ImportEnvironment -> Module
                      -> (IO (), DictionaryEnvironment, TypeEnvironment, TypeErrors, Warnings)
typeInferencing options importEnv module_ =
   let (_, dictionaryEnv, _, logEntries, _, solveResult, toplevelTypes, typeErrors, warnings) =
            sem_Module module_ importEnv options
       debugIO = putStrLn (show logEntries)
   in (debugIO, dictionaryEnv, toplevelTypes, typeErrors, warnings)

proximaTypeInferencing :: [Option] -> ImportEnvironment -> Module
                      -> (TypeErrors, Warnings, TypeEnvironment, [(Range, TpScheme)])  
proximaTypeInferencing options importEnv module_ =
   let (_, _, infoTree, _, _, solveResult, toplevelTypes, typeErrors, warnings) =
            sem_Module module_ importEnv options
       localTypeSchemes = typeSchemesInInfoTree (substitutionFromResult solveResult)
                                                (qualifiersFromResult solveResult) 
                                                infoTree
   in (typeErrors, warnings, toplevelTypes, localTypeSchemes)
}

-------------------------------------------------------------------------------
-- Attributes for type inferencing

ATTR *
   [ | | self : SELF ]


ATTR Module
   [ importEnvironment     : ImportEnvironment
     options               : {[Option]}
   |
   | assumptions           : Assumptions
     dictionaryEnvironment : DictionaryEnvironment
     infoTree              : InfoTree
     logEntries            : LogEntries
     solveResult           : {SolveResult ConstraintInfo}
     toplevelTypes         : TypeEnvironment
     typeErrors            : TypeErrors
     warnings              : Warnings
   ]

-------------------------------------------------------------------------------
-- Includes

INCLUDE "TypeInferenceRules.ag"
INCLUDE "TypeInferenceOverloading.ag"
INCLUDE "TypeInferenceCollect.ag"
INCLUDE "TypeInferenceInfo.ag"
INCLUDE "LocalInfo.ag"
INCLUDE "GlobalInfo.ag"
INCLUDE "../StaticChecks/HeliumPartialSyntax.ag"
INCLUDE "../StaticChecks/Scope.ag"  
INCLUDE "../../Syntax/UHA_Syntax.ag"
  
