module "test"
{ main <- store (#0/F/main 0)
}
{ $_EQ 
    = { unit (#0/C/$_EQ 0)} 
; $_False 
    = { unit (#0/C/$_False 0)} 
; $_GT 
    = { unit (#1/C/$_GT 0)} 
; $_LT 
    = { unit (#2/C/$_LT 0)} 
; $_True 
    = { unit (#1/C/$_True 0)} 
; $_compare $_9_0_6_1 $_9_0_6_2
    = { eval $_9_0_6_1 ; \(#0/C/$_Int $__ $__9_0_6_1) ->
        eval $_9_0_6_2 ; \(#0/C/$_Int $__ $__9_0_6_2) ->
        ffi primCmpInt $__9_0_6_1 $__9_0_6_2
      } 
; main 
    = { store (#0/C/$_Int 1 1) ; \$_9_0_8_0 ->
        store (#0/C/$_Int 1 2) ; \$_9_0_8_1 ->
        store (#0/F/$_compare 2 $_9_0_8_0 $_9_0_8_1) ; \$_0_32_0~3_0 ->
        unit $_0_32_0~3_0 ; \$_9_0_12_0 ->
        eval $_9_0_12_0 ; \$_0_32_0!~4_0 ->
        case $_0_32_0!~4_0 of
          { (#0/C/$_EQ $__)
                -> { unit (#0/C/$_Int 1 1)} 
          ; (#1/C/$_GT $__)
                -> { unit (#0/C/$_Int 1 2)} 
          ; (#2/C/$_LT $__)
                -> { unit (#0/C/$_Int 1 0)} 
          } 
      } 
; apply $_f_9_0_1_0 $_a_9_0_1_1
    = { case $_f_9_0_1_0 of
          { (#0/P/1/apply $__ $_9_0_5_0)
                -> { apply $_9_0_5_0 $_a_9_0_1_1} 
          ; (#0/P/2/apply $__)
                -> { unit (#0/P/1/apply 1 $_a_9_0_1_1)} 
          } 
      } 
; eval $_9_0_0_0
    = { fetch $_9_0_0_0  ; \$_9_0_0_1 ->
        case $_9_0_0_1 of
          { (#0/C/$_Int $__ $_9_0_2_0)
                -> { unit $_9_0_0_1} 
          ; (#0/C/$_Char $__ $_9_0_2_1_0)
                -> { unit $_9_0_0_1} 
          ; (#0/C/$_False $__)
                -> { unit $_9_0_0_1} 
          ; (#1/C/$_True $__)
                -> { unit $_9_0_0_1} 
          ; (#0/C/$_EQ $__)
                -> { unit $_9_0_0_1} 
          ; (#1/C/$_GT $__)
                -> { unit $_9_0_0_1} 
          ; (#2/C/$_LT $__)
                -> { unit $_9_0_0_1} 
          ; (#0/P/1/apply $__ $_~9_0_5_0)
                -> { unit $_9_0_0_1} 
          ; (#0/P/2/apply $__)
                -> { unit $_9_0_0_1} 
          ; (#0/F/apply $__ $_9_0_3_1 $_9_0_3_2)
                -> { apply $_9_0_3_1 $_9_0_3_2 ; \$_9_0_3_0 ->
                     update $_9_0_0_0 $_9_0_3_0 ; \() ->
                     unit $_9_0_3_0
                   } 
          ; (#0/F/$_compare $__ $_9_0_3_1_1 $_9_0_3_1_2)
                -> { $_compare $_9_0_3_1_1 $_9_0_3_1_2 ; \$_9_0_3_1_0 ->
                     update $_9_0_0_0 $_9_0_3_1_0 ; \() ->
                     unit $_9_0_3_1_0
                   } 
          ; (#0/F/$_EQ $__)
                -> { $_EQ ; \$_9_0_4_0 ->
                     update $_9_0_0_0 $_9_0_4_0 ; \() ->
                     unit $_9_0_4_0
                   } 
          ; (#0/F/$_False $__)
                -> { $_False ; \$_9_0_4_1_0 ->
                     update $_9_0_0_0 $_9_0_4_1_0 ; \() ->
                     unit $_9_0_4_1_0
                   } 
          ; (#0/F/$_GT $__)
                -> { $_GT ; \$_9_0_4_2_0 ->
                     update $_9_0_0_0 $_9_0_4_2_0 ; \() ->
                     unit $_9_0_4_2_0
                   } 
          ; (#0/F/$_LT $__)
                -> { $_LT ; \$_9_0_4_3_0 ->
                     update $_9_0_0_0 $_9_0_4_3_0 ; \() ->
                     unit $_9_0_4_3_0
                   } 
          ; (#0/F/$_True $__)
                -> { $_True ; \$_9_0_4_4_0 ->
                     update $_9_0_0_0 $_9_0_4_4_0 ; \() ->
                     unit $_9_0_4_4_0
                   } 
          ; (#0/F/main $__)
                -> { main ; \$_9_0_4_5_0 ->
                     update $_9_0_0_0 $_9_0_4_5_0 ; \() ->
                     unit $_9_0_4_5_0
                   } 
          } 
      } 
} 
ctags
{ $_Int = $_Int 0 1; $_Char = $_Char 0 1; $_Bool = $_False 0 0 | $_True 1 0; $_Ordering = $_EQ 0 0 | $_GT 1 0 | $_LT 2 0} 
evalmap
{ #0/C/$_Int 1 -> unit; #0/C/$_Char 1 -> unit; #0/C/$_False 0 -> unit; #1/C/$_True 0 -> unit; #0/C/$_EQ 0 -> unit; #1/C/$_GT 0 -> unit; #2/C/$_LT 0 -> unit; #0/P/1/apply 1 -> unit; #0/P/2/apply 0 -> unit; #0/F/apply 2 -> apply; #0/F/$_compare 2 -> $_compare; #0/F/$_EQ 0 -> $_EQ; #0/F/$_False 0 -> $_False; #0/F/$_GT 0 -> $_GT; #0/F/$_LT 0 -> $_LT; #0/F/$_True 0 -> $_True; #0/F/main 0 -> main} 
applymap
{ #0/P/1/apply 1 -> apply; #0/P/2/apply 0 -> #0/P/1/apply} 
