module "update-big"
{ main   <- store (#0/F/main   0)
; $tuple <- store (#0/F/$tuple 0)
}
{ $add $x $y
    = { eval $x ; \(#0/C/$Int $__ $x') ->
        eval $y ; \(#0/C/$Int $__ $y') ->
        ffi primAddInt $x' $y' ; \(#U $z') ->
        unit (#0/C/$Int 1 $z')
      }
; $lst8 $t
    = { eval $t ; \$e1 ->
        case $e1 of
          { (#0/C/$Tuple8 $__ $a $b $c $d $e $f $g $h)
                -> { eval $h
                   }
          }
      }
; $tuple
    = { store (#0/C/$Int 1 1) ; \$s1 ->
        store (#0/C/$Int 1 2) ; \$s2 ->
        store (#0/C/$Int 1 3) ; \$s3 ->
        store (#0/C/$Int 1 4) ; \$s4 ->
        store (#0/C/$Int 1 5) ; \$s5 ->
        store (#0/C/$Int 1 6) ; \$s6 ->
        store (#0/C/$Int 1 7) ; \$s7 ->
        store (#0/C/$Int 1 8) ; \$s8 ->
        unit (#0/C/$Tuple8 8 $s1 $s2 $s3 $s4 $s5 $s6 $s7 $s8)
      }
; main
    = { store (#0/F/$lst8 1 $tuple) ; \$s9 ->
        add $s9 $s9
      }
}

ctags
{ $Int    = $Int 0 1
}

evalmap
{ #0/C/$Int     1 -> unit
; #0/C/$Tuple8  8 -> unit
; #0/F/$add     2 -> $add
; #0/F/$lst8    1 -> $lst8
; #0/F/$tuple   0 -> $tuple
; #0/F/main     0 -> main
}

applymap
{
}
