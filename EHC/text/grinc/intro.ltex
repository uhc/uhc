\chapter{Introduction}

This thesis describes the implementation of a back-end for EHC\citep{ehc}, the
Essential Haskell Compiler. The back-end is based on the works of the Ph.D. thesis of Urban
Boquist on Code Optimisation Techniques for Lazy Functional Languages
\citep{boquist99phd}. 

This thesis extends the intermediate language GRIN (Graph Reduction
Intermediate Notation) with support for exceptions and describes the
implementation of the \emph{heap points-to analysis}, a global analysis which
drives the compilation process.


\section{Motivation}

The approach used to implement a GRIN compiler is based on whole program
analysis and aggressive optimisation. Motivation for this approach is the
difference in memory usage and execution speed between programs written in a
lazy functional language, like Haskell \citep{haskell98}, and their imperative
counterparts. This is not a surprise: lazy functional languages are more
abstract and ``further away from the machine'' than imperative languages which
gives a compiler a hard time to transform programs into efficient machine code.
An aggressive optimisation approach will hopefully result in a better
performance of a lazy functional program.

Boquist's thesis describes a compilation strategy to compile GRIN to a RISC
architecture. However, there is no implementation available anymore. Also,
various extensions exists for Haskell which need support in GRIN, for example
imprecise exceptions \citep{peytonjones99semantics}.

This master thesis extends GRIN with support for exceptions and implements a
GRIN compiler based on the description of Boquist's thesis. The output language
of our GRIN compiler is the portable assembly language \cmm{}
\citep{ramsey00single,c--}.


\section{Research contributions}

The main contributions of this thesis are:

\begin{itemize}

\item A description of the implementation of a \emph{heap points-to analysis}
(HPT) used by a GRIN compiler to approximate the \emph{control flow} of a
program.  This analysis makes it possible to eliminate calls to all compile
time unknown functions.

\item Exception support in the GRIN language. This makes efficient compilation of
Haskell exceptions possible.

\item Implementation of a back-end for EHC. Based on the Ph.D. thesis of
Boquist and the findings on exceptions in this thesis, a GRIN compiler is
implemented which compiles a program into \cmm{} assembly.

\end{itemize}


\section{Compiler overview}

An overview of the compilation process is shown in Figure \ref{overview}. It
show the data flow between the various parts of the compilation process.

\begin{Figure}{Overview of compilation process}{overview}
\center{
\includegraphics{big-picture}
}
\end{Figure}

The input language of EHC is EH, a language in the spirit of Haskell. EH is
translated by EHC into GRIN. This translation is briefly described in Section
\ref{compile_to_grin}. The rest of this thesis discusses the syntax and
semantics of GRIN and \cmm{}, and describes the various parts of GRINC, the
GRIN compiler.
