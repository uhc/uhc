%format ... = "\dots{}"
\chapter{GRIN}
\label{grin}

GRIN (Graph Reduction Intermediate Notation) is a language used to represent
lazy functional programs in the back-end of a compiler. At this phase, the main
task of a compiler is to bring a program from a high-level representation to an
assembly representation. To assist the translation of a lazy functional program
into assembly, GRIN contains both high-level and low-level constructs.

The high-level constructs in GRIN support the translation of Haskell to GRIN by
the front-end. For example, Haskell values and thunks map directly to GRIN
values, which can be stored to and loaded from memory with a single statement,
as well as matched upon. The low-level constructs are represented by only one
or a few assembly instructions and can, for example, load a single field of a
node into a register.

In this chapter we give an overview of GRIN and cover its syntax, its
semantics, and we address the translation of Haskell to GRIN.

\section{Overview}

GRIN is based on the G-machine \citep{johnsson84efficient} and is, like the
G-machine, designed to implement lazy functional programs. GRIN is a simple
language which makes as much operations as possible explicitly visible in the
language itself. For example, the G-machine and STG-machine
\citep{jones92implementing} have an \emph{eval} primitive. In GRIN this is not
a primitive but implemented as a normal GRIN function and, thus, subject to all
optimisations of the compiler.

GRIN mixes features from both imperative and functional languages. For example,
variables in GRIN cannot be updated by a programmer (like in a functional
language). But unlike in a functional language, GRIN functions are not first
class citizens. The design of GRIN imposes the following properties on the
notation and semantics of the GRIN language:

\begin{itemize}

\item operations are executed sequentially, via the use of a build-in monad;

\item function calls are to statically known functions;

\item loops are not built-in primitives but are implemented by recursive tail
calls;

\item variables are named uniquely and have a single assignment point.

\end{itemize}

The property of sequential execution allows the use of side-effects. The
side-effects possible in GRIN are limited to the minimal side-effect required
for updating shared computations and creating self referencing values.

The other properties simplify the implementation of program-wide analysis and
optimisation. The uniqueness of variables and their single assignment point is
similar to the static single assignment (SSA) form\citep{cytron91ssa} found in
many compilers of imperative languages.

GRIN has notion of a store, or heap. A value can be stored in the heap, loaded
from the heap, or be overwritten with a new value. Primitive operations are not
defined by GRIN, but a foreign function interface exists to invoke functions
outside GRIN.

\subsection{Values}

Values in GRIN can be categorised as follows:

\begin{itemize}

\item basic values, which are \emph{int}, \emph{char} and \emph{float};

\item pointers, which hold references to heap allocated objects;

\item nodes, which consist of a \emph{tag} followed by zero or more basic
values and pointers. Nodes reside on the heap, are stored in local variables,
and returned by functions;

\item tags, which normally identify nodes can also occur as a value. However,
this is only possible internally, after transformations have been applied to
the program.

\end{itemize}

GRIN does not impose any interpretation on node values, although it is aware of
different tag categories. The tag categories represent the different uses of
nodes by the front-end. The different categories are: \emph{C-tags},
\emph{P-tags}, and \emph{F-tags}.

A C-tag identifies nodes which represent Haskell data values. Haskell functions
can be applied to fewer arguments than needed. These functions are represented
in GRIN by nodes identified with a P-tag. The lazy nature of computations in
Haskell causes function calls to be evaluated only when their result is needed.
When their result is not directly needed a \emph{thunk} is created instead,
which represent the function call and its arguments. In GRIN thunks are nodes,
identified with an F-tag.


\section{Syntax}

\begin{Figure}{Syntax for GRIN}{grin:syntax}
\begin{tabular}{lcll}
\emph{prog}     & ::= & \multicolumn{2}{l}
                {$\keyword{module}\ \ident{string}\ \{\ \ident{global}*\ \}\ \{\ \ident{binding}+\ \}$} \\
\\
\emph{global}   &$::=$&$ \ident{var} \leftarrow \keyword{store}\ \ident{val}                               $& global variable \\
\\
\emph{binding}  &$::=$&$ \ident{var}\ \ident{var}*\ =\ \{\ \ident{exp}\ \}                                 $& definition \\
\\
\emph{exp}      &$::=$&$ \ident{exp}\ ;\ \lambda \ident{lpat}\ \rightarrow\ \ident{exp}                    $& sequencing \\
                &$|| $&$ \keyword{case}\ \ident{var}\ \keyword{of}\ \{\ \ident{alt}\ (;\ \ident{alt})*\ \} $& case \\
                &$|| $&$ \ident{var}\ \ident{val}*                                                         $& application, function call \\
                &$|| $&$ \keyword{unit}\ \ident{val}                                                       $& return value \\
                &$|| $&$ \keyword{store}\ \ident{val}                                                      $& allocate new heap node \\
                &$|| $&$ \keyword{fetch}\ \ident{var}\ \ident{offset}?                                     $& load heap node \\
                &$|| $&$ \keyword{update}\ \ident{var}\ \ident{val}                                        $& overwrite heap node \\
                &$|| $&$ \keyword{ffi}\ \ident{string}\ \ident{val}*                                       $& foreign function call or primitive \\
\\
\emph{alt}      &$::=$&$ \ident{cpat}\ \rightarrow\ \{\ \ident{exp}\ \}                                    $& case alternative \\
\\
\emph{val}      &$::=$&$ (\ \ident{tag}\ \ident{sval}*\ )                                                  $& complete node (constant tag) \\
                &$|| $&$ (\ \ident{var}\ \ident{sval}*\ )                                                  $& complete node (node variable) \\
                &$|| $&$ \ident{tag}                                                                       $& single tag \\
                &$|| $&$ ()                                                                                $& empty value \\
                &$|| $&$ \ident{sval}                                                                      $& simple value \\
\\
\emph{sval}     &$::=$&$ \ident{literal}                                                                   $& constant \\
                &$|| $&$ \ident{var}                                                                       $& variable \\
\\
\emph{lpat}     &$::=$&$ (\ \ident{tag}\ \ident{var}*\ )                                                   $& constant node pattern \\
                &$|| $&$ (\ \ident{var}\ \ident{var}*\ )                                                   $& variable node pattern \\
                &$|| $&$ \ident{tag}                                                                       $& single tag \\
                &$|| $&$ ()                                                                                $& empty value \\
                &$|| $&$ \ident{var}                                                                       $& variable \\
\\
\emph{cpat}     &$::=$&$ (\ \ident{tag}\ \ident{var}*\ )                                                   $& constant node pattern \\
                &$|| $&$ \ident{tag}                                                                       $& single tag \\
\\
\emph{tag}      &$::=$&$ \texttt{\#}\ \ident{var}                                                          $& tag identifier
\end{tabular}
\bigskip\\
\begin{tabular}{ll}
%$[\dots]$ & means one of \dots \\
$?$       & means zero or one \\
$*$       & means zero or more \\
$+$       & means one or more \\
\end{tabular}
\end{Figure}

Figure \ref{grin:syntax} shows the syntax of GRIN. This is a modified copy from
the PhD thesis of Boquist\citep{boquist99phd}. Differences between this version
and the version given by Boquist are:

\begin{itemize}

\item a |ffi| statement which is used to implement primitive operations with or
without side-effect or to call functions in other programming languages;

\item global variables of which the use is explained in Section \ref{globals};

\item the use of curly brackets and semicolons for easy parsing. And a header to
define the application name.

\end{itemize}

A GRIN program consist of a set of global variables and functions with the
function |main| as the entry point. A function has a fixed number of arguments
and returns a single GRIN value. The body of a function consists of a sequence
of statements. These are sequenced by the monadic bind operator (denoted by
``|;\p ->|''):

%{
%format statement1
%format statement2
%format pattern1
%format pattern2

\begin{code}
statement1; \pattern1 ->
statement2; \pattern2 ->
...
\end{code}

The bind operator binds the result of |statement1| to the identifiers in
|pattern1|, and continues with |statement2| of which the result is bound to
|pattern2|, etc. For those who are more familiar with imperative languages the
following syntax will be more appealing; it resembles closely the intended
meaning of a GRIN program:

\begin{code}
pattern1 <- statement1;
pattern2 <- statement2;
...
\end{code}
%}

Other GRIN operations are: 

\begin{itemize} 

\item |unit| statements, to construct values;

\item |case| statements to destruct node values and change the control flow
based on the tags of the nodes;

\item |ffi| statements to call functions outside GRIN. This statement can have
side-effects;

\item |store| statements to store a node in the heap;

\item |fetch| statements to load (a field of) a node from the heap;

\item |update| statements to overwrite nodes on the heap.

\end{itemize}

A part of this syntax is not considered as valid input by the current
implementation. It is used to transform GRIN into a simple form which makes
code generation easier. These constructs are: single tags; tag variables; and
the offset field of a |fetch| statement. The |update| statement is only
expected in the |eval| function, which is introduced later.

Tag values start with a hash character (|#|) followed with the category
character. I.e., a C-tag would start with |#C|. As a convention we name the
C-tags after their data constructors and the P- and F-tags after the function
the represent. In addition, we prepend the function name with the number of
missing parameters in a P-tag. Example tag names are: |#CTrue| for the Haskell
value |True|, |#P2foo| a partial application of the Haskell function |foo|
missing two arguments, and |#Ffoo| for a thunk of the function |foo|.

The GRIN version introduced here misses a few constructs used in the GRIN
output of EHC. These constructs are used by EHC to support extensible records.
As we will not discuss extensible records in this thesis we will ignore them.
Chapter \ref{futurework}, which discusses future work, will discuss these
constructs briefly.

\section{Compiling to GRIN}
\label{compile_to_grin}

A Haskell front-end typically translates Haskell to some small core
representation. This core representation is then optimised and translated into
code for the back-end \citep{jones96compiling, ghc, ehc}. A front-end targeting
GRIN does the following:

\begin{itemize}

\item Lift local function declarations to the top level. As GRIN can only
express top-level functions, any local function declaration is lifted to the
top-level by applying lambda lifting. Lambda lifting replaces each free
variable\footnote{variables referring to other top-level functions are not
considered free in this process.} in a local function with a new function
argument. The resulting function lacks free variables and can safely be moved
to the top-level. Functions in this form are also known as combinators.

\item Each combinator is translated into a GRIN function. The arguments of the
combinator are, in GRIN, passed as pointers to nodes in memory. These nodes
represent suspended computation (thunks) or values in weak head normal form
(WHNF). 

\end{itemize}

Haskell combinators have the property that they always return a value in WHNF.
Translated to GRIN, this property means that a GRIN function always returns
some C- or P-node by evaluating a thunk (F-node), calling another combinator,
or constructing a C- or P-node with a unit statement. The resulting node
returned by a GRIN function is the node itself, \emph{not} a pointer to a node
in memory.

While each GRIN function is passed pointers to nodes in memory, it is also
possible to pass basic values as arguments of GRIN functions. Passing complete
nodes however creates difficulties: a node consist of a variable number of
values, which makes implementing a code generator harder and is not allowed by
the current implementation. However, the heap points-to analysis described in
Chapter \ref{hpt} is able to find the maximal number of values needed to
represent a node variable, which makes it possible to split the node argument
into a tag variable and a fixed number of basic values and pointer arguments.

\begin{Figure}{Haskell to GRIN example}{haskell2grin}
\noindent \textbf{EH}

\begin{code}
let data Tuple a b = Tuple a b
in
let  snd  =  \(Tuple _ b)  ->  b
     mk   =  \f x          ->  f x
in snd (mk (Tuple 1) 42)
\end{code}

\noindent \textbf{GRIN}

\begin{code}
module "example"
{  main_caf  <-  store (#Fmain) 
}
{  Tuple x1 x2  =  {  unit (#CTuple x1 x2) }
;  snd t        =  {  eval t ; \tn ->
                      case tn of
                        {(#CTuple a b) -> { eval b }
                        }
                   }
;  mk f x3      =  {  eval f; \fn ->
                      apply fn x3
                   }
;  main         =  {  store (#CInt 1);      \s1 ->
                      store (#P1Tuple s1);  \s2 ->
                      store (#CInt 42);     \s3 ->
                      store (#Fmk s2 s3);   \s4 ->
                      snd s4
                   }
}
\end{code}
\end{Figure}

A small EH program and its GRIN counterpart are given in Figure
\ref{haskell2grin}. The program calculates the integer value |42| in such a way
that it demonstrates most of the GRIN constructs. The top-level EH expression
is bound to the GRIN function main.

Before inspecting the example, we first discuss the special role of |eval| and
|apply| in the translation.


\subsubsection{Role of eval and apply}

Graph reduction systems force, or evaluate, a suspended computation whenever
its value is needed. In GRIN this is done by the function |eval|. Contrary to
other graph reduction systems \citep{johnsson84efficient,jones92implementing},
|eval| is expressed as a GRIN function. The |eval| implementation for the above
example is shown in Figure \ref{eval_apply_function}. The semantics of |eval|
is as follows: it takes a pointer to a node as its argument, loads that node
from memory, and checks its tag:

\begin{itemize}

\item if it is a C-tag: the node represents a Haskell value in WHNF and is
returned;

\item if it is a P-tag: the node represents a Haskell partial application and
is returned;

\item if it is a F-tag: the node represents a thunk. To obtain its value we
call the function represented by the F-node and pass the arguments inside the
node.

\end{itemize}

Finally, the node in memory is updated with the result of the function call.
This way, the thunk is overwritten with its result and the next time it is
evaluated the result of the thunk is directly available.

The |apply| function, also shown in Figure \ref{eval_apply_function}, is used
to implement partial applications of functions. These partial applications are
represented in GRIN by P-nodes. Whenever an argument must be applied to a
partial application, the P-node and a pointer to the ``to be applied argument''
are passed to the GRIN function |apply|. Depending on the number of missing
arguments, |apply| does the following:

\begin{itemize}

\item if the P-tag represents a partial application lacking more than one
argument, then a new P-node is build with the newly applied argument appended
to it;

\item if the P-tag represents a partial application lacking exactly one
argument, then the function represented by the P-tag is called with the
arguments stored in the P-node and the newly applied argument.

\end{itemize}

To apply a partial application to more than one argument at once, a sequence of
|apply| calls could be used. But this would involve building P-nodes for each
applied argument. Instead, GRIN allows to call |apply| with any non-zero number
of arguments. P-nodes are then build in one step with all the available
arguments.

\begin{Figure}{Eval and apply functions for Haskell to GRIN example}{eval_apply_function}
\begin{code}
eval p
  =  {  fetch p   ; \n ->
        case n of
          {  (#CInt v)        ->  {  unit n }
          ;  (#CTuple aa bb)  ->  {  unit n }
          ;  (#P1Tuple a1)    ->  {  unit n }
          ;  (#P2Tuple)       ->  {  unit n }
          ;  (#Fsnd a4)       ->  {  snd a4; \rsnd ->
                                     update p rsnd; \() ->
                                     unit rsnd
                                  }
          ;  (#Fmk a5 a6)     ->  {  mk a5 a6; \rmk ->
                                     update p rmk; \() ->
                                     unit rmk
                                  }
         }
     }
apply pn arg
  =  { case pn of
         {  (#P1Tuple a1)  ->  { Tuple a1 arg }
         ;  (#P2Tuple)     ->  { unit (#P1Tuple arg) }
         }
     }
\end{code}
\end{Figure}

\begin{Figure}{Eval and apply maps for Haskell to GRIN example}{eval_apply_map}
\begin{code}
evalmap   =  {  #CInt     1  ->  unit
             ;  #CTuple   2  ->  unit
             ;  #P1Tuple  1  ->  unit
             ;  #P2Tuple  0  ->  unit
             ;  #FTuple   2  ->  Tuple
             ;  #Fsnd     1  ->  snd
             ;  #Fmk      2  ->  mk
             }
               
applymap  =  {  #P1Tuple  1  ->  Tuple
             ;  #P2Tuple  0  ->  #P1Tuple
             }
\end{code}
\end{Figure}

The eval and apply functions can be defined as normal GRIN functions. But the
semantics of these functions is used by the compiler to make the heap points-to
analysis more efficient. In order to avoid unnecessary parsing and analysis,
these functions are compactly represented by two special purpose maps, making
the apply and eval functions redundant as far as a GRIN compiler is
concerned.\footnote{Note that the naming convention used here makes the maps
trivial. Future version of GRIN might do without these maps.}

The maps are named the eval- and the applymap. The map representation of the
eval and apply functions of the example are shown in Figure
\ref{eval_apply_map}. Each entry in these maps corresponds with an alternative
of the corresponding case statement. The key of an entry is a tag and the size
of the node represented by that tag. In the evalmap, an F-tag maps to a
function identifier, all other tags map to |unit|. The applymap maps P-tags to
either a new P-tag or a function identifier.


\subsubsection{Example}

Let we continue with the example in Figure \ref{haskell2grin}. The EH version
shows \emph{what} is calculated: first, a partial applied tuple with as first
argument the integer |1|, is applied to the integer |42| via the |mk| function.
Secondly, the second field is selected from the constructed tuple. This field
contains the value |42|.

The GRIN version shows rather \emph{how} the result is calculated. The GRIN
program starts with storing three nodes on the heap. It stores a |Int| value
|1|, a partial application of |Tuple| with as first argument the pointer to the
|Int| value, another |Int| with the value |42|, and finally a |mk| thunk with
the partial application and the second |Int| value as its arguments. The final
statement is a call to the function |snd|, which calculates its result as
follows:

\begin{enumerate}

 \item |snd| evaluates its argument, which is a thunk representing the EH
 expression |mk (Tuple 1) 42|. This thunk is evaluated by calling the function
 |mk|:

\begin{enumerate}

\item |mk| evaluates its argument, which is the partial application |Tuple 1|,
and misses one argument. This node is already in WHNF, thus this value is
simply loaded from memory and stored in the variable |fn|.

\item the partial application is applied to the second argument. This results in
a call to the |Tuple| function. The |Tuple| function returns a node
representing a tuple of its arguments.

\end{enumerate}

\item The result of evaluation is thus a tuple. This tuple is scrutinized in
the case statement of |snd|, which matches the only available alternative. With
the match, the first field of the tuple is bound to the variable |a|, the
second to |b|.

\item The result of |snd| is the evaluation of |b|, the second argument of the
tuple, which is the node |(#CInt 42)|.

\end{enumerate}

The result of |snd| is a node representing the integer |42|. This is also the
last statement of the |main| function, and is thus also the value returned by
the program.

\subsection{Global variables}
\label{globals}

One class of functions is treated special: top-level functions without
arguments, also known as Constant Applicative Forms (CAF). A CAF has the nice
property that its value is constant because it has no arguments. Thus, all CAF
thunks have the same form: an F-node without fields. Because a CAF has no
arguments, all calls to a CAF will result in the same value. Thus, a thunk of a
CAF can be shared throughout the program. In order to do so, CAF thunks are
allocated as global variables before the program starts executing. Any
reference to the CAF thunk goes through that global variable.

Global variables are always pointers to nodes in the heap and cannot contain
other values. Beside the use of global variables to encode thunks of CAFs,
global variables can also be used to pre-build nodes. Nodes which are commonly
used and only contain constant values or pointers to other global nodes can be
pre-build and stored as global variables. This transformation is called common
subexpression elimination. Global variables give the front-end, which performs
the common subexpression elimination, a place to pre-build the common constant
expressions.


\section{Semantics}
\label{semantics}

The operational semantics of GRIN given in this section is copied from the PhD
thesis of Boquist \citep{boquist99phd}. Note that the differences in the syntax
can also also be found in the schematic functions defined in this section.

%format SEM = "\mathcal{A}"
%format EXP = "\mathcal{E}"
%format VAL = "\mathcal{V}"
%format bot = "\perp"
%format sel (i) = "sel_{" i "}"
%format selalt (t) = "selalt_{" t "}"
%format env = "\rho"
%format heap = "\sigma"
%format |-> = "\mapsto{}"


%format env'
%format heap'
%format x1
%format x2
%format xn = "x_{n}"
%format v1
%format vn = "v_{n}"
%format alt1
%format altn = "alt_{n}"
%format e1
%format en = "e_{n}"
%format l1
%format ln = "l_{n}"


\begin{Figure}{Semantic framework, domains and utilities}{semantics:framework}
\emph{Semantic functions:}
\begin{code}
SEM  ::  prog  -> (Value, Store)
EXP  ::  exp  -> Env -> Store -> (Value, Store)
VAL  ::  val  -> Env -> Value
\end{code}

\medskip
\emph{Semantic domains:}
\begin{code}
Value  =  i | t | (t v1 ... vn) | l | () | bot
Env    =  Var -> Value
Store  =  Loc -> Value
\end{code}

\medskip
\emph{Semantic variables:}
\begin{code}
i `elem` Int, t `elem` Tag, l `elem` Loc, v `elem` Value
\end{code}

\medskip
\emph{Syntactic variables:}
\begin{code}
x `elem` var, e `elem` val, m `elem` exp, k `elem` exp, c `elem` tag
\end{code}

\medskip
\emph{Utility functions:}\\
\hspace*{1.6em}
\begin{tabular}{lcp{\textwidth - 17em}}

|sel(i)(v)|  &-& select the |i|:th component of the node value |v| \\

|selalt(t)(alt1...altn)| &-& select one of the alternatives matching the tag
|t|, return the bound variables and the alternative body \\

|newloc| &-& return a new (unused) heap location \\

|getfunction(fun)| &-& find the global function definition |fun|, return its parameters
and body \\

|runexternal(ext, x1...xn)| &-& execute the external operation |ext| with
the arguments |x1...xn|\\

\end{tabular}
\end{Figure}

\subsection{Semantic framework}

Figure \ref{semantics:framework} shows the semantic framework in which the GRIN
semantics is explained. It describes the domains of the semantic functions and
a set of utility functions which are used in the semantic functions.

The semantics is split in three parts. The value semantics (|VAL|); the program
semantics (|SEM|); and the expression semantics (|EXP|). The value semantics is
not much more than the identity function.

The semantic functions use a \emph{store} (|heap|), which maps heap locations
to values; and a \emph{environment} (|env|), which maps variables to values.
The store, together with the utility function |newloc| encodes the heap.

The semantic value domain includes the same values as the syntactic domain. It
includes tags, nodes, pointers, basic values and the empty value. A special
\emph{undefined} value (|bot|) is included. This value is used to signal
``program failure'' but can also occur in normal programs.

Not all values are meaningful in all contexts. Different meta variables are
used to limit the possible values. A |fetch| operation, for example, needs a
pointer (denoted by the meta variable |l|) as its argument. If this is not the
case the semantics of the program is undefined.


\subsection{Value semantics}

\begin{Figure}{GRIN value semantics}{semantics:value}
\begin{code}
VAL  [  (c v1 ... vn)  ]  env  =  (c            VAL [v1] env ... VAL [vn] env)
VAL  [  (x v1 ... vn)  ]  env  =  (VAL [x] env  VAL [v1] env ... VAL [vn] env)
VAL  [  x   ]             env  =  env(x)
VAL  [  i   ]             env  =  i
VAL  [  l   ]             env  =  l
VAL  [  ()  ]             env  =  ()
\end{code}
\end{Figure}

The value semantics is defined by the function |VAL| in Figure
\ref{semantics:value}. The only thing happening in this function is a lookup in
the environment. The rest is simply a identity mapping from the syntactic
domain to value domain.

\subsection{Program semantics}

\begin{Figure}{GRIN Program semantics}{semantics:program}
\begin{code}
SEM  ::  prog  -> (Value, Store)

SEM [  module "name"
       { x1 <- store e1; ...; xn <- store en }
       { ...; main = m; ... } ] =  let  l1 = newloc
                                        ...
                                        ln = newloc
                                        env    = { x1 |-> l1, ..., xn |-> ln }
                                        heap  = { l1 |-> e1, ..., ln |-> en }
                                   in EXP [ m ] env heap
\end{code}
\end{Figure}

The program semantics (|SEM|) is described in Figure \ref{semantics:program}.
This function defines the semantics over the whole program. It creates an
initial store and environment from the global variables and passes them, along
with the body of |main|, to the semantic function |EXP|. The store contain the
nodes defined by the global variable; the environment contains the names of the
global variables. These variables are pointers to the nodes in the store. The
result of the program is the result of the body of the |main| function.


\subsection{Expression semantics}

\begin{Figure}{GRIN expression semantics}{semantics:expression}
\begin{code}
EXP [ m;\p -> k] env heap                 =  let  (v,heap')  =  EXP [m] env heap
                                                  env'        =  env[p |-> v]
                                             in EXP [k] env' heap'

EXP [ case e of alt1 ... altn ] env heap  =
   case VAL [e] env of
     (t v1 ... vn)  ->  let  (x1 ... xn,k)   =  selalt(t)(alt1 ... altn)
                             env'            =  env[x1 |-> v1, ..., xn |-> vn]
                        in EXP [k] env' heap
     t              ->  let  (_,k)  =  selalt(t)(alt1 ... altn)
                        in EXP [k] env heap

EXP[unit e] env heap                      =  (VAL [e] env, heap)
                                           
EXP[store e] env heap                     =  let  l       =  newloc(heap)
                                                  heap'  =  heap [l |-> VAL [e] env]
                                             in (l, heap')
                                           
EXP[update x e] env heap                  =  let  l       =  env(x)
                                                  heap'  =  heap [l |-> VAL [e] env]
                                             in ((), heap')
                                           
EXP[fetch x] env heap                     =  let  l  =  env(x)
                                                  v  =  heap(l)
                                             in (v, heap)
                                           
EXP[fetch x offset] env heap              =  let  l  =  env(x)
                                                  v  =  heap(l)
                                             in (sel(offset)(v), heap)

EXP[ffi fun e1 ... en] env heap           =  let  v1    =  VAL [e1] env
                                                  ...
                                                  vn    =  VAL [en] env
                                             in (runexternal(fun, v1 ... vn), heap)

EXP[fun e1 ... en] env heap               =  let  (x1 ... xn, k) = getfunction(fun)
                                                  v1    =  VAL [e1] env
                                                  ...
                                                  vn    =  VAL [en] env
                                                  env'  =  env [x1 |-> v1, ..., xn |-> vn]
                                             in EXP [k] env' heap
\end{code}
\end{Figure}

The function |EXP|, as defined in Figure \ref{semantics:expression}, describes
the semantics of GRIN expressions. It is not a `pure' function: the
|runexternal| utility function can have side effects not visible in the
semantic function. For example, it can perform read/write operations on files.

\subsubsection{Variable binding}

Binding of variables occurs in several places: in the patterns of the bind
operator between the statements; in the pattern alternatives of a case
statement; and the formals of a function definition and in the definition of the
global variables. All these bindings, except those of global variables, are
local to the function in which they occur.

\subsubsection{bind operator}

The binding which occurs in the patterns of the bind operator can have different
forms. For a single variable the result of a statement is bound to that
variable. When a pattern expresses a complete node each field of the result is
bound to the corresponding variable in the pattern. For example:

>unit(#CCons 2 b); \(#CCons h t) -> ...

The result of the |unit| statement is the node |(#CCons 2 b)|. The pattern
following the |unit| statement results in the bindings |h| to |2| and |t| to
|b|. The tag in the result must match the one in the pattern. If this is not
the case the semantics is undefined.

\subsubsection{Case statement}

A case statement will select one of its alternatives based on the tag of the
node to be scrutinized. One, and only one, alternative must match, or the
program is undefined. 

When the alternative is chosen the fields of the scrutinized node are bound to
the variables of the matching pattern. This works in the same way as the bind
operator. The execution continues with the body of the alternative in question.

\subsubsection{Function calls and ffi}

An important property of function calls is that a function call in GRIN is
\emph{always} to some globally (compile time) known function. When all
functions are known, \emph{inter-procedural register allocation} and aggressive
inling can be performed which result in better code quality.

A function call binds the actuals to the formals of the called function,
executes its body and continues with the statement following the call.

A |ffi| statement is like a function call but to a function outside GRIN.
This can be a primitive (which always start with \verb|prim|), or to some
function defined in a foreign language (for example C).

\subsubsection{Built-in monadic operations}

There are several monadic operations: |unit|, |store|, |fetch| and |update|.
The $unit$ operation is used to construct nodes. When it is the last statement
this node is returned by the function. Otherwise the constructed node is bound
to the pattern which follows it.

The |store| operation allocates space on the heap and stores the node passed to
it. The allocated location is returned.

The |fetch| operation does the reverse of |store|. It takes a location and
returns the node which is stored in that location. If an |offset| is given,
only that field will be fetched from memory and returned. With an |offset| of
zero the tag of the node in memory is returned.

The |update| operation overwrites memory locations with new nodes. Its only
effect is its side effect and it returns an empty value.
