\chapter{Transformations}
\label{transformations}

The GRIN compiler uses compilation by transformation \citep{jones96compiling}.
A set of transformations, each small and easy to verify, is used to optimize
and compile the code. Currenlty, only a subset of the transformations described
in the Ph.D. thesis of Boquist \citep{boquist99phd} is implemented and no other
transformations than those described by Boquist are implemented. Instead of
copying the descriptions of those transformations from Boquist's thesis in this
Chapter, we describe which transformations are implemented and refer to
Boquist's thesis for the actual description.

\section{Overview}

Transformations on GRIN porgrams come in two flavors: 

\begin{itemize}

\item simplifying transformations

\item optimizing transformations. 

\end{itemize}

The simplifying transformations remove syntactic sugar from GRIN. These
transformations bring GRIN code into a very simple form, which is used as the
input of the code generator. These transformations are mandatory: the code
generator does not work without them.

The optimizing transformations are optional transformations. They change the
representation of a program into a more efficient form. More efficient in this
context means: smaller executables, less memory usage, shorter run time, or a
combination of these factors.

Each transformation is implemented as a separate attribute grammer (AG) in a
seperate file. Currently, most of the transformations have a fixed ordening, in
particular simplifying transformations which work only on special forms of
GRIN. The ordening of the transformations implemented within the GRIN compiler
are shown in Figure \ref{trans:overview}.

\begin{Figure}{Overview of GRIN transformations}{trans:overview}
\includegraphics{trans_overview}
\end{Figure}


\section{Simplifying transformations}

\begin{description}

\item[inline eval and apply]

The inlining of |apply| is exactly the same as described in Boquist's thesis.
The inlining of |eval| uses a different version of the |eval| function than the
one uses by Boquist. The |eval| function described by Boquist contains an
update statement after the case statement (page 85 of Boquist's thesis).
Likely, this choice is made to be able to specialise the update statement later
on (page 90 of Boquist's thesis).  However update specialisation is not used in
our implementation yet, and thus is not needed. Our version of the |eval|
function is thus the original version, extended with exception support as show
in Figure \ref{eval_with_exceptions} on page \pageref{eval_with_exceptions}.

\item[Vectorisation and Case simplification]

The vectorisation and case simplification transformations have a fixed order:
vectorisation changes node variables into a set of variables which introduces a
variable to hold a tag. The case simplification then translates a case which
scrutinizes such a set of variables, into a case which scrutinizes a tag
variable. The transformations are easily combined into a single pass without
losing readability.

\item[Split and right hoist fetch operations]

The split fetch operations is implemented without taking into account the
returning fetch operations described by Boquist. This situation does not occur
in our implementation, as the transformations which lead to this situation are
not implemented.

The right hoist fetch operations transformation is implemented, as described by
Boquist, together with the split fetch operations transformation in a single
pass.

\end{description}


\section{Optimizing transformations}

\begin{description}

\item[Copy propagation]

Copy propagation is used to remove the unit statements which are inserted by
the normalisation of the code for HPT (Section \ref{hpt:normalizing}). It is
implemented as described by Boquist with one difference: the \emph{right unit
law} is not applied if it is preceded by a try-catch statement. This prevents
the copy propagation to make the try-catch statement the last statement of a
function body (Section \ref{exceptions:compiling2grin}).

\item[Trivial case elimination and sparse case optimisation]

The trivial case elimination and sparse case optimisation are implemented as
described by Boquist.

\item[Dead code elimination]

Dead procedures elimination and the dead variables elimination is implemented.
In our case the dead variable eliminations also includes the elimination of
dead try-catch statements and the elimination of code after a throw statement.
The HPT result records for each try-catch statement whether the handler will
ever receive an exception. If this is not the case, the try-catch statement is
replaced by the guarded statements. 

The GRIN compiler uses a call-graph to find the dead procedures. As a bonus,
the compiler can output this graph to a file, which can be used by
graphviz\footnote{http://www.graphviz.org/} to generate a picture from like the
one seen in figure \ref{call-graph}.

\end{description}

\begin{Figure}{Call graph of running example}{call-graph}
\includegraphics{call-graph}
\end{Figure}

\section{Miscellaneous transformations}

\begin{description}

\item[cleanup]

The cleanup transformation is not described by Boquist. It is a `glue'
transformation which translates the EHC generated GRIN code into code which
our GRIN compiler expects. The following constructs are translated:

\begin{itemize}

\item the generic eval and apply functions are dropped (grinc uses the eval-
and applymap);

\item a global variable is added for each CAF;

\item the catch and throw foreign functions are rewritten to the catch and
throw statements;

\item P-nodes which represent partial applications missing zero arguments are
rewritten to F-nodes (a bugfix of EHC).

\end{itemize}

All transformations done by this pass should be part of EHC and are only
implemented in the GRIN compiler temporarily.

\item[number identifiers and name identifiers]

Internally the GRIN compiler uses numbers. This allows the implementation to
use constant time lookups of identifiers during the HPT analysis and while
accessing the HPT result. The number identifiers transformation translates the
names into numbers, the name identifiers transformation does the reverse.

\item[bind normalisation]

The bind normalisation transformation is currently only needed for the eval and
apply inlining which is the only transformation to replace a single statement
with multiple statements.

\end{description}
