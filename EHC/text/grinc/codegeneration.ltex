\chapter{Code generation}

The last phase of the GRIN compiler is code generation. Before the start of
this phase the GRIN program is transformed by the simplifying transformations
into \emph{low-level} GRIN. Code generation is about tranforming this low-level
GRIN is into \cmm{}, a portable assembly language designed by Peyton Jones
et.al. \citep{jones98portable,jones99portable}. Once the \cmm{} code is
generated, the GRIN compiler is finished and the \cmm{} compiler is left the
delicate task of instruction selection and register allocation.

This chapter describes the low-level form of GRIN, the \cmm{} language and the
transformation of low-level GRIN to \cmm{}.


\section{Low-level GRIN}

After all simpifying transformations are applied to a GRIN program, the program
is in low-level normal form. In this form each GRIN operation corresponds to a
single, or a few, \cmm{} instructions. Code generation is, because of this, a
straightforward transformation.

In low-level GRIN, both |eval| and |apply| functions are inlined. Initially,
these functions where partly built-in, partly represented by the eval and apply
maps. The inlining of the calls to |eval| and |apply| make all function calls
visible in the code; the eval and apply maps are not needed anymore.

All variables containing entire node values have been split into multiple
variables, only variables containing pointers, tags or basic values remain.
These values are big enough to be stored in a single register.

The |fetch| operations use offsets and load only a single field or tag. Each
|fetch| operation on a field is also annotated with the tag of the node that
the field is part of.

GRIN case statements scrutinise only tag values and bind no variables. The
alternatives of a case expression are required be \emph{exhaustive}, i.e. a
case expression must have an alternative which matches the scrutinised value.

The running example translated into low-level GRIN is shown in figure
\ref{llg:example}. The long identifiers are the result of the various
transformations which introduced new variables or splitted a single variable
into multiple variables.

%format . = "."

\begin{Figure}{Low-level GRIN example}{llg:example}
%{
%format fetch (tag) = fetch "_{" tag "}"
%format notag = "{}"
\begin{code}
module "example"
  {  main_caf <- store (#Fmain)
  } 
  { Tuple x1 x2  =  {  unit (#CTuple x1 x2)
                    }
  ; snd t        =  {  fetch notag t 0; \t.27.38 ->
                       case t.27.38 of
                         {  #CTuple  ->  {  fetch(#CTuple) t 1; \t.27.40.63 ->
                                            fetch(#CTuple) t 2; \t.27.41.62 ->
                                            unit (t.27.38 t.27.40.63 t.27.41.62)
                                         } 
                         ;  #Fmk     ->  {  fetch(#Fmk) t 1; \t.27.40.66 ->
                                            fetch(#Fmk) t 2; \t.27.41.65 ->
                                            mk t.27.40.66 t.27.41.65; 
                                              \(t.30.42 t.30.44 t.30.45) ->
                                            update t (t.30.42 t.30.43 t.30.44 t.30.45);
                                               \() ->
                                            unit (t.30.42 t.30.44 t.30.45)
                                         }
                         }; \(_ _ tn.49) ->
                      fetch(#CInt) tn.49 1; \_69 ->
                      unit (#CInt _69)
                    }
  ; mk f x4      =  {  fetch(#P1Tuple) f 1; \f.35.58 ->
                       Tuple f.35.58 x4
                    }
  ; main         =  {  store (#CInt 1); \s1 ->
                       store (#P1Tuple s1); \s2 ->
                       store (#CInt 2); \s3 ->
                       store (#Fmk s2 s3); \s4 ->
                       snd s4
                    }
  }
\end{code}
%}
\end{Figure}

\section{\cmm}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%% C-- Formatting %%%%%%%%%%%%%%%%%%%%%%%%

%include c--.fmt

A \cmm{} compiler does what all compilers need to implement, but which is
difficult to implement: it generates machine code. The \cmm{} compiler does
instruction selection, register allocation, instruction scheduling, and
optimization of imperative code with loops.

\cmm{} is designed to be a target for compilers, also called clients. \cmm{}
gives its client the freedom to implement a runtime model which suits the
client best by providing a run-time interface to \cmm{}. This interface can be
used to design run-time services for the client language, for example garbage
collection or exception handling. A few highlights of \cmm{} are:

\begin{itemize}

\item guaranteed tail calls; 

\item procedures which return multiple results in registers; 

\item stack cutting or unwinding by program code or through the run-time
interface;

\item linking data to parts of the program code, which can be used at run-time
to pass information about the current point of execution to the run-time
system.

\end{itemize}

\cmm{} is designed to be portable. It hides architecture dependent details,
such as the number of registers. But portability does not mean write once, run
everywhere. Some properties of the architecture are exposed, for example the
byte order and native word size. Encapsulating all details of a machine, like
the Java Virtual Machine does, may, depending on the client language, impose a
significant penalty in both space and time.

This section describes a subset of \cmm{}. A complete overview of \cmm{} can be
found on its website \citep{c--}.

\subsection{Syntax and semantics}

The syntax of \cmm{} is shown in the figures \ref{c--:syntax} and
\ref{c--:syntax2}. It is a simplified version of \cmm{}. The symbol ``$?$'' in
the figures denotates one or zero occurences, and ``$\#$'' denotates zero or
more occurences. The symbols ``$*$'' and ``$+$'' denotate respectively zero or
more and one or more occurences, separated by commas.

A file with \cmm{} source code is called a compilation unit. Such a compilation
unit consists of a sequence of data sections, declarations, and procedures.
Data sections consist of initialized or uninitialized data and labels to that
data.  Declarations can be type declarations, imported and exported names,
constants, global registers, or a target declaration which describes the
expected machine architecture of the compilation unit. All code is part of some
parameterized procedure, which is defined at the top level of a compilation
unit. Procedures have a fixed number of arguments and can return multiple
values. Names of procedures and labels to data are visible through the whole
compilation unit.

Variables in \cmm{} are called registers. Registers have no address, and
assigning to one cannot change the value of another. Registers may be local to
a procedure or global to the program. Global registers are shared by all \cmm{}
procedures.

Procedures can define which calling convention must be used. Which conventions
are available is up to the compiler, but \cmm defines two calling conventions
which should always be available: 

\begin{itemize}

\item the ``\cmm{}'' calling convention, which is the native calling
convention. It allows tail calls and multiple return values in registers;

\item the ``C'' calling conventions, which allows interaction with C.

\end{itemize}

The entry point of a \cmm{} program is the procedure named |main|. This
procedure is parameterized with two registers, returns one register and has the
``C'' calling convention.

\begin{Figure}{Simplyfied syntax of \cmm{}, part 1}{c--:syntax}
\[
\begin{array}{lcll}
unit     & ::= & toplevel\#                                                  & \mbox{compilation unit}      \\
\\
toplevel & ::= & \mathbf{section}\ "data"\ \{\ datum\#\ \}                   & \mbox{data section}          \\
         & ||  & decl                                                        \\ 
         & ||  & procedure                                                   \\ 
\\
datum    & ::= & name :                                                      & \mbox{label}                 \\
         & ||  & type\ size?\ init?\ ;                                       & \mbox{data}                  \\
\\
size     & ::= & [ expr? ]                                                   \\
\\
init     & ::= & \{ expr+ \}                                                 & \mbox{initialization list}   \\
         & ||  & string                                                      & \mbox{initialization string} \\
\\
decl     & ::= & \multicolumn{2}{l}
                 {\textbf{target}\ \textbf{byteorder}\ (\textbf{little}||\textbf{big})\ \textbf{memsize}\ int} \\
         &     & \quad \textbf{pointersize}\ int\ \textbf{wordsize}\ int\ ;  & \mbox{target machine}        \\
         & ||  & \textbf{import}\ string\ \textbf{as}\ name\ ;               & \mbox{import name}           \\
         & ||  & \textbf{export}\ name\ \textbf{as}\ string\ ;               & \mbox{export name}           \\
         & ||  & \textbf{const}\ type?\ name\ =\ expr\ ;                     & \mbox{constant}              \\
         & ||  & \textbf{typedef}\ type\ name\ ;                             & \mbox{type definition}       \\
         & ||  & registers\ ;                                                \\
\\
registers  & ::= & type\ name+                                               & \mbox{variable declaration}  \\
\\
procedure  & ::= & name(formal*)\ \{\ bodyElem\#\ \}                         & \mbox{procedure defintion}   \\
\\
formal     & ::= & type\ name                                                & \mbox{formal argument}       \\
\\
bodyElem     & ::= & decl                                                    \\                            
             & ||  & stackdecl                                               \\                            
             & ||  & statement                                               \\                            
\\
stackdecl    & ::= & \textbf{stackdata}\ \{\ datum\#\ \}                     & \mbox{stack reservation}     \\
\\
statement    & ::= & \textbf{if}\ expr\ \{\ bodyElem\#\ \}\                  \\                            
             &     & \textbf{else}\ \{\ bodyElem\#\ \}                       & \mbox{if}                    \\
             & ||  & \textbf{switch}\ expr\ \{\ arm\#\ \}                    & \mbox{switch}                \\
             & ||  & lvalue+\ =\ expr+\ ;                                    & \mbox{assignment}            \\
             & ||  & name+\ =\ conv?\  name(expr*)\ flow*\ ;                 & \mbox{procedure call}        \\
             & ||  & conv?\ \textbf{jump}\ name(expr*)\ ;                    & \mbox{tail call}             \\
             & ||  & \textbf{return}\ (expr*)\ ;                             & \mbox{return results}        \\
             & ||  & name\ :                                                 & \mbox{control label}         \\
             & ||  & \textbf{goto}\ name\ ;                                  & \mbox{goto control label}    \\
             & ||  & \textbf{continuation}\ name(name*)\ :                   & \mbox{continuation label}    \\
             & ||  & \textbf{cut to}\ expr(expr*)\ flow*\ ;                  & \mbox{cut to continuation}   \\
\end{array}
\]
\end{Figure}

\begin{Figure}{Simplyfied syntax of \cmm{}, part 2}{c--:syntax2}
\[
\begin{array}{lcll}
arm          & ::= & case\ expr+\ :\ \{\ bodyElem\#\ \}                      & \mbox{switch alternative}    \\
\\
lvalue       & ::= & name                                         & \mbox{register}                   \\
             & ||  & type [ expr ]                                & \mbox{memory reference}           \\
\\
flow        & ::= & \textbf{also cuts to}\ name+                  & \mbox{cut to current activation}  \\
            & ||  & \textbf{also aborts}                          & \mbox{cut to deeper activation}   \\
            & ||  & \textbf{never returns}                        & \mbox{procedure never returns }   \\
\\
conv        & ::= & \textbf{foreign}\ string                      & \mbox{calling convention}         \\
\\
expr        & ::= & int                                           & \mbox{integer literal}            \\
            & ||  & 'char'                                        & \mbox{character literal}          \\
            & ||  & name                                          & \mbox{register}                   \\
            & ||  & type [ expr ]                                 & \mbox{memory reference}           \\
            & ||  & ( expr )                                      & \mbox{paranthesis}                \\
            & ||  & \%name ( expr* )                              & \mbox{primitive operation}        \\
\\
type       & ::= & \textbf{bits}N                                 & \mbox{primitive type}             \\
           & ||  & name                                           & \mbox{named type}                 \\
\\
string     & ::= & "char\!*"                                      & \mbox{string}                     \\
\end{array}
\]
\begin{tabular}{ll}
$?$       & means zero or one \\
$\#$      & means zero or more \\
$*$       & means zero or more, separated by commas (,) \\
$+$       & means one or more, separated by commas (,) \\
\end{tabular}
\end{Figure}


\subsubsection{Types, registers and memory}

Registers in \cmm{} have types. These types denote only the register size,
like: |bits32 p| for a 32 bits register named |p|. Common sizes can be given
names by the type definition statement. A boolean type, for example, can be
defined by |typedef bool bits1|.

Loading and storing in memory is done by specifying a size and a memory
location.  For example: |bits8[p]| loads one byte from the memory location
whose address is stored in the variable |p|.

\subsubsection{Expressions}

Expressions consist of names, memory references, primitive operations, and
literal values. Names are either names of registers or of link time constants.
Link time constants are all labels, constant declarations, imported names, or
function names.

Primitives are operations on registers and can be used to construct new values,
like addition (|%add|), multipy (|%mul|), and modulo (|%mod|) but also cover
comparison of values, like equality (|%eq|) and constants, like true (|%true|).
Primitives are free of side effects: they do not change memory, registers, or
program flow.


\subsubsection{Statements}

A procedures consists of a sequence of statements which manipulate registers and
memory. Assignments in \cmm{} are \emph{multiple assignments}; The values at
the right-hand side and the addresses at the left-hand side are computed before
the assignments are made. The types of each left-hand value must match the
right hand value. An example statement which swaps a value in memory with a
register:

>bits32[p], x = x, bits32[p];

Control flow within procedures is influenced by if statements, switch
statements and goto statements. An if statement needs an expression of type
|bits1| and chooses the first body or second body depending on whether the bit
is set or unset respectively. A switch statement is much like the if statement,
but chooses a body based on the bit patterns defined in each alternative. When
one of the patterns of an alternative matches that alternative is executed.
Unlike in C, ``fall through'' between alternatives is not possible.

A control label can be used to change the control flow \emph{within}
procedures. A control label marks a point in the procedure. The label can be
jumped to by the goto statement, but only if the goto statement and the label
are enclosed by the same procedure.

A procedure call is not an expression, but a statement. It calls the named
procedure with the arguments and saves the returned values in \emph{result
registers}. The result registers are the registers at the left hand side of the
equation sign. The number of result registers must match the number of values
returned by the call.

Calling a procedure creates an \emph{activation}. The activation hold the
values of the procedure's paramters and local registers. An activation dies
when the function returns with a return statement or a cut to statement. A tail
call replaces the current activation by an activation of the called procedure.

Continuations are labels which can be used to change the control flow
\emph{between} procedures. The label marks a point in the procedure and
optionally marks registers to be used as parameters. The label name represents
a value that marks this point and the current activation. This value is first
class and from the native pointer size. The label is valid as long as the
activation in which it is defined is alive. The control must never fall through
a continuation label, they can only be accessed by a cut to statement.

A cut to statement jumps to the activation and location marked by a
continuation label and passes the paramters along. All activations newer than
the activation of the continuation are destroyed in the process.

The stackdata statement reserves uninitialized data on the stack. The reserved
space is availible until the activation of the enclosing procedure dies.

\subsubsection{Flow annotations}

Procedure calls and cut to statements are annotated with flow information. This
information informs the \cmm{} compiler which continuations a procedure call or
cut to statement might cut to. Continuations defined in the same procedure as
the procedure call or cut to statement are recorded with the ``also cut to''
annotation; continuations in older activations are annotated with the ``also
aborts``. Furhtermore, a procedure call might be annotated with ``never
returns'' when the procedure call never returns by a return statement. If a
procedure call or a cut to statement is not annotated, the ``also aborts''
annotation is assumed.


\section{Transforming GRIN to \cmm{}}

The code generator is quite simple. In fact, most of low-level GRIN maps one to
one to \cmm{}. Once \cmm{} is created the GRIN compiler is finished. Any
optimisation on \cmm{} code is done by the \cmm{} compiler. 

In this section we describe how the various GRIN values and constructs are
represented in GRIN. The following aspects are discussed:

\begin{itemize}

\item representation of GRIN nodes and tags;

\item representation of GRIN functions;

\item representation of GRIN statements;

\item flow annotations for exceptions.

\end{itemize}

The running GRIN example represented in \cmm{} is shown in the figures
\ref{c--:example} and \ref{c--:example2}.

The code generator must take care of a few machine dependent aspects of \cmm{}.
Memory access and allocation is such an aspect. The GRIN compiler uses one size
for each type of value; integers, pointers and tags are all of the native
pointer size of the target machine. Currently this is only the x86
architecture. The size of a grin value can be calculated based on the pointer
size and word size of the machine, on x86 architectures this is 32 bits and 8
bits respectively. Throughout this chapter we shall use the term word for the
size of a grin value, rather than the machine word size. For the x86
architecture the grin word is equal to 4 machine words. All \cmm{} code in this
Section is given for the x86 architecture and refers to a word with the type
|grWord|.

%from here until the end of the Chapter we set the indent to zero:
{
\mathindent=0.25em

\begin{Figure}{Example \cmm{} program, part 1}{c--:example}
\savecolumns
\begin{code}
target memsize 8 byteorder little pointersize 32 wordsize 32;

typedef bits32 grWord;
grWord eh;

import  "GC_malloc"  as   alloc;
export  grin_main    as  "grin_main";

const grWord Fmain    = 4;
const grWord Fmk      = 3;
const grWord P1Tuple  = 2;
const grWord CTuple   = 1;
const grWord CInt     = 0;

section "data"  {  GlobalNodes:
                   main_caf: grWord[5] { Fmain, 0, 0, 0, 0 };
                   GlobalNodesEnd:
                }

section "data"  {  TAGInfoTable:
                   grWord[1] { 1 };
                   grWord[1] { 2 };
                   grWord[1] { 1 };
                   grWord[1] { 2 };
                   grWord[1] { 0 };
                }

grin_main() {
  grWord _, result;
  _, result = main();
  return (result);
}

main() {
  grWord _;
  grWord s1;
  s1 = foreign "C" alloc(20);
  grWord[s1], grWord[%add(s1,4)] = CInt, 1;
  grWord s2;
  s2 = foreign "C" alloc(20);
  grWord[s2], grWord[%add(s2,4)] = P1Tuple, s1;
  grWord s3;
  s3 = foreign "C" alloc(20);
  grWord[s3], grWord[%add(s3,4)] = CInt, 2;
  grWord s4;
  s4 = foreign "C" alloc(20);
  grWord[s4], grWord[%add(s4,4)], grWord[%add(s4,8)] = Fmk, s2, s3;
  jump snd(s4);
}
\end{code}
\end{Figure}

\begin{Figure}{Example \cmm{} program, part 2}{c--:example2}
\restorecolumns
\begin{code}
Tuple(grWord x1, grWord x2) {
  grWord _;
  return (CTuple,x1,x2);
}

snd(grWord t) {
  grWord _;
  grWord t.27.38;
  t.27.38 = grWord[t];
  grWord tn.49;
  switch t.27.38 {
    case CTuple: {
      grWord t.27.40.63;
      t.27.40.63 = grWord[%add(t,4)];
      grWord t.27.41.62;
      t.27.41.62 = grWord[%add(t,8)];
      _, _, tn.49 = t.27.38, t.27.40.63, t.27.41.62;
    }
    case Fmk: {
      grWord t.27.40.66;
      t.27.40.66 = grWord[%add(t,4)];
      grWord t.27.41.65;
      t.27.41.65 = grWord[%add(t,8)];
      grWord t.30.42, t.30.44, t.30.45;
      t.30.42, t.30.44, t.30.45 = mk(t.27.40.66,t.27.41.65);
      grWord[t], grWord[%add(t,4)], grWord[%add(t,8)] =  t.30.42 , t.30.44 , t.30.45;
      _, _, tn.49 = t.30.42, t.30.44, t.30.45;
    }
  }
  grWord _69;
  _69 = grWord[%add(tn.49,4)];
  return (CInt,_69);
}

mk(grWord f, grWord x3) {
  grWord _;
  grWord f.35.58;
  f.35.58 = grWord[%add(f,4)];
  jump Tuple(f.35.58,x3);
}
\end{code}
\end{Figure}
}

%from here until the end of the Chapter we set the indent to zero:
{
\mathindent=0in

\subsection{Exceptions}

GRIN exceptions are modelled in \cmm{} with the use of \cmm{} continuations.
Each try-catch statement introduces a continuation label to the start of the
code of the exception handler. As long as the exception handler is active, the
continuation label is stored in the \emph{exception handler register}, named
|eh|. A throw statement is expressed by rewinding the stack with a |cut to|
statement to the label stored in the exception handler register.

\cmm{} needs flow annotations on how the control changes if the stack is
rewinded. Flow annotations are needed on |cut to| statements and function
calls. Flow annotations are of the form |also cuts to name|, in which |name| is
a continuation label which is defined in the same \cmm{} procedure as the
annotated statement. Thus an annotated statement must record which local
defined exception handler it might activate. This is always the innermost
try-catch statement. The tracking of the continuation label of the innermost
try-catch statement is shown in Section \ref{g2c--:statements} when discussing
the transformation of GRIN statements. An example of \cmm{} code with flow
annotations is given in Appendix \ref{exexample}.

\subsection{Nodes and tags}

GRIN makes two assumptions on the implementation of nodes and tags:

\begin{itemize}

\item the representation of each GRIN tag must be \emph{unique};

\item extracting the tag and each field from a node value must be fast.

\end{itemize}

An unique tag allows a node in memory to be uniquely identified. This
requirement is not neccessarily needed: tags must only be unique at each case
statement\footnote{this implies a certain uniqueness of tags stored in memory
which is sufficient for garbage collection.}. However, program wide unique tags
simplify accurate garbage collection.

The code generator assigns unique numbers to tags in the program, in the order
of appearance. For readability, a constant is created with the same name as the
tag which represents an unique number:

\[
\code{|#Tag|} \mapsto |const Tag = uniq|
\]

The ordening of the tag numbers does influences the code quality: a case
statement can be implemented efficiently when the tags listed in the
alternatives are numbered without gaps. For example a case with the tags 1, 2,
3, and 4 can be implemented more efficiently than a case with the tags 1, 7,
11, and 14. A possible optimisation is to analyse the case statements and
choose a numbering so that the numbers of the tags within each case are as
close to each other as possible.

To extract the tag or a field from a node is needed for efficient
implementation of the fetch and update statements. A typical Haskell program
will translate to a GRIN program with many fetch and update statements. Thus it
is very important that these statements can be implemented to run as fast as
possible.

To implement the second requirement, the layout of nodes in memory is simple
(Figure \ref{c--:node-layout}). A node in memory is always 5 words big, this is
called the \emph{base part} of the node. The tag and up to 3 fields are stored
in the base part. The last word of the base part is reserved for a pointer
which, when the node has more than 3 fields, points to the \emph{extended part}
of the node. The extended part of a node consist of just enough memory to store
the additional fields of a node with more than 3 fields. This node layout
supports updating a small node with a large node while keeping the original
pointer to the node unchanged.

\begin{Figure}{Node layout}{c--:node-layout}
\center
\includegraphics{node-layout}
\end{Figure}

The node layout wastes precious memory: nodes with 4 fields are stored
inefficiently. But the layout is choosen to keep the implementation of the GRIN
compiler simple. A more conservative node layout is possible, but needs
transformations not yet implemented in the GRIN compiler.

\subsubsection{Global variables}

Global variables and the nodes they point to are represented by labels and
values of a data section respectively. This data section is conform the node
layout. The global variables are translated as follows:

%format yp = "y_{p}"
%format vm = "v_{m}"

\begin{eqnarray*}
\Code{
\begin{array}{l}
|x1 <- store (#Tag1 v1 ... vm);|\\
|...|\\
|xn <- store (#Tag2 y1 ... yp);|\\
\end{array}
} & \mapsto &
\begin{minipage}{10cm}
\begin{code}
section "data" {
  x1      : grWord[5]  {Tag1, v1, ... v3, x1.big}
  x1.big  : grWord[]   {v4, ... vm}
  ...
  xn      : grWord[5]  {Tag2, y1, ... yp, 0, ...}
}
\end{code}
\end{minipage}\\
\mbox{with $m \geq 4$, $p < 4$}
\end{eqnarray*}

The node pointed to by |x1| has more than 3 fields and is split in two in the
data section. The node pointed to by |xn| is smaller than 4 fields, and is
padded with zeros to fill the 5 words value.


\subsection{Functions}

GRIN functions can have multiple statements on the return spine. For example, a
GRIN function which returns a Haskell value of the type |Maybe Int| can return
|(#CNothing)| or |(#CJust p)|. These values are represented in low-level GRIN
with one or two values, respectively. Thus, a GRIN function can return a
variable number of values.

A \cmm{} procedure cannot vary in the numbers of returned values: the call side
of a \cmm{} procedure must match the number of values returned by that
procedure. To create a mapping of GRIN function to \cmm{} procedures we must
ensure that a GRIN function returns a fixed number of values. To this end, the
code generator maintains a map from function name to the maximum number of
values returned. This map is used by the statements at the return spine to pad
the number of returned values.

Each GRIN function is translated into a \cmm{} procedure and a variable
definition. This variable has the same purpose as the wildcard found in GRIN
patterns and is denoted by an underscore (|_|).

\[
\code{|foo x1 ... xn = e|} \mapsto |foo(x1, ..., xn) { grWord _;| \code{e}\ \mbox{`'}\ () |}|
\]

\subsection{Statements}
\label{g2c--:statements}

GRIN statements have two representations in \cmm{}, one when the statement
occurs on the return spine, and one when the statement does not. The
translation rules are described by:

\[
\code{|e|}\ n\ p \mapsto |c|
\]

This rule will translate the GRIN statement |e| to the \cmm{} code |c|.
Patterns in GRIN are translated to a list of target registers, which is
represented above by the variable |p|. The target registers represent in which
registers the result of the statement must be stored. When |()| is passed as
register pattern, the statement is on the return spine. The different forms of
register patterns are generated by the GRIN sequence operator.

The variable |n| in the translation rules represent an active locally defined
try-catch statement.  This variable can be either empty (`'), when no try-catch
statement is active in the current GRIN function or hold the name of the
continuation label which should be added as annotation to a |cut to| statement
or function call. All rules ignore this value, except those who tranform a
|throw| statement or function call.

\subsubsection{Sequence}

The GRIN sequence operator translates a GRIN pattern into target registers, and
generates \cmm{} code which defines these patterns. Tag literals and wildcards
in a GRIN pattern are translated to the \cmm{} register |_|, which is defined
at the top of each procedure. An empty GRIN pattern, denoted by |()|, is
translated into an empty list of target registers.

\begin{eqnarray*}
\code{|e; \x -> b|}\ n\ p                & \mapsto & |grWord x;|     \\
                                         &         & \code{e}\ n\ x  \\
                                         &         & \code{b}\ n\ p  \\
\\
\code{|e; \() -> b|}\ n\ p               & \mapsto & \code{e}\ n\ \{\} \\
                                         &         & \code{b}\ n\ p    \\
\\
\code{|e; \(Tag x1 ... xn) -> b|}\ n\ p  & \mapsto & |grWord x1, ..., xn;|              \\
                                         &         & \code{e}\ n\ \{\_, x_1, ..., x_n\} \\
                                         &         & \code{b}\ n\ p                     \\
\\
\code{|e; \(t x1 ... xn) -> b|}\ n\ p    & \mapsto & |grWord t, x1, ..., xn;|           \\
                                         &         & \code{e}\ n\ \{t, x_1, ..., x_n\}  \\
                                         &         & \code{b}\ n\ p
\end{eqnarray*}

\subsubsection{Unit}

The unit statement translates into an assignment of registers, constants, and
literals to the target registers. When the statement occurs on the return
spine, a return statement is genereted instead.

\begin{eqnarray*}
\code{|unit (Tag x1 ... xn);|}\ n\ \{y0, ..., yn \} & \mapsto & |y0, ..., yn = Tag, x1, ..., xn;| \\
\\
\code{|unit x;|}\ n\ y & \mapsto & |y = x;| \\
\\
\code{|unit (Tag x1 ... xn);|}\ n\ () & \mapsto & |return (Tag, x1, ..., xn);| \\
\\
\code{|unit x;|}\ n\ () & \mapsto & |return (x);|
\end{eqnarray*}

\subsubsection{Update}

The update statement must update the node in memory. A node with more than 3
fields is split in a base part and a extended part. The extended part is
allocated by the update statement, if it is needed. The base part of a node
holds upto 3 fields, so the amount of memory needed is $fieldcount - 3$ words,
where $fieldcount$ is the number of fields of the node.

The assignments to memory are emitted as shown below. The variable |_| is used
to hold the newly allocated extended part of the node while the update is in
progress.

\begin{eqnarray*}
\code{|update x (Tag, x1, ... xn)|}\ n\ \{\} & \mapsto & 
\begin{minipage}[t]{10cm}
\begin{code}
_ = alloc(4 * (n-3));
grWord[x],
grWord[%add(x, 4)],
...,
grWord[%add(x, 16)]       =  Tag, x1, ..., _;
grWord[_],
grWord[%add(_, 4)],
...,
grWord[%add(_, (n-4)*4)]  =  x4, x5, ..., xn;
\end{code}
\end{minipage}
\end{eqnarray*}

The above transformation is for the update of a node with more than 3 fields.
If a node contains less fields, the first and the last of the three statements
above are not emitted.

\subsubsection{Store}

A store statement is similar to the update statement. The only diffenrence is
that the store statement does also allocates the base part. Store is
implemented as an allocation of 5 words, the base part, after which the same
code as the update statement is emitted.

\begin{eqnarray*}
\code{|store node|}\ n\ x & \mapsto & |x = alloc(20);| \code{|update x node|}\ n\ \{\}
\end{eqnarray*}

\subsubsection{Fetch}

A fetch statement loads the tag or a field of a node from memory. Depending on
the offset given to fetch, a field from the base part, or from the extended
part is loaded. To load a field from the extended part, the fetch statement
must first load the pointer to the extended part from the base part, and then
load the field from memory. 

%{
%format fetch (tag) = fetch "_{" tag "}"
%format notag = "{}"
\begin{eqnarray*}
\code{|fetch(#Tag) p small|}\ n\ f   & \mapsto & |f = grWord[%add(p, small*4)];| \\
\code{|fetch(#Tag) p small|}\ n\ ()  & \mapsto & |return (grWord[%add(p, small*4)]);| \\
\code{|fetch(#Tag) p big|}\ n\ f     & \mapsto &
\begin{minipage}[t]{10cm}
\begin{code}
_  =  grWord[%add(p, 16)] 
f  =  grWord[%add(_, (big-4)*4)];
\end{code}
\end{minipage} \\
\code{|fetch(#Tag) p big|}\ n\ ()    & \mapsto &
\begin{minipage}[t]{10cm}
\begin{code}
_  =  grWord[%add(p, 16)] 
return (grWord[%add(_, (big-4)*4)]);
\end{code}
\end{minipage} \\
\multicolumn{2}{l}{\mbox{where |0 < small <= 3| and |big > 3|}} & 
\end{eqnarray*}
%}

\subsubsection{Case}

The GRIN case statment in low-level form is semantically equivalent to a \cmm{}
switch statement. The transformation is thus only a syntactical rewrite.

%{
%format T1
%format TN = "T_{N}"
\[
\Code{
\begin{minipage}{6em}
\begin{code}
case x of
    T1  ->  e1
    ...
    TN  ->  en
\end{code}
\end{minipage}
}\ n\ p \quad \mapsto
\begin{array}{l}
|switch(x) {|                             \\
\quad|case T1:| \{\ \code{e_1}\ n\ p\ \}  \\
\quad|...|                                \\
\quad|case TN:| \{\ \code{e_n}\ n\ p\ \}  \\
|}|
\end{array}
\]
%}

\subsubsection{Try-catch}

The try-catch statement is the most complex statement. The code generator emits
code which does the following:

\begin{enumerate}

	\item save the current exception handler;
	
	\item install the new exception handler;
	
	\item execute guarded code;

	\item restore the saved exception handler.

\end{enumerate}

In addition, the code generator emits code for the new exception handler. This
code starts with a continuation label. The scope of a label in \cmm{} is the
procedure body, which gives freedom in the location of the code for the
exception handler. The transformation given here emits the exception handler
directly after the code which restores the saved exception handler. The actual
implementation collect all exception handlers and add those at the end of the
procedure body. This limits the number of jumps if no exeception is thrown.

Saving the current exception handler and installing the new one is done with a
single \cmm{} statement. The handler is restored after the guarded statements,
and before executing the first statement of the exception handler. To prevent the
execution of the handler when no exception occurs, a jump is emitted before the
exception handler which skips the exception handler.

The name of the continuation label of the exception handler is passed to the
guarded statements which use this name to emit flow annotations.

\begin{eqnarray*}
\code{|try { b } catch(e) { h }|}\ n\ p & \mapsto & 
    |stackdata { prev.eh.e: grWord; }|       \\
& & |grWord[prev.eh.e], eh = eh, handler.e;| \\
& & \code{b}\ \mbox{`\emph{handler.e}'}\ p   \\
& & |eh = grWord[prev.eh.e];|                \\
& & |goto after.e;|                          \\
& & |grWord e;|                              \\
& & |continuation handler.e(e):|             \\
& & |eh = GrWord[prev.eh.e];|                \\
& & \code{h}\ n\ p                           \\
& & |after.e:|
\end{eqnarray*}

\subsubsection{Throw}

The throw statement cuts the stack to the activation of the active exception
handler. A continuation label to the active exception handler is stored in the
global register |eh|. The |cut to| statement cuts to this register, passing the
exception pointer along. When the active exception handler is defined locally,
the continuation label of this exception handler is added in the flow
annotation |also cuts to|.

\begin{eqnarray*}
\code{|throw p|}\ \mbox{`'}\ p           & \mapsto & |cut to eh(p)| \\
\code{|throw p|}\ \mbox{`\emph{foo}'}\ p & \mapsto & |cut to eh(p) also cuts to foo|
\end{eqnarray*}

\subsubsection{Function call}

A GRIN function call translates directly into a \cmm{} function call. If the
active exception handler is defined locally, its name is added in the flow
annotation. When the function call occurs on the return spine, a tail call is
emitted.

\begin{eqnarray*}
\code{|foo x1 ... xn|}\ \mbox{`'} \{y0, ..., y_n\}            & \mapsto & |y0, ..., yn = foo(x1, ..., xn);| \\
\code{|foo x1 ... xn|}\ \mbox{`\emph{bar}'}\ \{y0, ..., y_n\} & \mapsto & |y0, ..., yn = foo(x1, ..., xn) also cuts to bar;| \\
\\
\code{|foo x1 ... xn|}\ \mbox{`'}\ ()                         & \mapsto & |jump foo(x1, ..., xn);|
\end{eqnarray*}

\subsubsection{Foreign function call}

When a foreign function call calls a primitive operation, emit the code for
this primitive. Otherwise, import the function name and emit a call to it with
the ``C'' calling convention.

\begin{eqnarray*}
\code{|ffi primFoo x1 ... xn|}\ n\ p  & \mapsto & |emitPrimitive(p, primFoo, x1, ..., xn)| \\
\code{|ffi foo x1 ... xn|}\ n\ y      & \mapsto & |import foo;|                            \\
                                      &         & |foreign "C" foo(x1, ..., xn)|
\end{eqnarray*}

%end the \mathindent=0
}

