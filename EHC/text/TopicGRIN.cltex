%%[extendeGRINSyntax
\begin{CodeFigure}{}{Extended GRIN syntax}{grin-ext}
%%[[wrap=code
prog        ::=     { binding } +                   --  program

binding     ::=     var {var}* = exp                --  function/CAF definition
            |       rec {binding}+                  --  mutual recursive bindings

exp         ::=     sexp ; \lpat -> exp             --  sequencing
            |       case val of {cpat -> expr} +    --  case
            |       sexp                            --  operation

sexp        ::=     var {sval}+                     --  application
            |       ffi var {sval}+                 --  foreign function application
            |       apply var {sval}+               --  unknown function application
            |       unit val                        --  return value
            |       store val                       --  allocate new heap node
            |       eval var                        --  evaluate variable
            |       fetch var {[n]}                 --  load heap node
            |       update var val                  --  overwrite heap node
            |       (exp)

val         ::=     (tag {sval}+)                   --  complete node (constant tag)
            |       (var {sval}+)                   --  complete node (variable tag)
            |       (var | adapt,{adapt}* )         --  record adaptation
            |       tag                             --  single tag
            |       ()                              --  empty
            |       sval                            --  simple value

adapt       ::=     offset += sval                  --  insertion at offset
            |       offset := sval                  --  update at offset
            |       offset -=                       --  delete at offset

sval        ::=     literal                         --  constant, basic value
            |       var                             --  variable

offset      ::=     sval                            --  offset in record

literal     ::=     posint                          --  integer literal
            |       negint
            |       #posint / tagcateg / var        --  tag constant

posint      ::=     0..maxint                       --  positive integer literal

negint      ::=     minint..-1                      --  negative integer literal

tagcateg    ::=     C                               --  constructor
            |       F                               --  saturated function call
            |       P posint                        --  partially applied function call
            |       A                               --  application of unknown function
            |       R                               --  record
            |       H                               --  hole for mutual recursive values

var         ::=     $ chars                         --  identifier
            |       alphanumchars

lpat        ::=     val                             --  lambda pattern

cpat        ::=     (tag {var}*)                    --  constant node pattern
            |       (var | split,{split}* )         --  record split
            |       tag                             --  constant tag pattern
            |       literal                         --  constant

split       ::=     var = offset                    --  extraction at offset
%%]
\end{CodeFigure}
%%]

%%[XX
%%]

%%[XX
%%]

%%[XX
%%]

%%[XX
%%]

%%[XX
%%]

%%[XX
%%]

%%[XX
%%]

%%[XX
%%]

%%[XX
%%]

%%[XX
%%]

%%[XX
%%]

%%[XX
%%]

%%[XX
%%]

%%[XX
%%]

