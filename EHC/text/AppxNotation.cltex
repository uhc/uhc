
%%[termTableFormat
{r@@{\ensuremath{\;}}c@@{\ensuremath{\;}}ll}
%%]

%%[termTableFormatPrev
{rcll}
%%]

%%[notationTableFormat
{ll}
%%]

%%[notationTableFormatHalf
{lp{.31\linewidth}}
%%]

%%[notationTableHeader
Notation & Meaning \\
\hline
%%]

%%[exprHeader
\multicolumn{4}{l}{Value expressions:} \\
%%]

%%[patexprHeader
\multicolumn{4}{l}{Pattern expressions:} \\
%%]

%%[tyexprHeader
\multicolumn{4}{l}{Type expressions:} \\
%%]

%%[typredHeader
\multicolumn{4}{l}{Predicate expressions:} \\
%%]

%%[declHeader
\multicolumn{4}{l}{Declarations of bindings:} \\
%%]

%%[typeHeader
\multicolumn{4}{l}{Types:} \\
%%]

%%[tyaltHeader
\multicolumn{4}{l}{Type alternative:} \\
%%]

%%[predHeader
\multicolumn{4}{l}{Predicates:} \\
%%]

%%[impredHeader
\multicolumn{4}{l}{Types for quantifier propagation:} \\
%%]

%%[termSeparator
\multicolumn{4}{l}{} \\
%%]

%%[exprBasicIntChar
|e| & |::=| &
|int || char |
 & literals
 \\
%%]

%%[exprBasicInt
|e| & |::=| &
|int|
 & literals
 \\
%%]

%%[exprBasic
& | || | &
|ident|
 & program variable
 \\
& | || | &
|e e|
 & application
 \\
%%]

%%[exprLetValDecl
& | || | &
|let identv = e in e|
 & local value definition
 \\
%%]

%%[exprLetValTyDecl
& | || | &
|let identv :: t = e in e|
 & local type annotated value definition
 \\
%%]

%%[exprLetVecDecl
& | || | &
|let Vec(d) in e|
 & local definitions
 \\
%%]

%%[exprTheUsual
|e| & |::=| &
|...|
 & 
 \\
%%]

%%[exprLamIdent
& | || | &
|\i -> e|
 & abstraction
 \\
%%]

%%[exprLamPat
& | || | &
|\p -> e|
 & abstraction
 \\
%%]

%%[exprTup
& | || | &
|(e,...,e)|
 & tuple
 \\
%%]

%%[exprAnn
& | || | &
|e :: t|
 & type annotated expression
 \\
%%]

%%[exprAppImpred
& | || | &
|e ^^ ~ e|
 & impredicative application
 \\
%%]

%%[exprExplImpl
& | || | &
|e {! e <: pi !}|
 & \emph{explicit implicit application}
 \\
& | || | &
|\{! i <: pi !} -> e|
 & \emph{explicit implicit abstraction}
 \\
%%]

%%[exprRecBasic
& | || | &
|(lbl = e,...)|
 & record
 \\
& | || | &
|e.lbl|
 & record selection
 \\
& | || | &
|(e || lbl := e,...)|
 & record update
 \\
%%]

%%[exprRecExt
& | || | &
|(e || lbl = e,...)|
 & record extension
 \\
%%]

%%[exprCase
& | || | &
|case e of Vec(p -> e)|
 & case expression
 \\
%%]

%%[declBasic
|d| & |::=| &
|identv :: t|
 & value type signature
 \\
%%]

%%[declBasicTySigma1
|dsig| & |::=| &
|identv :: sigma|
 & value type signature
 \\
%%]

%%[declBasicVal1
|dval| & |::=| &
|identv = e|
 & value binding
 \\
%%]

%%[declBasicTySigma
|d| & |::=| &
|identv :: sigma|
 & value type signature
 \\
%%]

%%[declBasicValTySigma1
|d| & |::=| &
|dsig || dval|
 &
 \\
%%]

%%[declValIdent
& | || | &
|identv = e|
 & value binding
 \\
%%]

%%[declValPat
& | || | &
|p = e|
 & value binding
 \\
%%]

%%[declDataType
& | || | &
|data ^^ Vec(t) = Vec(identc ^^ Vec(t))|
 & data type
 \\
%%]

%%[declExplImplBasic1
& | || | &
|class Vec(pr) => pr where Vec(dsig)|
 & class
 \\
& | || | &
|instance Vec(pr) => pr where Vec(dval)|
 & class instance
 \\
%%]

%%[declExplImplBasic
& | || | &
|class Vec(pr) => pr where Vec(d)|
 & class
 \\
& | || | &
|instance Vec(pr) => pr where Vec(d)|
 & class instance
 \\
%%]

%%[declExplImplExtra
& | || | &
|instance identv <: Vec(pr) => pr where Vec(d)|
 & \emph{named introduced instance}
 \\
& | || | &
|instance identv :: Vec(pr) => pr where Vec(d)|
 & \emph{named instance}
 \\
& | || | &
|instance e <: pr|
 & \emph{value introduced instance}
 \\
%%]

%%[patexprBasic
|p| & |::=| &
|int || char |
 & literals
 \\
& | || | &
|identv|
 & pattern variable
 \\
& | || | &
|identv@p|
 & pattern variable, with subpattern
 \\
& | || | &
|(p,...,p)|
 & tuple pattern
 \\
%%]

%%[patexprAnn
& | || | &
|p :: t|
 & type annotated pattern
 \\
%%]

%%[patexprRec
& | || | &
|(r||l=p)|
 & record pattern
 \\
%%]

%%[tyexprBasicInt
|t| & |::=| &
|Int|
 & type constants
 \\
%%]

%%[tyexprBasicIntChar
|t| & |::=| &
|Int || Char |
 & type constants
 \\
%%]

%%[tyexprBasic
& | || | &
|t -> t|
 & function type
 \\
%%]

%%[tyexprTuple
& | || | &
|(t,...,t)|
 & tuple type
 \\
%%]

%%[tyexprTyVar
& | || | &
|identv|
 & type variable
 \\
%%]

%%[tyexprForall
& | || | &
|forall ^ identv . t|
 & universal quantification
 \\
%%]

%%[tyexprExists
& | || | &
|exists ^ identv . t|
 & existential quantification
 \\
%%]

%%[tyexprRec
& | || | &
|(lbl :: sigma,...)|
 & record
 \\
%%]

%%[typredBasic1
|pr| & |::=| &
|identc ^^ tau|
 & class predicate
 \\
%%]

%%[typredBasic
|pr| & |::=| &
|identc ^^ Vec(t)|
 & class predicate
 \\
%%]

%%[typredTrafo
& | || | &
|pr => pr|
 & predicate transformer/abstraction
 \\
%%]

%%[typredRecLacks
& | || | &
|t \\ l|
 & record lacks label predicate
 \\
%%]

%%[identHeader
\multicolumn{4}{l}{Identifiers:} \\
%%]

%%[meetJoinHeader
\multicolumn{4}{l}{Types for computing meet/join:} \\
%%]

%%[identBasic
|ident| & |::=| &
|identv|
 & lowercase: (type) variables
 \\
& | || | &
|identc|
 & uppercase: (type) constructors
 \\
%%]

%%[identRecLbl
& | || | &
|lbl|
 & field labels
 \\
%%]

%%[typeBasicMonoIntChar
|tau| & |::=| &
|Int || Char|
 & literals
 \\
%%]
 
%%[typeBasicMonoInt
|tau| & |::=| &
|Int|
 & literals
 \\
%%]
 
%%[typeBasicMono
& | || | &
|tvarv|
 & variable
 \\
& | || | &
|tau -> tau|
 & abstraction
 \\
%%]

%%[typeSchemeMono
|sigma| & |::=| &
|forall ^ Vec(tvarv) . Vec(pi) => tau|
 & type scheme
 \\
%%]

%%[typeBasic
|sigma| & |::=| &
|Int || Char|
 & literals
 \\
& | || | &
|tvarv|
 & variable
 \\
& | || | &
|sigma -> sigma|
 & abstraction
 \\
& | || | &
|forall ^ tvarv . sigma|
 & universally quantified type
 \\
%%]

%%[typeApp
& | || | &
|sigma ^^ sigma|
 & type application
 \\
%%]

%%[typePred
& | || | &
|pi => sigma|
 & predicate abstraction
 \\
%%]

%%[typeTyVarFixed
& | || | &
|tvarf|
 & (fresh) type constant (a.k.a. fixed type variable)
 \\
%%]

%%[typeExists
& | || | &
|exists ^ alpha . sigma|
 & existentially quantified type
 \\
%%]

%%[typeRecBasic
& | || | &
|(lbl :: sigma,...)|
 & record
 \\
%%]

%%[predBasic
|pi| & |::=| &
|identc ^^ Vec(sigma)|
 & class predicate
 \\
& | || | &
|pi => pi|
 & predicate transformer/abstraction
 \\
%%]

%%[predRecLacks
& | || | &
|sigma \\ l|
 & record lacks label predicate
 \\
%%]

%%[impredBasic
|sigma| & |::=| &
|...|
 & 
 \\
& | || | &
|isigma|
 & type alternatives
 \\
|isigma| & |::=| &
|tvarv [Vec(talt)]|
 & type variable with alternatives
 \\
%%]

%%[meetJoinBasic
|sigma| & |::=| &
|...|
 & 
 \\
& | || | &
|tvarv /=/ sigma|
 & both
 \\
& | || | &
|ANY|
 & absence of type information
 \\
%%]

%%[tyaltBasic
|talt| & |::=| &
|sigma :: thard / tneed|
 & type alternative
 \\
|tneed| & |::=| &
|tneedO|
 & `offered' need
 \\
& | || | &
|tneedR|
 & `required' need
 \\
|thard| & |::=| &
|thardH|
 & `hard' alternative
 \\
& | || | &
|thardS|
 & `soft' alternative
 \\
%%]

%%[notationBasic
|sigma|
 & type
 \\
|sigmak|
 & expected/known type
 \\
|ANY|
 & any type
 \\
|tvarv|
 & type variable
 \\
|ident|
 & identifier
 \\
|identv|
 & value identifier
 \\
|identc|
 & (type) constructor identifier, type constant
 \\
|Gamma|
 & assumptions, environment, context
 \\
|Cnstr|
 & constraints, substitution
 \\
|Cnstr|$_{k..l}$
 & constraint composition of |Cnstr|$_k ...$ |Cnstr|$_l$
 \\
|<=|
 & subsumption, ``fits in'' relation
 \\
%%]

%%[notationExplImpl
|pi|
 & predicate
 \\
|pvar|
 & predicate wildcard (collection of predicates)
 \\
%%]

%%[notationRulerDemoBasic
|sigma|
 & type (possibly polymorphic)
 \\
|tau|
 & type (monomorphic)
 \\
|Vec(x)|
 & sequence of |x| (possibly empty)
 \\
|tvarv|
 & type variable
 \\
|Gamma|
 & |Vec(i :-> sigma)|, assumptions, environment, context
 \\
%%]

%%[notationRulerDemoCnstr
|Cnstr|
 & |Vec(tvarv :-> tau)|, constraints, substitution
 \\
|<=>|
 & type matching relation, unification
 \\
%%]

%%[notationImpredA
|sigmaQu|
 & |sigma| with a quantifier
 \\
|sigmaNQu|
 & |sigma| without a quantifier
 \\
|tvarf|
 & fixed type variable (a.k.a. skolem type)
 \\
|fiopt|
 & options to |<=>|
 \\
%%]

%%[notationImpredB
|isigma|
 & |sigma| for quantifier propagation
 \\
|sigmaQu|
 & |sigma| with a quantifier
 \\
|sigmaNQu|
 & |sigma| without a quantifier
 \\
|ICnstr|
 & |Cnstr| for quantifier propagation
 \\
|<+>|
 & meet of two types
 \\
|<->|
 & join of two types
 \\
|<=>|
 & type match, with specialisations |<=|, |<+>| and |<->|
 \\
|thard|
 & type alternative hardness (hard or soft)
 \\
|thardH|
 & hard type alternative
 \\
|thardS|
 & soft type alternative
 \\
|tneed|
 & type alternative need/context (offered or required)
 \\
|tneedO|
 & offered type alternative
 \\
|tneedR|
 & required type alternative
 \\
|talt|
 & type alternative
 \\
%%]

%%[notationCoCo
|coco|
 & co-, contravariant context
 \\
|cocoY|
 & covariant context
 \\
|cocoN|
 & contravariant context
 \\
%%]

%%[notationTransl
|Transl|
 & translated code
 \\
%%]

%%[monoBasicTy
|tau| & |::=| &
|Int || Char |
 & literals
 \\
& | || | &
|tvarv|
 & variable
 \\
& | || | &
|tau -> tau|
 & abstraction
 \\
|sigma| & |::=| &
|tau|
 & type scheme
 \\
& | || | &
|forall ^ tvarv . tau|
 & universally quantified type, abbreviated by |forall ^ Vec(tvarv) . tau|
 \\
%%]

%%[polyBasicTy
|sigma| & |::=| &
|Int |
 & literals
 \\
& | || | &
|tvarv|
 & variable
 \\
& | || | &
|sigma -> sigma|
 & abstraction
 \\
|sigma| & |::=| &
|forall ^ Vec(tvarv) . sigma|
 & universally quantified type, |Vec(tvarv)| possibly empty
 \\
%%]

%%[rulerExpr
|e| & |::=| &
|int  |
 & literals
 \\
& | || | &
|i|
 & program variable
 \\
& | || | &
|e e|
 & application
 \\
& | || | &
|\i -> e|
 & abstraction
 \\
& | || | &
|let i = e in e|
 & local definitions
 \\
%%]

%%[rulerSyntaxSetup
%format <	= ^^ "\langle "
%format >	= "\rangle " ^^
%%]

%%[syntaxSEP
x SEP y                 ::=     x (y (x SEP y)) ?
%%]

%%[rulerSyntaxBasic
<ruler_prog>            ::=     (  <scheme_def>    | <format_def> | <rewrite_def>
                                |  <rules_def>     | <viewhierarchy_def>
                                |  <external_def>  | <data_def>
                                |  <include_def>
                                ) *
<scheme_def>            ::=     (scheme | relation) <nm> [<ag_nm>]
                                    '='  <scm_view_def> *
<scm_view_def>          ::=     view <vw_nm> '=' <holes_def> <shape_def> *
<holes_def>             ::=     holes ( ( <direct_holes> | <import_holes> ) SEP '|' )
<direct_holes>          ::=     '[' <hole_defs> '|' <hole_defs> '|' <hole_defs> ']'
                          |     '[' <hole_defs> ']'
<import_holes>          ::=     scheme <scm_nm> ( '(' <import_rename> SEP ',' ')' ) ?
<import_rename>         ::=     <hole_nm> := <hole_nm> | <hole_nm> = <hole_nm>
<shape_def>             ::=     judgeuse [<target>] <rexpr>
                          |     judgespec <rexpr>
<target>                ::=     tex | texcmd  | ag | ...
<hole_defs>             ::=     <hole_def> SEP ','
<hole_def>              ::=     [ inh | syn | thread | node | extern ] *
                                <hole_nm> ':' <hole_type>
<hole_type>             ::=     <nm>
<rules_def>             ::=     rules <nm> scheme <scm_nm> "info"
                                    '='  <rule_def> *
<rule_def>              ::=     rule <nm> [<ag_nm>] = <rl_view_def> *
<rl_view_def>           ::=     view <vw_nm> '=' <rule_judges>
<rule_judges>           ::=     ( ( '(' <direct_judges> ')' | <import_judges> ) SEP '|')
                          |     <direct_judges>
<direct_judges>         ::=     (extern <nm> *) ?
                                <judge_rexpr> * '---' <judge_rexpr>
<import_judges>         ::=     ruleset <nm> rule <nm>
<judge_rexpr>           ::=     judge [<nm> ':'] <scm_nm>
                                    (  '=' <rexpr>
                                    |  ('|' <hole_nm> '=' <rexpr>)*
                                    )
<rexpr>                 ::=     <rexpr_app> <op> <rexpr> | <rexpr_app>
<rexpr_app>             ::=     <rexpr_app> <rexpr_base> | <rexpr_base> | epsilon
<rexpr_base>            ::=     <nm> | <rexpr_parens> | unique
                          |     `=` | `|` | `.` | `-`
                          |     int | "string"
<rexpr_parens>          ::=     '('  (  <rexpr>
                                     |  <rexpr> '|' <hole_type>
                                     |  node int = <rexpr>
                                     |  text "string"
                                     |  ( '|' | '.' | '=' | '-' | <keyword> )*
                                     )
                                ')' ('.' <rexpr_base>)*
%%]

%%[rulerSyntaxLexical
<op>                    ::=     <op_base> ('.' <rexpr_base>)*
<op_base>               ::=     ('!#$%&*+/<=>?@\^|-:;,[]{}~')*
                                    - ('|'|'.'|'='|'-')
<ag_nm>, <scm_nm>, <vw_nm>, <hole_nm>
                        ::=     <nm>
<nm>                    ::=     <nm_base> ('.' (<nm_base> | int))*
<nm_base>               ::=     'a-zA-Z_' 'a-zA-Z_0-9'*
<keyword>               ::=     (scheme | ...) - (unique)
%%]

%%[rulerSyntaxRest
<format_def>            ::=     format [<target>]
                                    <nm> '=' <rexpr>
<rewrite_def>           ::=     rewrite [<target>] [def|use]
                                    <rexpr> '=' <rexpr>
<external_def>          ::=     external <nm>*
<viewhierarchy_def>
                        ::=     viewhierarchy <vw_nm> ('<' <vw_nm>)*
%%]

%%[rulerSyntaxFmtRelated
%%]

%%[rulerRulerAsideRuleBegin
\begin{center}
\begin{tabular}{lr}
\begin{minipage}{.55\linewidth}
%%]

%%[rulerRulerAsideRuleSep
\end{minipage}
&
\begin{minipage}{.35\linewidth}
\[
%%]

%%[rulerRulerAsideRuleEnd
\]
\end{minipage}
\end{tabular}
\end{center}
%%]

%%[parserCombTableHead
Combinator & Meaning & Result
\\ \hline
%%]

%%[parserCombTableA
|p <*> q|                       & |p| followed by |q|               & result of |p| applied to result of |q| \\
|p <||> q|                      & |p| or |q|                        & result of |p| or result of |q| \\
|pSucceed r|                    & empty input |epsilon|             & |r| \\
|f <$> p|                       & |=== pSucceed f <*> p|            & \\
|pKey "x"|                      & symbol/keyword x                  & |"x"| \\
%%]

%%[parserCombTableB
|p <**> q|                      & |p| followed by |q|               & result of |q| applied to result of |p| \\
|p `opt` r|                     & |=== p <||> pSucceed r|           & \\
|p <??> q|                      & |=== p <**> q `opt` id|           & \\
|p <* q|, |p *> q|, |f <$ p|    & \parbox[t]{.3\textwidth}{variants throwing away result of angle missing side}
                                                                    & \\
|pFoldr listAlg p|              & sequence of |p|'s                 & |foldr c n (|result of all |p|'s|)| \\
|pList p|                       & |pFoldr ((:),[]) p|               & \\
|pChainr s p|                   & |p|'s (|>1|) separated by |s|'s   & result of |s|'s applied to results of |p|'s aside \\
%%]

%%[rulerLaTeXCmdTableNoView
%{
%format scheme = "scheme"
%format ruleset = "ruleset"
%format rule = "rule"
\begin{center}
\begin{tabular}{ll}
\textbf{Name} & \textbf{Refers to} \\
\hline
| <basename> . <ruleset> | & The complete figure \\
| <basename> . <ruleset> . scheme | & The scheme used by the figure \\
| <basename> . <ruleset> . <rule> | & | <rule> | defined in | <ruleset> | \\
\end{tabular}
\end{center}
%}
%%]

%%[rulerLaTeXCmdTableYesView
%{
%format scheme = "scheme"
%format ruleset = "ruleset"
%format rule = "rule"
%format view = "view"
\begin{center}
\begin{tabular}{ll}
\textbf{Name} & \textbf{Refers to} \\
\hline
| <basename> . <view> . <ruleset> | & The complete figure \\
| <basename> . <view> . <ruleset> . scheme | & The scheme used by the figure \\
| <basename> . <view> . <ruleset> . <rule> | & | <rule> | defined in | <ruleset> | \\
\end{tabular}
\end{center}
%}
%%]

%%[XX
%%]

%%[XX
%%]

%%[XX
%%]

%%[XX
%%]

%%[XX
%%]

%%[XX
%%]

%%[XX
%%]

%%[XX
%%]

