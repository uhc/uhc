%%[primer
%{

%format < 		= "{\langle}"
%format > 		= "{\rangle}"
\label{ag-primer}

\subsection{Haskell and Attribute Grammars (AG)}
Attribute grammars can be mapped onto functional programs
\cite{kuiper86ag-fp,johnsson87attr-as-fun,bird84circ-traverse}.
Vice versa, the class of functional programs
(catamorphisms \cite{malcolm89homo-cata,fegaras96cata,swierstra99comb-lang})
mapped onto can be described by attribute grammars.
The AG system exploits this correspondence by providing a notation (attribute grammar) for
computations over trees
which additionally allows
program fragments to be described separately.
The AG compiler gathers these fragments, combines these fragments, and generates a corresponding
Haskell program.

In this AG tutorial we start with a small example Haskell program to
show how the computation described by this program can be expressed in the AG notation and how
the resulting Haskell program generated by the AG compiler can be used.
The `repmin' problem \cite{bird84circ-traverse} is used for this purpose.
A second example describing a `pocket calculator' (that is, expressions) focusses on
more advanced features and typical AG usage patterns.

\subsection{Repmin a la Haskell}
Repmin stands for ``replacing the integer valued leaves of a tree by the minimal integer value found in the leaves''.
The solution to this problem requires two passes over a tree structure,
computing the miminum and computing
a new tree with the minimum as its leaves respectively.
It is often used as the typical example of a circular program which lends itself well to be described by the
AG notation.
When described in Haskell it is expressed as a computation over a tree structure:

%%@RepminHS.1.data wrap=code

The computation itself simultaneously computes the minimum of all integers found in the leaves of the tree and
the new tree with this minimum value.
The result is returned as a tuple computed by function |r|:

%%@RepminHS.1.repmin wrap=code

We can use this function in some setting, for example:

%%@RepminHS.1.tr wrap=code

This program produces the following output:

%%[[wrap=code
Tree_Bin (Tree_Leaf 3) (Tree_Bin (Tree_Leaf 3) (Tree_Leaf 3))
%%]

The computation of the new tree requires the minimum.
This minimum is passed as a parameter |m| to |r| at the root of the tree by extracting it from the result of |r|.
The result tuple of the invocation |r t tmin|
depends on itself via the minimum |tmin| so it would seem we have a cyclic definition.
However, the real dependency is not on the tupled result of |r| but on its elements because
it is the element |tmin| of the result tuple which is passed back and not the tuple itself.
The elements are not cyclically dependent so Haskell's laziness prevents
a too eager computation of the elements of the tuple which might otherwise have caused an infinite loop during
execution.
Note that we have two more or less independent computations that both follow
the tree structure,
and a weak interaction, when passing the |tmin| value back in the tree.

\subsection{Repmin a la AG}
The structure of |repmin| is similar to the structure required by a compiler.
A compiler performs several computations
over an \IxAsDef{abstract syntax tree} (\IxAsDef{AST}), for example for computing its type
and generating code.
This corresponds to the |Tree| structure used by |repmin| and the tupled results.
In the context of attribute grammars the elements of this tuple are called \IxAsDef{attributes}.
Occasionaly the word \IxAsDef{aspect} is used as well, but an aspect may also refer to a group of attributes associated with
one particular feature of the AST, language or problem at hand.

Result elements are called \IxAsDef{synthesized} attributes.
On the other hand,
a compiler may also require information from higher nodes in an AST to be available at lower nodes in an AST.
The |m| parameter passed to |r| in |repmin| is an example of this situation.
In the context of attribute grammars this is called an \IxAsDef{inherited} \IxAsDef{attribute}.

Using AG notation we first define the AST corresponding to our problem
(for which the complete solution is given in \figRef{ag-primer-full-repmin}):

%%@RepminAG.1.data1 wrap=code

\begin{CodeFigure}{}{Full AG specification of repmin}{ag-primer-full-repmin}
%%[[wrap=code

%%@RepminAG.1.data1

%%@RepminAG.1.min

%%@RepminAG.1.repmin

%%@RepminAG.1.copyRule1

%%@RepminAG.1.repminBin

%%@RepminAG.1.data2

%%@RepminAG.1.repminroot

%%@RepminAG.1.tree

%%@RepminAG.1.copyRule2

%%@RepminAG.1.treeRoot

%%@RepminAG.1.show

%%@RepminAG.1.tr

%%@RepminAG.1.main
%%]
\end{CodeFigure}



The |DATA| keyword is used to introduce the equivalent of Haskell's |data| type.
An AG |DATA| declaration introduces a \IxAsDef{node} (or \IxAsDef{nonterminal})
of an AST.
Its alternatives, enumerated one by one after the vertical bar | || |, are called
\IxAsDef{variants} or \IxAsDef{productions}.
The term \IxAsDef{constructor} is occasionally used to stress the similarity with
Haskell's |data| types.
Each variant has members,
called \IxAsDef{children} if they refer to other nodes of the AST and \IxAsDef{fields} otherwise.
Each child and field has a name (before the colon) and a type (after the colon).
The type may be either another |DATA| node (if a child) or a monomorphic Haskell type (if a field), delimited by curly braces.
The curly braces may be omitted if the Haskell type is a single identifier.
For example, the |DATA| definition for the repmin problem introduces a node (nonterminal) |Tree|,
with variants (productions) |Leaf| and |Bin|.
A |Bin| has children |lt| and |rt| of type |Tree|.
A |Leaf| has no children but contains only a field |int| holding a Haskell |Int| value.

The keyword |ATTR| is used to declare an attribute for a node, for instance the synthesized attribute |min|:

%%@RepminAG.1.min wrap=code

A synthesized attribute is declared for the node after |ATTR|.
Multiple declarations of the same attribute for different nonterminals
can be grouped on one line by enumerating the nonterminals after the |ATTR| keyword, separated by whitespace.
The attribute declaration is placed inside the square brackets at one or more of three different possible places.
All attributes before the first vertical bar | || | are inherited, after the last bar synthesized, and in between both
inherited and synthesized.
For example, attribute |min| is a result and therefore positioned as a synthesized attribute, after the last bar.

Rules relating an attribute to its value are introduced using the keyword |SEM|.
For each production we distinguish a set of input attributes, consisting of the synthesized attributes of the children
referred to by |@ <child> . <attr>| and the inherited attributes of the parent referred to by |@lhs. <attr>|.
For each output attribute we need a rule that expresses its value in terms of input attributes and fields.

%if False
Rules relate attributes from a \IxAsDef{parent} node to the attributes of its
\IxAsDef{child} nodes.
Synthesized attributes travel upwards in the AST and must be defined for a parent in terms
of inherited attributes of the parent or synthesized attributes of the children.
Inherited attributes travel downwards in the AST and must be defined for each child for which it
has been declared.
Inherited attributes are defined in terms of inherited attributes of the parent of synthesized attributes
of neighbouring children.
%endif

The computation of a synthesized attribute for a node
has to be defined for each variant individually as
it usually will differ between variants.
Each rule is of the form

%%[[wrap=code
| <variant> ^^^ <node> . <attr> = <Haskell expr>
%%]

If multiple rules are declared for a |<variant>| of a node, they may all be listed under the same |<variant>|.
The same holds for multiple rules for a child (or |lhs|) of a |<variant>|, the child (or |lhs|) may then be shared.

The text representing the computation for an attribute has to be a Haskell expression
and will end up almost unmodified in the generated program,
without any form of checking.
Only attribute and field references, starting with a |@|, have meaning to the AG system.
The text, possibly stretching over multiple lines,
has to be indented at least as far as its first line.
Otherwise it should be delimited by curly braces.

The basic form of an attribute reference
is |@ <node> . <attr>| referring to a synthesized attribute |<attr>| of child node |<node>|.
For example, |@lt.min| refers to the synthesized attribute |min| of child |lt| of the |Bin| variant of node |Tree|.

The ``|<node> .|'' part of |@ <node> . <attr>| may be omitted.
For example, |min| for the |Leaf| alternative is defined in terms of |@int|.
In that case |@ <attr>| refers to a locally (to a variant for a node) declared attribute, or to
the field with the same name as defined in the |DATA| definition for that variant.
This is the case for the |Leaf| variant's |int|.
We postpone the discussion of locally declared attributes.

The minimum value of |repmin| passed as a parameter corresponds to an inherited attribute |rmin|:

%%@RepminAG.1.repmin wrap=code

%if False
An inherited attribute is referred to by |@lhs. <attr>|; similar to |@ <node> . <attr>| for synthesized attributes
but with |<node> == lhs|.
The rule for an inherited attribute is also the other way around compared to a synthesized attribute.
In
%%[[wrap=code
| <variant> ^^^ <node> . <attr> = <Haskell expr>
%%]
|<node>| must now explicitly refer to a child of which an attribute has to be given a value
to be passed further down the AST.
For the |rmin| attribute this is the |lt| as well as the |rt| child of the |Bin| variant of node |Tree|.
%endif

The value of |rmin| is straightforwardly copied to its children.
This ``simply copy'' behavior occurs so often that we may omit its specification.
The AG system uses so called copy rules to automically generate code for copying
if the value of an attribute is not specified explicitly.
This is to prevent program clutter and thus allows the programmer to focus on programming
the exception instead of the rule.
We will come back to this later; for now it suffices to mention that all the rules for |rmin|
might as well have been omitted.

The original |repmin| function passed the minimum value coming out |r| back into |r| itself.
This happened at the top of the tree;
In AG we define a |Root| node sitting on top of a |Tree|:

%%@RepminAG.1.data2 wrap=code

At the root the |min| attribute is passed back into the tree via attribute |rmin|:

%%@RepminAG.1.repminroot wrap=code

The value of |rmin| is used to construct a new tree:

%%[[wrap=code
%%@RepminAG.1.tree

%%@RepminAG.1.treeRoot
%%]

For each |DATA| the AG compiler generates a corresponding Haskell |data| type declaration.
For each node |<node>| a data type with the same name |<node>| is generated.
Since Haskell requires all constructors to
be unique, each constructor of the data type gets a name of the form |<node>_<variant>|.

In our example the constructed tree is returned as the one and only attribute of |Root|.
It can be shown if we tell the AG compiler to make the generated data type an
instance of the |Show| class:

%%@RepminAG.1.show wrap=code

Similarly to the Haskell version of |repmin| we can now show the result of the attribute computation as a plain Haskell value
by using the function |sem_Root| generated by the AG compiler:

%%@RepminAG.1.tr wrap=code

Because this part is Haskell code, it has to be delimited by curly braces, indicating that
the AG compiler should copy it unchanged into the generated Haskell program.

In order to understand what is happening here,
we take a look at the generated Haskell code.
For the above example the following code will be generated (edited to remove clutter):

\begin{TT}
data Root = Root_Root Tree
-- semantic domain
type T_Root = Tree
-- cata
sem_Root :: Root -> T_Root
sem_Root (Root_Root _tree)
  = (sem_Root_Root (sem_Tree _tree))
sem_Root_Root :: T_Tree -> T_Root
sem_Root_Root tree_ =
    let (_treeImin,_treeItree) = (tree_ _treeOrmin)
        _treeOrmin = _treeImin
        _lhsOtree = _treeItree
    in  _lhsOtree

data Tree = Tree_Bin Tree Tree
          | Tree_Leaf Int
          deriving Show
-- semantic domain
type T_Tree = Int -> (Int,Tree)
-- cata
sem_Tree :: Tree -> T_Tree
sem_Tree (Tree_Bin _lt _rt)
  = (sem_Tree_Bin (sem_Tree _lt) (sem_Tree _rt))
sem_Tree (Tree_Leaf _int) = (sem_Tree_Leaf _int)
sem_Tree_Bin :: T_Tree -> T_Tree -> T_Tree
sem_Tree_Bin lt_ rt_ =
    \ _lhsIrmin ->
        let (_ltImin,_ltItree) = (lt_ _ltOrmin)
            (_rtImin,_rtItree) = (rt_ _rtOrmin)
            _lhsOmin = _ltImin `min` _rtImin
            _rtOrmin = _lhsIrmin
            _ltOrmin = _lhsIrmin
            _lhsOtree = Tree_Bin   _ltItree _rtItree
        in  (_lhsOmin,_lhsOtree)
sem_Tree_Leaf :: Int -> T_Tree
sem_Tree_Leaf int_ =
    \ _lhsIrmin ->
        let _lhsOmin = int_
            _lhsOtree = Tree_Leaf  _lhsIrmin
        in  (_lhsOmin,_lhsOtree)
\end{TT}

In general, generated code is not the most pleasant\footnote{In addition, because generated code can be generated differently,
one cannot count on it being generated in a specific way.
Such is the case here too, this part of the AG implementation may well change in the future.}
of prose to look at, but we will have to use the generated
functions in order to access the AG computations of attributes from the Haskell world.
The following observations should be kept in mind when doing so:
\begin{Itemize}
\item
For node |<node>| also a type |T_<node>| is generated, describing the function type
that maps inherited to synthesized attributes.
This type corresponds one-to-one to the attributes defined for |<node>|: inherited attributes to parameters, synthesized attributes
to elements of the result tuple (or single type if exactly one synthesized attribute is defined).
\item
Computation of attribute values is done by semantic functions with a name of the form |sem_<node>_<variant>|.
These functions have exactly the same type as their constructor counterpart of the generated data type.
The only difference lies in the parameters which are of the same type as their constructor counterpart, but
prefixed with |T_|.
For example, data constructor |Tree_Bin :: Tree -> Tree -> Tree| corresponds to the semantic function
|sem_Tree_Bin :: (T_Tree) -> (T_Tree) -> (T_Tree)|.
\item
A mapping from the Haskell |data| type to the corresponding semantic function is available with
the name |sem_<node>|.
\end{Itemize}

In the Haskell world one now can follow different routes to compute the attributes:
\begin{Itemize}
\item
First construct a Haskell value of type |<node>|, then apply |sem_<node>| to this value and the
additionally required inherited attributes values.
The given function |main| from AG variant of repmin takes this approach.
\item
Circumvent the construction of Haskell values of type |<node>| by using the semantic functions |sem_<node>_<variant>|
directly when building the AST instead of the data constructor |<node>_<variant>|
(This technique is called deforestation \cite{wadler90deforest}.).
\end{Itemize}

In both cases a tuple holding all synthesized attributes is returned.
Elements in the tuple are sorted lexicographically on attribute name,
but it is still awkward to extract an attribute via pattern matching because
the size of the tuple and position of elements changes with adding and renaming attributes.
For now, this is not a problem as |sem_Root| will only return one value, a |Tree|.
Later we will see the use of wrapper functions to pass inherited attributes and extract synthesized attributes
via additional wrapper data types holding attributes in labeled fields.

\subsection{Parsing directly to semantic functions}
The given |main| function uses the first approach: construct a |Tree|, wrap it inside a |Root|, and
apply |sem_Root| to it.
The following example takes the second approach; it parses some input text describing the structure of a tree and
directly invokes the semantic functions:

%%@RepminAG.2.parser wrap=code

The parser recognises the letter '@B@' as a |Bin| alternative and a single digit as a |Leaf|.
\appRef{appx-parsercombinators} gives an overview of the parser combinators which are used \cite{uust04www}.
The parser is invoked from an alternative implementation of |main|:

%%@RepminAG.2.main wrap=code

We will not discuss this alternative further nor will we discuss this particular variant of
parser combinators.
However, this approach is taken in the rest of \thispaper\ wherever parsing is required.

\subsection{More features and typical usage: a pocket calculator}
We will continue with looking at a more complex example, a pocket calculator which accepts expressions.
The calculator prints a pretty printed version of the entered expression, its computed value and some statistics
(the number of additions performed).
An interactive terminal session of the pocket calculator looks as follows:

\begin{TT}
$ build/bin/expr
Enter expression: 3+4
Expr='3+4', val=7, add count thus far=1
Enter expression: [a=3+4:a+a]
Expr='[a=3+4:a+a]', val=14, add count thus far=3
Enter expression: ^Cexpr: interrupted
$
\end{TT}

This rudimentary calculator allows integer values, their addition and binding to identifiers.
Parsing is character based, no scanner is used to transform raw text into tokens.
No whitespace is allowed and a |let| expression is syntactically denoted by @[<nm>=<expr>:<expr>]@.

The example will allow us to discuss more AG features as well as typical usage of AG.
We start with integer constants, addition, followed by an attribute computation for the pretty printing:

%%@AGPrimerExpr.1.data wrap=code

The root of the tree is now called |AGItf| to indicate (as a naming convention)
that this is the place where interfacing between the Haskell world
and the AG world takes place.

The definition demonstrates the use of the |SET| keyword which allows the naming of a group of nodes.
This name can later be used to declare attributes for all the named group of nodes at once.

The computation of a pretty printed representation follows the same pattern as the computation of |min| and |tree|
in the |repmin| example, because of its compositional and bottom-up nature.
The synthesized attribute |pp| is synthesized from the values of the |pp| attribute of the children of a node:

%%@AGPrimerExpr.1.pp wrap=code

The pretty printing uses a pretty printing library with
combinators for values of type |PP_Doc| representing
pretty printed documents.
The library is not further discussed here; an overview of some of
the available combinators can be found in \appRef{appx-prettyprintingcombinators}.

As a next step we add |let| expressions and use of identifiers in expressions.
This demonstrates an important feature of the AG system:
we may introduce new alternatives for a |<node>| as well as may introduce new attribute computations
in a separate piece of program text.
We first add new AST alternatives for |Expr|:

%%@AGPrimerExpr.1.letdata wrap=code

One should keep in mind that the extensibility offered is simplistic of nature, but surprisingly flexible at the same time.
Node variants, attribute declarations and attribute rules for node variants can all occur textually separated.
The AG compiler gathers all definitions, combines, performs several checks (e.g.~are attribute rules missing), and generates
the corresponding Haskell code.
All kinds of declarations can be distributed over several
text files to be included with a |INCLUDE| directive (not discussed any further).

Any addition of new node variants also requires corresponding definitions
of already introduced attributes:

%%@AGPrimerExpr.1.letpp wrap=code

The use of variables in the pocket calculator requires us to keep an administration of values bound to variables.
An association list is used to provide this environmental and scoped information:

%%@AGPrimerExpr.1.env wrap=code

The scope is enforced by extending the inherited attribute |env| top-down in the AST.
Note that there is no need to specify a value for |@val.env| because
of the copy rules discussed later.
In the |Let| variant the inherited environment,
which is used for evaluating the right hand side of the bound expression,
is extended with the new binding,
before being used as the inherited |env| attribute of the body.
The environment |env| is queried when the value of an expression is to be computed:

%%@AGPrimerExpr.1.val wrap=code

The attribute |val| holds this computed value.
Because its value is needed in the `outside' Haskell world it is passed through |AGItf| (as part of |SET AllNT|)
as a synthesized attribute.
This is also the case for the previously introduced |pp| attribute as well as the following |count| attribute
used to keep track of the number of additions performed.
However, the |count| attribute is also passed as an inherited attribute.
Being both inherited and synthesized it is defined between the two vertical bars in the
|ATTR| declaration for |count|:

%%@AGPrimerExpr.1.count wrap=code

The attribute |count| is said to be \IxAsDef{threaded} through the AST,
the AG solution to a global variable
or the use of state monad.
This is a result of the attribute being inherited as well as synthesized and
the copy rules.
Its effect is an automatic copying of the attribute in a preorder traversal of the AST.
The children nodes of the |Add| variant update the |count| value; the |Add| variant increments
this value and passes the result to the parent node.

\IxAsDef{Copy rule}s are attribute rules inserted by the AG system if a rule for an attribute |<attr>|
in a production of |<node>| is missing.
AG tries to insert a rule that copies the value of another attribute with the same name,
searching in the following order:

\begin{Enumerate}
\item
Local attributes.
\item
The synthesized attribute of the children to the left of the child for which an inherited |<attr>| definition is missing,
with priority given to the nearest child fulfilling the condition.
A synthesized |<attr>| of a parent is considered to be at the right of any child's |<attr'>|.
\item
Inherited attributes (of the parent).
\end{Enumerate}

In our example the effect is that for the |Let| variant of |Expr|

\begin{Itemize}
\item
(inherited) |@lhs.count| is copied to (inherited) |@val.count|,
\item
(synthesized) |@val.count| is copied to (inherited) |@body.count|,
\item
(synthesized) |@body.count| is copied to (synthesized) |@lhs.count|.
\end{Itemize}

Similar copy rules are inserted for the other variants.
Only for variant |Add| of |Expr| a different rule for |@lhs.count| is explicitly specified,
since here we have a non-trivial piece of semantics: we actually want to count something.

Automatic copy rule insertion can be both a blessing and curse.
A blessing because it takes away a lot of tedious work and minimises clutter
in the AG source text.
On the other hand, it can be a curse,
because a programmer may have forgotten an otherwise required rule. If a copy rule can be inserted
the AG compiler will silently do so, and
the programmer will not be warned.

As with our previous example we can let a parser map input text to the invocations of semantic functions.
For completeness this source text has been included in \figRef{ag-primer-parser-expr}.
The result of parsing combined with the invocation of semantic functions will be a function taking inherited attributes
to a tuple holding all synthesized attributes.
Even though the order of the attributes in the result tuple is specified, position based extraction via pattern matching
should be avoided.
The AG system can be instructed to create a wrapper function which knows how to extract the attributes out of the
result tuple:

%%@AGPrimerExpr.1.wrapper wrap=code

The attribute values are stored in a data type with labeled fields for each attribute.
The attributes can be accessed with labels of the form |<attr>_Syn_<node>|.
The name of the wrapper is of the form |wrap_<node>|; the wrapper function is passed the result of the semantic function
and a data type holding inherited attributes:

%%@AGPrimerExpr.1.main wrap=code

We face a similar (that is, position based) problem with the passing of inherited attributes to the semantic function.
Hence inherited attributes are passed to the wrapper function via a data type with name |Inh_<node>| and a constructor with the same name,
with fields having labels of the form |<attr>_Inh_<node>|.
The |count| attribute is an example of an attribute which must be passed as an inherited attribute as well
as extracted as a synthesized attribute.

This concludes our introduction to the AG system.
Some topics have either not been mentioned at all or only shortly touched upon.
We provide a list of those topics together with a reference to 
their first use.
All the following topics should be read within the context of their referred use.

%if False
the first use of the features which
are actually used later in \thispaper.
Each of these items is marked with |AGFeature| to indicate that it is about the AG system.
%endif

\begin{Itemize}
%{
%format < 		= "{\langle}"
%format > 		= "{\rangle}"
\begin{AGFeatureLater}{ag-type-syn}{Type synonyms (for lists)}
The AG notation allows type synomyms for one special case, AG's equivalent
of a list (e.g |Decls| in \figRef{abs-syn-eh1}).
It is an often occurring idiom to encode a list of nodes, say |DATA L| with elements |<node>| as:
%%[[wrap=code
DATA L
  | Cons  hd  :  <node>
          tl  :  L
  | Nil
%%]
AG allows the following notation as a shorthand:
%%[[wrap=code
TYPE L = [<node>]
%%]
\end{AGFeatureLater}
%}

%{

%format < 		= "{\langle}"
%format > 		= "{\rangle}"
\begin{AGFeatureLater}{ag-lhs-pat}{Left hand side patterns}
The simplest way to define a value for an attribute is to define one value for one attribute
at a time.
However, if this value is a tuple, its fields are to be extracted and assigned to individual attributes
(as in |valGamLookupTy|).
AG allows a pattern notation of the form(s) to make the notation for this situation more concise:
%%[[wrap=code
| <variant>  ^^^^  <node> . ( <attr1>   , <attr2>            , ...  )  = 
| <variant>  ^^^^  ( <node1> . <attr1>  , <node1> . <attr2>  , ...  )  = 
%%]
\end{AGFeatureLater}
%}

\begin{AGFeatureLater}{ag-set-notation}{Set notation for variants}
The rule for (e.g.) attribute |fo| is specified for |IConst| and |CConst| together.
Instead of specifying only one variant a whitespace separated list of variant names
may be specified after the vertical bar '| || |'.
It is also allowed to specify this list relative to all declared variants by specifying for which
variants the rule should \emph{not} be declared.
For example: |* - IConst CConst| if the rule was to be defined for all variants except |IConst| and |CConst|.
\end{AGFeatureLater}

\begin{AGFeatureLater}{ag-loc-attr}{Local attributes}
Attribute |fo_| and |ty| are declared locally.
In this context `local' means that the scope is limited to the variant of a node.
For example, |fo_| (explained further below) also holds a (possibly empty) list of errors used
by other attribute equations.
|fo_| is only available for attribute equations for variant |IConst| of |Expr|.

%if False
Note that no explicit rule for synthesized attribute |ty| is required;
a copy rule is inserted to use the value of the locally declared attribute |ty|.
This is a common AG idiom when a value is required for later use as well or
needs to be redefined in later versions of EH.
%endif
\end{AGFeatureLater}

\begin{AGFeatureLater}{ag-use-attr}{Attribute together with |USE|}
A synthesized attribute |<attr>| may be declared together with |USE {<op>} {<zero>}|.
The |<op>| and |<zero>| allow the insertion of copy rules which behave similar to Haskell's |foldr|.
The first piece of text |<op>| is used to combine the attribute values of two children by textually placing this text as an
operator between references to the attributes of the children.
If no child has an |<attr>|, the second piece of text |<zero>| is used as a default value for |<attr>|.
For example, |USE {`gamAddGam`} {emptyGam}|
gathers bottom-up the type signature bindings.
\end{AGFeatureLater}

%{

%format < 		= "{\langle}"
%format > 		= "{\rangle}"

\begin{AGFeatureLater}{ag-self-attr}{Attribute of type |SELF|}
The use of the keyword |SELF|\Ix{SELF} in:
%%[[wrap=code
ATTR <node> [ | | a: SELF ]
%%]
is equivalent to
%%[[wrap=code
ATTR <node> [ | | a: <node' > ]
%%]
where:
\begin{Itemize}
\item
The type |<node' >| of synthesized attribute |a| stands for the generated Haskell |data| type generated for |<node>|.
\item
For each |<node>| variant a local attribute |a| is inserted, defined to be a replica of the |<node>| variant in terms of |<node' >|.
\item
Copy rules automatically propagate the local |a| to the parent,
unless an explicit definition for the parent's |a| is given.
\end{Itemize}
For example, via attribute |repl| a copy of the type is built which only differs (or, may differ) in the original
in the value for the type variable.
\end{AGFeatureLater}
%}

\item
Rule redefinition via |:=|. % (see \secPageRef{ag-redef-rule}).
%if False
\begin{AGFeature}{ag-redef-rule}{Redefining an attribute value}
Normally a value for an attribute may be associated with an attribute only once,
using |=| in a rule.
It is an error if multiple rules for an attribute are present.
If |:=| is used instead, any previous definition is overridden and no error message is generated.
In this context previous means ``textually occurring earlier''.
Because the AG system's flexibility finds its origin in the independence of textual locations of
declarations and definitions, |:=| should be used with care.
For \thispaper\ the order in which redefinitions appear is the same as their textual appearance
in \thispaper, which again is the same as the sequence of versions of EH.
\end{AGFeature}

This definition builds on top of the previous version by
redefining some attributes (indicated by |:=| instead of |=|).
If this happens a reference to the location (in \thispaper) of the code on top of which
the new code is added can be found\footnote{This is not an ideal solution to display combined fragments.
A special purpose editor would probably do a better
job of browsing textually separated but logically related pieces of code.}.
%endif

%if False
\item
Typical use/pattern: decomposition.
\item
Typical use/pattern: gathering.
\item
Typical use/pattern: unique number generation.
%endif
\item
Cycle detection and other (experimental) features, commandline invocation, etc.
\end{Itemize}

%We will come back to the AG system itself in our conclusion.

\begin{CodeFigure}{}{Parser for calculator example}{ag-primer-parser-expr}
%%@AGPrimerExpr.1.parser wrap=code
\end{CodeFigure}

%}
%%]
