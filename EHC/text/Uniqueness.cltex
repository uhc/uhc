%%[title
Improved Uniqueness Typing for Haskell
%%]

%%[author
  Arie Middelkoop\\
  amiddelk@@cs.uu.nl\\
  ~\\
  Master's Thesis\\
  INF/SCR-06-08\\
  ~\\
  ~\\
  ~\\
  Daily Supervisor: dr. J. Hage\\
  Supervisor: prof.dr. S.D. Swierstra\\
  ~\\
  ~\\
  ~\\
  ~\\
  Center for Software Technology,\\
  Department of Information and Computing Sciences,\\
  Universiteit Utrecht,\\
  Utrecht, The Netherlands.
%%]


%%[abstract

An unused value has special properties in a pure functional language. An optimising compiler
can safely throw away code that produces such a value. Likewise, a value that is referred to once
has special properties that can be exploited by an optimising compiler~\cite{DBLP:conf/icfp/JonesPS96}. In
Clean~\cite{plasmeijer01clean-rep-2}, a type is called unique if the corresponding values are only
referred to once. A compiler implementing a uniqueness type system checks, enforces, or infers the
uniqueness property of types.

Uniqueness typing is incorporated into the Clean compiler~\cite{barendsen96uniqueness}. The
input/output model of Clean relies heavily upon this feature. Haskell does not need uniqueness
typing in order to perform IO~\cite{DBLP:journals/jfp/Jones03t}, but can benefit from optimisations
that are possible on unique values, such as destructive updates on arrays.

In this master thesis, we discuss an implementation of uniqueness typing for Haskell. We take a
different strategy than Clean, allowing us to overcome a limitation of the typing in Clean. In
Clean, it is not allowed to have a data type with a shared spine and unique components, since
uniqueness propagation forces the spine to be unique as well. We treat the components
independently from the spine and show the consequences.

%%]


%%[ack
I want to express my thanks to the people of the Software Technology Group in Utrecht, and the
students of the ST-lab specifically. Their insights, and distractions, proved to be a valuable
asset during the construction of this master's thesis. Of these people, there are two people that
deserve some acknowledgment in particular: my daily supervisor Jurriaan and my roommate Gerrit.

I thank my supervisor Jurriaan for the countless amount of conversations and the patience to
comment on my work. I doubt he knew where he was getting into when I was looking for a supervisor
and he volunteered to be mine. He knows so now. However, seriously, doing my master's thesis project
at the University of Utrecht has been an enjoyable experience, of which Jurriaan has made his
contribution.

Also special thanks for Stefan for helping me in fixing spelling and grammar
erors in this master's thesis.

Among the students of the ST-lab, Gerrit has been the greatest contributor to the experiences at
the ST-lab. We've had a countless number of discussions. Sometimes about my work. Sometimes about
Gerrit his work. However, often about other subjects. Despite distracting each other from our
work, I think we both managed to have fun and put down a lot of work.

Finally, I thank everybody I worked with this last year, including the ST-lab computer that somehow
still works.
%%]



%%[main

%%@TopicIntroduction.main
%%@TopicEHC.main
%%@TopicNoBindings.main
%%@TopicPolyvariant.main
%%@TopicRecursion.main
%%@TopicPolymorphic.main
%%@TopicParallel.main
%%@TopicDataTypes.main
%%@TopicOverloading.main
%@TopicCodeGeneration.main
%%@TopicBeyondEHC.main
%%@TopicInspecting.main
%@TopicPerformance.main
%@TopicRelatedWork.main
%%@TopicConclusion.main

\appendix

%%@TopicImplementation.main

\bibliographystyle{abbrv}
{\sloppy\raggedright\small
\setlength{\parskip}{-.2ex}
\def\newblock{\hskip -.2em}
\bibliography{\jobname}
}

%%]

