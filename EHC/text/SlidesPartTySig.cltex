%%[eh2PartSigIntro
\frame<presentation>
{
\frametitle{Partial type signature}
\begin{itemize}
\item Type need not be specified completely
%%[[wrap=safecode
%%@[file:test/regress/2/ty-wild.eh%%]
%%]
\item
Only the part which needs to be specified or constrained further
\item
As an afterthought to see how well an additional feature can be added
\end{itemize}
}
%%]

%%[eh2PartSigIntroB
\frame<presentation>[containsverbatim,plain]
{
\frametitle{Partial type signature}
\begin{itemize}
\item Pretty printing shows inferred types
\begin{TT}
%%2ppfile(test/regress/2/ty-wild.eh%%)
\end{TT}
\item Shows inferred type only if partially specified
\end{itemize}
}

%%]

%%[eh2PartSig
\frame<presentation>[plain]
{
\frametitle{Partial type signatures}
\begin{itemize}
\item ``Impact analysis'' of change
\item Abstract syntax
\chunkCmdFrameUse{EHAbsSyn.2.TyExpr}
\item Parser for type expressions (|pTyExprBase|)
\chunkCmdFrameUse{EHParser.2.pTyExprBase}
\item (scanner configuration omitted)
\end{itemize}
}

\frame<presentation>[plain]
{
\frametitle{Partial type signatures}
\begin{itemize}
\item Type of
\chunkCmdFrameUse{EHInferTyExpr.2.tyVarGather}
\chunkCmdFrameUse{EHInferTyExpr.2.ty}
\item Pretty printing, |pp| part
\chunkCmdFrameUse{EHPretty.2.Wild.pp}
\item Uniq
\chunkCmdFrameUse{EHUniq.2.Wild}
\end{itemize}
}

\frame<presentation>[plain]
{
\frametitle{Partial type signatures}
\begin{itemize}
\item Gather wild type vars
\chunkCmdFrameUse{EHInferTyExpr.2.tyVarWildL}
\chunkCmdFrameUse{EHInferTyExpr.2.Wild}
\item Distributing final type info
\chunkCmdFrameUse{EHInfer.2.finValGam}
\end{itemize}
}

%%]

%%[forExplImpl
\frame<presentation>
{
\frametitle{Partial type signatures}
\begin{itemize}
\item Specifying full type signatures becomes cumbersome
\item Idea:
\begin{itemize}
\item programmer specifies explicitly what cannot be inferred
\item system infers the rest
\end{itemize}
\item Fully explicit
%%[[wrap=safecode
f ::  forall ^ a . Eq a =>     a ->  a -> forall ^ b . Eq b =>  b ->  b  ->  (Bool    , Bool    )
f =                         \  p     q                          r     s  ->  (eq p q  , eq r s  )
%%]
\item If dictionary for |Eq b| needs to be passed before others
%%[[wrap=safecode
f :: forall    b . (Eq b,  ...   ) => ...  -> ...  -> b -> b -> ...
-- INFERRED:
f :: forall a  b . (Eq b,  Eq a  ) => a    -> a    -> b -> b -> (Bool,Bool)
%%]
\item `|...|': explicit notation for missing type information to be inferred
\end{itemize}
}

\frame<presentation>
{
\frametitle{Partial type signatures}
\begin{itemize}
\item Monomorphic as well as polymorphic
%%[[wrap=safecode
f  ::  forall ^ a . (  Eq a,  ...   )  =>     a ->  a ->  ...
f  =                                       \  p     q     r       s                 ->  (eq p q  ,  eq r 3  )
-- INFERRED:
f  ::  forall ^ a .    Eq a            =>     a ->  a ->  Int ->  forall ^ b . b    ->  (Bool    ,  Bool    )
%%]
\item Type variables for monomorphic types
%%[[wrap=safecode
f  ::  forall ^ a . (  Eq a,  ...   )  =>     a ->  a ->  %b   ->  %b              ->  ...
-- INFERRED:
f  ::  forall ^ a .    Eq a            =>     a ->  a ->  Int  ->  Int             ->  (Bool    ,  Bool    )
%%]
\end{itemize}
}
%%]

%%[XX
%%]

%%[XX
%%]

%%[XX
%%]

%%[XX
%%]

%%[XX
%%]

%%[XX
%%]

%%[XX
%%]

%%[XX
%%]

%%[XX
%%]

%%[XX
%%]

%%[XX
%%]

%%[XX
%%]

