%%[abstract
A great deal has been written about type systems.
Much less has been written about implementing them.
Even less has been written about implementations of complete compilers in which
all aspects come together.
%if storyAFP04Notes
This paper fills this gap by describing the implementation
of a series of compilers
for a simplified variant of Haskell.
%else
This paper fills this gap by describing the implementation of a compiler
for a simplified variant of Haskell.
%endif
By using an attribute grammar system, aspects of a compiler implementation
can be described separately and
added in a sequence of steps,
thereby giving a series of increasingly complex (working) compilers.
Also, the source text of both this paper and the executable compilers come
from the same source files by an underlying minimal weaving system.
Therefore, source and explanation is kept consistent.
%%]

%%[context
A previous version of \thispaper\ has been presented and
distributed at the AFP2004 summerschool\footnote{The proceedings
for the AFP2004 summerschool have yet to appear.}.
This paper describes a part of a Haskell compiler under development \cite{dijkstra04ehc-web},
focusing on the type system of the langauge and its implementation.
Subsequent papers will describe the remaining parts of the implementation.

Not all parts of the implementation are explained in \thispaper.
In a subsequent paper (continuing with part II) for example data structures (|data| types, kind inference and records)
will be introduced and explained.
As a consequence at some points in \thispaper\ a forward reference will be made to material to be published
later.
This concerns mainly future design decisions which have an influence on design decisions made in \thispaper.
%%]

%%[conclusion
%%]
