%%[main

\chapter{Parallel execution paths}
\label{chapt.Parallel}

  In the languages covered up to this chapter, there is no syntactic way to write that an expression is
  conditionally evaluated. However, conditional evaluation is already possible, for example, by using
  Church booleans~\cite{typing:types-prog-lang:pierce}:

%%[[wrap=code
  true     = \t f -> t
  false    = \t f -> f
  ite      = \g t e -> g t e
  example  = ite true 1 undefined
    -- the result: example = 1
%%]

  Some occurrences of an identifier are sequential. If one occurrence is referenced on an execution path,
  then the other is referenced as well if they are sequential. An example of this is the expression |\x -> x + x|. Both occurrences
  of |x| are always on the same execution path. This is not the case for the expression |\x -> ite true x x|.
  In this expression, the two occurrences are mutually exclusive or parallel. They never occur simultaneously
  on an execution path. And sometimes, no guarantees can be made: |\g x -> ite g x 1 + x|. In this case, it
  depends entirely on |g| if  the two occurrences of |x| will be always be on the same execution path, or
  not.

  If occurrences are sequential, we can add up the lower bounds instead of taking the maximum. If occurrences
  are parallel, we can take the maximum of the upper bounds instead of adding them up. This gives a better
  approximation of the result, but requires us to discover which occurrences are parallel and which
  are sequential.

  Analyzing function applications to determine whether the operators are guaranteed to be sequential, or
  guaranteed parallel, is tricky. We discuss this subject in Section~\ref{sect.SeqParTricky}. Instead of
  analyzing the function applications the hard way, we take a look at syntactic constructs
  that guarantee that some occurrences of an identifier are sequential or parallel. For example, in practice,
  most splits in an execution path are explicitly indicated by alternatives for a function definition,
  branches of a |case| expression, or the |then| and |else| branch of an |if..then..else| expression. Since
  |if..then..else| expressions capture the essence of this section and are a prelude to |case| expressions
  of Chapter~\ref{chapt.DataTypes}, we introduce |if..then..else| expression in this chapter (Section~\ref{sect.ite}).

\section{Adding an if-then-else expression}
\label{sect.ite}

  The addition of an |if..then..else| expression is discussed in this section. Such an expression guarantees
  syntactically that occurrences on a |then| branch are parallel to occurrences on an |else| branch. It
  also guarantees that an occurrence of the guard is sequential with occurrences in the branches. Unfortunately,
  the bad news that we (in general) cannot determine the lower bound of the branches. If we know that the
  entire expression is evaluated at least once, we know that one of the branches is evaluated at least once,
  but we do not know which one. So, we are conservative and assume that the lower bound of the branches is |0|.

  The following type rule specifies what the analysis does when it encounters an |if..then..else| nonterminal:

  \begin{center}
  \rulerCmdUse{RulerUniquenessExamples.UF.expr.base.e.ite}
  \end{center}

  The guard is evaluated as often as the expression is evaluated, which we specify by a soft coercion between
  the outermost annotation of the result type of the expression and the annotation on the |Bool| type of the guard.
  The least upper bound of the |then| and |else| branch is at most the upper bound of the entire expression. The lower
  bound of the |then| and |else| branch depends on which branch is taken. We do not know this in general, so we set
  these lower bounds to |0|, with a special coercion constraint |(Sub(=>=)(q))|, which is interpreted as follows:

%%[[wrap=code
satisfied (a, b, c) (Sub(=>=)(q)) (d, e, f)
  =   0  leqL  d  -- force lower bound to 0
  &&  b  leqC  e
  &&  c  leqU  f
%%]

  So, an |if..then..else| expression gives us some information about upper bounds, at the expense of
  lower bounds for branches. We take a closer at this particular problem in section~\ref{sect.lowerite}.
  We are now going to use the information that the |if..then..else| expression provides to improve
  the aggregation constraints.

  The syntax of an |if..then..else| expression guarantees that occurrences of an identifier
  on a |then| branch are parallel to identifiers occurring on an |else| branch. There is also a
  syntactic guarantee that occurrences in the guard are sequential to both the |then| and the
  |else| branch. There is no other syntax that guarantees that two occurrences are sequential
  to each other. For example, in the case of |f x x|, it depends on how |f| treats its parameters
  in order to know if the two occurrences of |x| are parallel or not. But, we can already improve
  the solution with only the knowledge that some occurrences of identifiers are necessarily parallel,
  and some are necessarily sequential.

  The aggregation constraint consists of a sequence of annotated types of which the aggregated result needs
  to be smaller than some annotated type. Since |\*/| is commutative, we can change the order of
  the aggregation. For example, |a \*/ b \*/ c \*/ d <= e| can be written as |((a \*/ b) \*/ c) \*/ d <= e|,
  or as |(a \*/ b) \*/ (c \*/ d) <= e|. Our improved approach uses this property and we change
  the structure of the aggregation constraint accordingly:

%%[[wrap=code
  sum_constr ::= sum_expr  <=  uty
  sum_expr  ::=  uty
            |    sum_expr \+/ sum_expr  -- sequential only
            |    sum_expr \*/ sum_expr  -- sequential or parallel
            |    sum_expr \-/ sum_expr  -- parallel only
%%]

  The difference with the previous structure of the aggregation constraint is that the structure of the aggregation is not a list
  anymore, but a tree, where the internal nodes are aggregations by means of one of the three
  aggregation operators. The annotated types of the occurrences form the leafs of the tree. The representation
  in the graph is still a hyper edge, where the leafs are cardinality variables of the
  corresponding types in the constraint, and the computation is attached as label to the hyper edge.

  After conversion to graph form and during the inference of a substitution, the operators form
  a computation on lower and upper bound values. The operators are defined as follows:

%%[[wrap=code

  lower  (a \-/ b)  = lower a `max` lower b
  lower  (a \*/ b)  = lower a `max` lower b
  lower  (a \+/ b)  = lower a + lower b
  lower  delta      = delta `lookup` subst

  upper  (a \-/ b)  = upper a `max` upper b
  upper  (a \*/ b)  = upper a + upper b
  upper  (a \+/ b)  = upper a + upper b
  upper  delta      = delta `lookup` subst

%%]

  The operator |\*/| can be used anywhere, but |\+/| and |\-/| are less conservative versions
  in case we know that some occurrences are parallel or sequential.

  The idea is that we construct a computation from the structure of an expression (Figure~\ref{RulerUniquenessExamples.B.comp.base}).
  An occurrence of occurrence |x :: utau| is turned into the computation |utau|. If we have such a
  computation for the function expression and argument expression of a function, we combine these
  two computations with the |\*/| operator, since it depends on the function whether or not they are
  sequential or parallel, and our approach does not have this knowledge. For an |if..then..else|
  expression, the computations of the two branches are parallel, and are combined by the |\-/| operator. The |\+/|
  operator is used between the guard and the branches, since it is guaranteed that identifier occurrences of the guard are
  on the same execution path as identifier occurrences in the branches. There are some additional rules in case there
  is no occurrence in a subexpression. We omit the case for the |let| in the above type rules, but
  assume that occurrences in expressions of a |let| are combined by means of the |\*/| operator.

  \rulerCmdUse{RulerUniquenessExamples.B.comp.base}

  In the case for a lambda and a |let|, we generate the aggregation constraint for an identifier |x :: (Sub(utau)(def))| by
  taking the computation |compFormat| and turn it into the constraint |compFormat <= (Sub(utau)(def))|.

  This approach allows us to improve the upper bounds of identifiers that occur only parallel. The approach
  does not help much with the lower bound of identifiers (see next section). However, in general the
  approximation of the bounds in presence of multiple execution paths, is improved. Perhaps as important,
  is that it is a fairly easy improvement, since we know exactly from the structure of the abstract
  syntax tree where the execution paths are split up.

\section{Lower bounds and if-then-else}
\label{sect.lowerite}

  The |if..then..else| is a problem for the lower bound of the branches, because we do not know which branch
  is taken. In the general case with a |case|-expression, it is even possible that none of the branches is
  taken. We can say something about all branches of an |if..then..else| (or |case|) expression). Suppose that
  some identifier |x| occurs (indirectly) on each branch and has a lower bound of |1| if each branch has a
  lower bound of |1|. This means that the value represented by |x| is used if a branch is evaluated. Every
  branch evaluates |x|, so it does not matter which branch is taken, thus the lower bound of |x| is at least
  the lower bound of the entire expression.

  One way to detect this situation is by performing a strictness analysis on the |if..then..else| or case expression (Section~\ref{sect.strictness}).
  If we know that some |(Delta(1))| in the definition-site type of |x| is used if some |(Delta(2))| in the type of the
  expression is used, then we can add |(Delta(2))| to the aggregation of |(Delta(1))| (i.e. |(...) \*/ (Delta(2)) <= (Delta(1))|
  instead of |(...) <= (Delta(1))|). However, this can depend on functions that are passed to a function where the
  |if..then..else| appears is, so that we cannot perform the analysis beforehand.

  Alternatively, we can detect this situation in the constraint graph. The above description translates informally
  as follows: if there is a path from an annotation on a type of the branch to an annotation of the type
  of an occurrence of |x| in that branch, and all branches have such a path, then we can use the lower
  bound of the corresponding annotation on the result of the |if..then..else| expression in the aggregation of the
  lower bound of the annotation on the identifier.

  More formally, the implementation is as follows. We add the following information to the aggregation
  constraint at the definition-site of an identifier:

%%[[wrap=code
  BranchCombine
    Ty            -- definition-site annotated type of the identifier
    [Ty]          -- result annotated types of each branch
    Ty            -- result annotated type of the entire if-then-else or case expression
%%]

  Suppose the definition-site annotated type is |D|, the annotated types of each branch are
  |(Sub(T)(1)) ... (Sub(T)(n))|, and the annotated type of the result of the if-then-else
  is |R|. Take an annotation |delta| from |D|. Subsequently, take an annotation |(Sub(delta)(r))|
  from |R|. Assuming that the types of the branches and the result of the expression have the
  same structure, take annotations |(Sub(delta)(1)) ... (Sub(delta)(n))| respectively from
  |(Sub(T)(1)) ... (Sub(T)(n))|, such that each |(Sub(delta)(i))| corresponds to |(Sub(delta)(r))|.
  Now, if there is a path from each |(Sub(delta)(i))| to |delta| in the constraint graph, then
  the lower bound of |delta| is allowed to be |(Sub(delta)(r))|. If there is a hyper edge on
  such a path, then all leaves of the hyper edge must be on such a path as well.

  We only have to check for this path once. This can be done just before graph reduction. If there
  is a path, we change the aggregation constraint such that it includes those |(Sub(delta)(r))|. The
  only problem is that when the graph is constructed using a fixpoint iteration on the graph, that
  the path may not exist yet (for example, due to recursion in one of the branches).


\section{Function application and sequential occurrences of an identifier}
\label{sect.SeqParTricky}

  There is still a deficiency in combination with function applications. Arguments to a function
  application are usually sequential, except for functions that make an exclusive choice between
  a parameter |a| and a parameter |b|, depending
  on some other condition or parameter. An example is the function |ite| given in the introduction
  of this chapter. The arguments passed to |a| and |b| are unlikely to share occurrences of
  the same identifier, because one can ask himself why one would make a choice then. So, we
  would like to assume that occurrences of an identifier appearing as arguments to a
  function, are sequential to each other.

  Assuming that the relation between occurrences is sequential when it is actually parallel,
  has only minor influence on the upper bound. We are a bit too conservative in this case, but it
  rarely results in much worse upper bounds in practice. Unfortunately, this story does not
  hold for the lower bound. If we assume that a relation is sequential when it is parallel, then
  we add lower bounds when we are only allowed to take the maximum value and we can give a
  wrong estimation for the lower bound. Thus, we can only assume that the relation
  between occurrences is sequential for the lower bound if it is guaranteed to be the case.

  This is rather unfortunate, since most of the occurrences of an identifier on function
  arguments will be sequential, but we cannot make use of this fact for the lower bound. Unless
  we can prove that the occurrences are sequential. Unfortunately, this is difficult to
  prove. Consider for example:

%%[[wrap=code
  let  f g t e =  if g then t else e
  in   \x -> f (... complicated expression ...) x x
%%]

  The two occurrences of |x| are parallel to each other, although they appear to be sequential. Determining
  whether or not the occurrences of |x| are sequential is a difficult problem. The function |f| can
  be a function that puts the arguments into a list and passes it to some function that extracts the second
  element if the first element is greater than ten. This makes it difficult to capture the relations between
  occurrences of a variable.

  However, there is an elegant way to discover from most of the perhaps-sequential occurrences that they
  are in fact sequential. Consider the following expression:

%%[[wrap=code
  f (Sub(x)(1)) (Sub(x)(2))
%%]

  If we know that both |(Sub(x)(1))| and |(Sub(x)(2))| are used at least once, then the relation between
  the two is sequential. Why? A lower bound of |1| means that the value represented by |(Sub(x)(1))| is
  used at least once on each execution path. The same for |(Sub(x)(2))|. So, they occur both on every
  execution path, and thus occur together on each execution path.

  This means that the |\*/| can be replaced by the |\+/| operator if the lower bound of both arguments
  is at least |1|. Now compare the definition of |\*/| and |\+/|. The only difference is in the
  computation of the lower bound. Lower bound values are special in the sense that it is addition
  up to at most 1, which results into the following properties:

%%[[wrap=code
  1 + 1 = 1 = 1 `max` 1
  1 + 0 = 1 = 1 `max` 0
%%]

  There is no distinction between the three aggregation operators due to the limited possibilities
  for the lower-bound usage annotation! There is no such deficiency.

  However, this is only the case because a lower bound of |1| is the highest allowed lower bound. If
  we generalize our approach by allowing higher lower bounds, then the above property does not hold
  anymore. Then there is a difference between the |\+/| operator and the |\*/| operator for the
  lower bound. In such a situation, the property that two occurrences are sequential if they both
  have a lower bound of at least |1|, does still hold and we can replace the |\*/| operator with
  the |\+/| operator to improve the approximation in this case. Although this fact is not useful for
  our analysis, it is important enough to keep it in mind for possible generalizations of our
  approach.


\section{Conclusion}

  Parallel execution paths pose interesting problems. It puts the difference between upper and lower bounds into perspective.
  Properly dealing with the existence of parallel execution paths require us to determine which occurrences of an identifier
  are parallel and which occurrences are sequential.

  The usage analysis of Clean (called labeling or marking) is related to our approach in this
  chapter. Like Clean, we make a distinction between the |then| and |else| branch of an
  |if..then..else| expression. Unlike Clean, our analysis can detect that some identifiers are not
  used, which has consequences for the aggregation result.

  However, the two approaches are difficult to compare. The usage analysis of Clean is described in
  term graphs, where we describe it in terms of abstract syntax trees. Clean allows the use of a
  strict |let|, which makes evaluation order explicit. With an explicit evaluation order, it is
  possible to distinguish read and write access. If it is guaranteed that a value is accessed
  for writing only once, and all other operations on the value are read accesses that occur before
  the write access, then the value can still be updated in place. This distinction cannot be
  easily made in Haskell since the evaluation order is implicit and difficult to analyse, as
  evaluation order is determined by (lazy) pattern matches.

%%]
