%%[main

\chapter{Prerequisites}

  We use the Essential Haskell Compiler~\cite{dijkstra04ehc-web} as a starting point in order to prototype the uniqueness type system.
  In this chapter we explain why we chose this compiler and to bring you up-to-speed with several language
  features of the EH language. Design decisions of the compiler and the language features to support, influenced
  the implementation of the prototype. Although not essential, some background knowledge helps to understand some
  decisions taken further on in this thesis. The eager reader can skip this chapter and
  delve directly into uniqueness typing (Chapter~\ref{chapt.NoBindings}).


\section{Why EH?}

  There are a lot of (partial) compilers for Haskell. Which compiler to use for prototyping uniqueness typing?
  Choosing the right compiler is important, since uniqueness typing crosscuts almost the entire implementation
  of type system in a a compiler. For prototyping, one would want a compiler that does not have too much features,
  but enough to keep it interesting.
  
  Several compilers where considered for prototyping. GHC is an example of a complete, but extensive compiler.
  A full implementation of uniqueness typing in such a compiler is interesting, since people can directly use it
  in practice. But, having to deal with all the intimacies of a large compiler is not suitable for prototyping.
  A lightweight compiler is preferable to stay focused. A compiler such as
  ``Typing Haskell in Haskell''~\cite{jones99thih} is the other extreme. It lacks infrastructure. For example,
  adding additional environments is a tedious task, since it requires explicitly threading of the environments
  as additional parameter and result through all the functions. The compiler to use for experimentation has to
  lie somewhere in between these extremes.

  Now EH enters the picture. EH is a family of languages that resemble Haskell. Of these languages, there are
  currently nine selected as main languages. These main languages are totally ordered into versions, meaning that each
  subsequent language extends the other. Starting with a simply typed lambda-calculus, each language adds
  another language feature until we end up with a language that has a feature set that is roughly comparable to
  the feature set of Haskell. Each language has an associated compiler. The compilers are structured to inherit implementation from a
  previous version. The intention is that spreading out language features over multiple versions, allows
  an implementation and explanation in relative isolation.

  The EH project offers what we need for prototyping:
  \begin{itemize}
  \item It allows the implementor to pick a language that has enough features, but omits features that are
        not required. For example, we do not deal with code generation (EH 8), nor want to touch the intimacies
        of overloading in EH (EH 9). On the other hand, we want polymorphic types (EH 4) and algebraic data types
        (EH 5). We also need kind information (EH 7) (Chapter~\ref{chapt.Polarity}). So, our base language is EH 7.
        We thus have the features we need, but not too many features.
  \item Infrastructure, including type inference, parser, pretty-printing and facilities for debugging.
  \item Compatibility with the UUAG system~\cite{dijkstra04thag-part1}. The UUAG system allows us to encode the
        uniqueness-type system, without having to touch the existing code much.
  \item The ruler system that pretty printed the type rules in this master's thesis and a part of the implementation.
  \end{itemize}


\section{Language features of EH}

  In this section, we briefly consider some language features of EH that are not in Haskell, but are part
  of EH. Such features pop up in the implementation now and then. This section touches these features and
  gives some references for further reading.
  
  \subsection{Quantifiers and qualifiers everywhere}
  
    Haskell makes a distinction between types and type schemes. A type scheme is never shown to the
    programmer since there is no explicit quantification. Type variables in a type are
    (universally) quantified or qualified (overloading/type classes) in a type scheme. A type does not contain
    quantifiers nor qualifiers. In EH this is not the case. Quantifiers and qualifiers may occur
    everywhere in the type. Allowing quantifiers and qualifiers everywhere in the type has
    consequences.

    The consequences for allowing quantifiers everywhere can best be illustrated an example. The
    following types for the functions |f| and |g| are not equal:

%%[[wrap=code
      f :: forall alpha . (alpha -> Int)
      g :: (forall alpha . alpha) -> Int
%%]

    When calling |f|, the caller chooses a type to substitute for |alpha|. For example, writing
    |f 3| (|alpha| instantiated to |Int|) or |f True| (|alpha| instantiated to |Bool|) is allowed.
    Unifications of types in the body of |f| may not assume that |alpha| is instantiated to some
    type:

%%[[wrap=code
      let  f :: forall alpha . (alpha -> Int)
           f = \x -> x + 3  -- error
      in   f 3 + f True     -- OK
%%]
%%[[wrap=code
      let  f :: forall alpha . (alpha -> Int)
           f = \_ -> 3      -- OK
      in   f 3 + f True     -- OK
%%]

        For |g| the situation is reversed. The body of |g| is allowed to choose the type of |alpha|, and the
    caller is not. In this case, the caller can only pass |undefined|, since that is the only value
    with type |forall alpha . alpha|:

%%[[wrap=code
      let  g :: (forall alpha . alpha -> alpha) -> (Int, Bool)
           g = \i -> (i 3, i True)  -- OK
      in   g (+1)                      -- error
%%]
%%[[wrap=code
      let  g :: (forall alpha . alpha -> alpha) -> (Int, Bool)
           g = \i -> (i 3, i True)  -- OK
      in   g id                     -- OK
%%]

    More programs can be typed when quantifiers are allowed everywhere. Programs using the |ST| monad~\cite{launchbury94lazy}
    require this feature as the |runST| function has a type with a universal quantifier in a
    contra-variant position: |runST :: forall a . (forall s . ST s a) -> a|. Peyton Jones et al.~\cite{jones04practical},
    give several examples why such \emph{higher-ranked} types are useful, and what the consequences
    are for type inference~\cite{DBLP:journals/toplas/KfouryTU93, kfoury99rank2-decid}. Further discussion about this topic is beyond the scope of
    this master's thesis.

    Besides quantifiers everywhere, EH also allows qualifiers everywhere. Similar to quantifiers
    everywhere, the location of the qualifier determines who (caller or callee) supplies the
    evidence. The evidence is the dictionary resulting from the instance declaration that
    supplies the implementation of the overloaded function corresponding to the qualifier~\cite{peytonjones97typecl-explore}.
    For example:
    
%%[[wrap=code
    f :: Eq alpha => alpha -> alpha -> Bool
    g :: (forall alpha . Eq alpha => [alpha] -> Bool) -> Bool
%%]

    The caller of |f| supplies the evidence, and the body of |g| passes the evidence to the
    first argument of |g|. Again, we only mention this feature of EH here. A more thorough
    discussion is beyond the scope of this master's thesis.

  \subsection{Polymorphic kinds}
  \label{sect.PolymorphicKinds}

    A type system for Haskell uses \emph{kind inference} to check type signatures. Haskell has monomorphic kinds. At the
    end of kind inference, all remaining kind variables are defaulted to |*|.

%%[[wrap=code
    data App f a = A (f a)       -- given by the programmer
    App :: (* -> *) -> * -> *    -- inferred by the compiler
%%]

    On the other hand, EH has polymorphic kinds. After kind inference for some binding group, the remaining
    kind variables are generalized and universally quantified:

%%[[wrap=code
    App :: forall kappa . (kappa -> *) -> kappa -> *
%%]

    The difference is that the |kappa| can not only be instantiated to |*|, but also
    to a more complex kind. The following set of types are not allowed to occur
    simultaneously in a Haskell program, but can in EH\footnote{The subscripts below a |App| type constructor are not part of the code, but we use it to unambiguously refer to an occurrence of |App|.}:

%%[[wrap=code
    type List a = (Sub(App)(1)) [] a
    data Fix f = In (f (Fix f))
    type InfNested = (Sub(App)(2)) Fix List
%%]

    In this example, the kind of |(Sub(App)(1))| is instantiated to |(*->*) -> * -> *| and
    |(Sub(App)(2))| to: |((* -> *) -> *) -> (* -> *) -> *|. In Haskell, you
    can either get the first, or the second (with a trick), but not both at the same time.
    
    Polymorphic kinds complicate analysis on data types, similar to complications of
    polymorphism on our uniqueness analysis (Chapter~\ref{chapt.Polymorphic}).

  \subsection{Extensible records}

    EH supports lightweight extensible records as discussed by Jones et al.~\cite{jones99lightweight-ext-rec}.
    A simple way to look at records is as tuples with named components. There are
    operations to add a component to a record (record extension) and to select a component
    from it (record extraction):

%%[[wrap=code
    let  r = {{() | x = 3} | y = 4}  -- create the record {x=3, y=4}
         r' = { r | y := 3 }         -- record update
    in   r.x + r'.y                  -- select components from the record
%%]

    Replace the bars with commas and the comparison with tuples is striking. On the type
    level, records look like tuples with named components:

%%[[wrap=code
    r :: {{() | x :: Int} | y :: Int}
%%]

    Consider a function |f| that adds a field |x| with value |3| of type |Int| to a record:

%%[[wrap=code
    f = \r -> {r | x = 3}
%%]

    What is the type of |r| in |f|? If |r| has a polymorphic type, then we can
    pass any record as long as it does not have a field |x|. The type system
    encodes the fact that the record is polymorphic by assigning a special,
    universally quantified, type variable to |r|, and encodes the fact that the
    record may not already have a field |x| by qualifying the type variable with
    a |Lacks|-predicate:

%%[[wrap=code
    f :: Lacks x v1 => v1 -> {v1 | x :: Int}
%%]

    Calling |f| requires evidence that argument record does not have a field |x|. The
    compiler checks this condition, and inserts as evidence an offset within the record
    to store the value of |x|.


\section{Experience}

  Using EH for prototyping turned out to be an advantage over other compilers for several reasons. One reason is that getting to know the
  compiler and tools turned out to be relatively easy. Examining the first EH language, and gradually
  going up to languages with more features---studying the differences---turned out to work in practice. It also
  helps to discover dependencies between features, which is important to discover how isolated each
  component is, and thus how easily you can make modifications in a certain area.

  A big advantage is compatibility with the UUAG system. The UUAG system allows us to hook into the compiler
  with virtually no need to touch the original code. Alternatives and attributes are chosen in such a way that new
  alternatives are most of the time correctly dealt with by code from copy rules, reducing the amount of required
  code severely. So, due to the UUAG system, the code is extensible and short, which is an
  asset for (rapid) prototyping.
  
  Unfortunately, EH is not the perfect compiler (yet). EH distinguishes several versions, but
  individual features cannot be selected. For example, higher-ranked types and existentials are
  introduced before data types. To support algebraic data types, higher-ranked types and existentials have to
  be supported as well. These features are not essential for the uniqueness typing story, and are
  thus needless complications.

  Another problem is that the compiler is still in heavy development. This is not a theoretical
  problem, but sometimes a nuisance in practice. The structure of the compiler
  is not yet mature, and interfaces change every now and then. This does not make
  EH a stable framework to build upon. Some functionality that exists today, may be gone tomorrow.

  The overall experience, however, is that the EH compiler architecture is well-suited for prototyping and becomes more suitable with
  each drop of effort that is invested into the EH project.

%%]
