%%[main

\chapter{Inspecting Results}
\label{chap.InspectingResults}

Optimisations, such as in-place update, can have severe consequences on performance. In some circumstances, a programmer
relies upon some optimisations being applied. As a programmer, we want to make sure that this is also the case. If the
optimisation is not applied, we want to know why not. This requires a way for the compiler to output the results of the
analysis, or a way for the programmer to enforce restrictions. We briefly consider both aspects in this chapter.

\section{HTML Pretty Printing}

  When creating the prototype, we discovered that there are a lot of annotations occurring everywhere, and that
  constraints graphs tend to get confusingly big (as in not fitting on a few pages anymore). Such graphs are difficult
  to interpret for a human being. We discovered that the graphs are not important for a programmer.
  The analysis is essentially a huge propagation of reference counts with some coercions and some additions. A programmer
  is interested in reading the results of the analysis on the types of identifiers that occur in the program. For example,
  if the analysis returns that some annotation indicates that a value is used in an arbitrary way, the programmer wants to
  see where in the type the annotation is located, and check related annotations to investigate what is causing it.
  
  But, there is a problem: the analysis is polyvariant. In a single picture, we can only give concrete values for
  cardinality annotations on the types of the outermost binding-group. For the inner binding-groups, we have no substitution,
  since there can be many or even no uses of a binding-group, so which one should we pick? Therefore, we propose an
  interactive solution.

  The compiler creates an HTML file with a pretty print of the program (See Figure~\ref{fig.pretty} for an example). Initially, all the pretty-prints of the
  binding-groups are inactive, indicated with a gray color. Only the outermost binding-group is active, indicated
  by a black color and some syntax highlighting. The identifiers of an active binding-group are clickable. If such
  an identifier is clicked, it activates the corresponding binding-group. For each active binding-group, we know
  the path from the root of the program, and the corresponding substitutions. Each identifier in an
  active binding group can be expanded such that the annotated type becomes visible, with the substitution applied
  to it.

  \begin{PlainFigure}{}{Example of an HTML pretty print}{fig.pretty}
  ~\\
  \includegraphics[width=10cm]{unq-inspection}
  \end{PlainFigure}
  
  Interactive inspection of the analysis result appears to be very useful. The outcome of the analysis is typically
  large, but the interactive pretty print gives tight control over what is visible and what not. For example, a
  typical use-case is:
  
  \begin{quote}
  Why is this integer not unique? Oh I see, it is passed to a function that says that it is shared. Ok, lets
  open up the definition of the function to see why this is the case. Ah, the parameter is passed twice to
  some function and it appears that it uses both arguments once.
  \end{quote}

  There are some issues. We just assume that clicking on a recursive definition does not change anything. But this
  way we cannot look into a function that has different cardinalities for a recursive call. On the other
  hand, this does not occur often. But even when ignoring recursive definitions, the number of possible substitutions
  on binding groups is large, since chunks of HTML-code need to be generated for each sequence of identifiers on an
  execution path. This does not scale up to large programs. For a large program, either some direct interaction
  with the solver is required, or if we keep using HTML pretty-prints, the compiler needs to generate some piece
  of JavaScript code that can calculate the substitutions. Unfortunately, this does not work well together with
  the fixpoint iteration on constraints (Section~\ref{sect.FullRecursion}), since that would require most of the
  inferencer to be available in JavaScript as well. For the normal fixpoint iteration approach (Section~\ref{Sect.MonovariantRecursion}),
  only a table representing the constraint graph and the computation of a substitution from this table, needs to be
  generated for each binding group.

  Our experience shows that in order to understand the uniqueness typing of a program, it helps to have
  some interactive and visual feedback. The pretty printing approach of this section helps a lot, and it may be an
  interesting future work to see if there are other techniques to explain to the programmer why or why
  not the compiler infers that some value is unique or not.

\section{Signatures}
\label{sect.Signatures}

  But inspecting a program is not enough. Sometimes, you want to enforce that some type has a certain cardinality in order to
  guarantee that some optimisation is made. Or, as is the case in Clean, where a unique world is required for IO. Care has to be taken that
  the world remains unique throughout the program. We discuss how we can use signatures to enforce certain uniqueness properties.
  
  Section~\ref{sect.Helping} described how signatures can be specified by the programmer. Signatures to replace the
  constraints for a binding group are difficult to specify since it needs to capture dependencies on other
  binding groups. But we can augment signatures with additional constraints given by the programmer.
  
  We assume that the programmer specifies the constraints in the same way as in Section~\ref{sect.ProgSpecified}, but
  treat the specification differently. The programmer gives a partially annotated type, and a set of
  constraints. Parts of the type that are not annotated do not result in additional constraints. The solver
  is adapted such that it signals an error when the value of a concrete annotation is changed. For example,
  if the programmer supplies the constraints |delta =>= (Card(1)(1)), (Card(1)(1)) =>= delta|, but the inferencer
  derives that |delta| is |(Card(1)(*))|, the substitution of |delta| is changed from |(Card(1)(1))| to |(Card(1)(*))|,
  which we consider an error since |(Card(1)(1))| was given by the programmer. A special |top| value is used
  for the cardinality annotation to indicate that the annotation is in error.

  To improve the quality of the error message, the programmer can attach an error message to a constraint. This requires
  another usage property above |*| represeting a conflict with an error message. For example:

%%[[wrap=code
  data (Sup(FileHandle)(delta)) = ... , delta === (Card(onemin)(onemin)) {A file handle must remain unique}
  inplaceSort :: Array (Sup(Int)(delta)) -> Array Int, delta === (Card(onemin)(onemin)) {Only arrays with unique elements can be sorted in-place}
%%]

  There are two ways to proceed from here. The HTML file can be used to investigate a trail of |top| values through
  the program and indicate the sites that cause trouble. Or, we can generate an error message if we encode some
  context information in the constraints, such as the file location of the expression that generated
  the constraint. Care needs to be taken that this context information is preserved when reducing the graph (or, replay
  the substitution on the unreduced graph to obtain context information).

%%]
