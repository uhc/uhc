%%[chapter
\chapter*{Abstract}\markboth{Abstract}{}
Compilers developers often delegate the generation of executable code to a C compiler to avoid the complexity of native assembly generation. In this thesis, we focus on the executable code generation of the Essential Haskell Compiler (EHC) by using the Low Level Virtual Machine (LLVM) assembly language, instead of C. LLVM assembly is a typed assembly language. A typed assembly languages abstracts over machine properties to provide an architecture neutral assembly language specifically designed for code generation. It resembles a typical native assembly language enriched with high level features as a type system, function call abstractions, and virtual registers. These languages offer less abstractions than a high-level language as C, but give more control over the generated code.

This thesis studies to what extent the LLVM assembly language is a suitable EHC code generation target, compared to the existing C code generation target. We investigate the impact LLVM assembly generation has on the design of EHC and the efficiency of the generated code. We show that the generation of LLVM assembly imposes minor changes on the EHC design by presenting a backend that generates LLVM assembly that is similar to the backend that generates C. Additionally, we show that compilation via LLVM assembly improves the compilation time, file size, execution time and runtime memory consumption of the average Haskell program compared to the executables generated via C.
%%]