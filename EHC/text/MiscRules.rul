preamble tex "%include lhs2TeX.fmt\n%include afp.fmt\n%include ehrules.fmt"

external ANY

-------------------------------------------------------------------------
-- Theorems
-------------------------------------------------------------------------

scheme hm =
  holes [ e: Expr, Gamma: Gamma | | sigma: Ty ]
  judgespec Gamma :-.."HM" e : sigma

ruleset hm scheme hm "" =
  rule dummy =
    -
    judge R : hm = Gamma :- e : ANY

scheme hmv =
  holes [ Transl: Expr, Gamma: Gamma | | sigma: Ty ]
  judgespec Gamma :-.."HM" Transl : sigma

ruleset hmv scheme hmv "" =
  rule dummy =
    -
    judge R : hmv = Gamma :- Transl : ANY

scheme sysf =
  holes [ e: Expr, Gamma: Gamma | | sigma: Ty ]
  judgespec Gamma :-.."F" e : sigma

ruleset sysf scheme sysf "" =
  rule dummy =
    -
    judge R : sysf = Gamma :- e : ANY
    
scheme sysfv =
  holes [ Transl.a: Expr, Gamma: Gamma | | sigma: Ty ]
  judgespec Gamma :-.."F" Transl.a : sigma

ruleset sysfv scheme sysfv "" =
  rule dummy =
    -
    judge R : sysfv = Gamma :- e : ANY
    
scheme eh4 =
  holes [ e: Expr, Gamma: Gamma | | sigma: Ty ]
  judgespec Gamma :-.."EH" e : sigma

ruleset eh4 scheme eh4 "" =
  rule dummy =
    -
    judge R : eh4 = Gamma :- e : ANY

scheme ehv =
  holes [ e: Expr, Gamma: Gamma | | sigma: Ty, Transl: Expr, Transl.a: Expr ]
  judgespec Gamma :-.."EH" e : sigma ~> Transl ; Transl.a

ruleset ehv scheme ehv "" =
  rule dummy =
    -
    judge R : ehv = Gamma :- e : ANY ~> e ; e
    
-------------------------------------------------------------------------
-- Entailment
-------------------------------------------------------------------------

scheme entailn =
  holes [ prenv: PrEnv, predschemes1: Preds, predschemes2: Preds ]
  judgespec prenv; predschemes1 ::-."e" predschemes2

ruleset entailn.all scheme entailn "Entailment" =
  rule mono =
    judge superSetOf = preds.1 >= preds.2
    -
    judge entailn = prenv; preds.1 ::- preds.2

  rule trans =
    judge entailn = prenv; preds.1 ::- preds.2
    judge entailn = prenv; preds.2 ::- preds.3
    -
    judge entailn = prenv; preds.1 ::- preds.3

  rule closed =
    judge entailn = prenv; preds.1 ::- preds.2
    -
    judge entailn = prenv; subst preds.1 ::- subst preds.2

  rule class =
    judge classDef = prenv; preds.2 => pred.3
    judge entailn = prenv; preds.1 ::- pred.3
    -
    judge entailn = prenv; preds.1 ::- preds.2
    
  rule inst =
    judge instDef = prenv; preds.3 => pred.2
    judge entailn = prenv; preds.1 ::- preds.3
    -
    judge entailn = prenv; preds.1 ::- pred.2
    

scheme entailscn =
  holes [ prenv: PrEnv, predschemes1sc: Preds, predschemes2sc: Preds ]
  judgespec prenv; predschemes1sc ::-."e" predschemes2sc

ruleset entailscn.all scheme entailscn "Entailment (scoped, declarative)" =
  rule class =
    judge classDef = prenv; preds.2 => pred.3
    judge entailscn = prenv; preds.1 ::- pred.3.s
    -
    judge entailscn = prenv; preds.1 ::- preds.2.s
    
  rule inst =
    judge instScDef = prenv; preds.3 => t, pred.2
    judge visibleIn = t <= s
    judge entailscn = prenv; preds.1 ::- preds.3.s
    -
    judge entailscn = prenv; preds.1 ::- pred.2.s

  rule scope =
    judge entailscn = prenv; preds.1 ::- pred.2.t
    judge visibleIn = t <= s
    -
    judge entailscn = prenv; preds.1 ::- pred.2.s

ruleset entailscn.algo scheme entailscn "Entailment (scoped, CHR suitable)" =
  rule class1 =
    judge classDef = prenv; preds.2 => pred.3
    judge entailscn = prenv; preds.1 ::- pred.3.s
    -
    judge entailscn = prenv; preds.1 ::- preds.2.s
    
  rule class2 =
    judge classDef = prenv; preds.2 => pred.3
    judge notVisibleIn = s </ t
    judge commonScope = t' <= s, t
    judge entailscn = prenv; preds.1 ::- pred.3.t'
    -
    judge entailscn = prenv; preds.1 ::- (pred.3.s, preds.2.t)
    
  rule class3 =
    judge classDef = prenv; preds.2 => pred.3
    judge notVisibleIn = t </ s
    judge commonScope = t' <= s, t
    judge entailscn = prenv; preds.1 ::- pred.2.t'
    -
    judge entailscn = prenv; preds.1 ::- (pred.3.s, preds.2.t)
    
  rule inst =
    judge instScDef = prenv; preds.3 => t, pred.2
    judge entailscn = prenv; preds.1 ::- preds.3.s
    judge visibleIn = t <= s
    -
    judge entailscn = prenv; preds.1 ::- pred.2.s

  rule scope =
    judge entailscn = prenv; preds.1 ::- pred.2.t
    judge visibleIn = t <= s
    judge notEqualScope = s /= t
    -
    judge entailscn = prenv; preds.1 ::- (pred.2.s, pred.2.t)

relation superSetOf =
  holes [ preds.1: Preds, preds.2: Preds ]
  judgespec preds.1 >= preds.2
  judgeuse tex preds.1 `supseteq` preds.2

relation visibleIn =
  holes [ sc.1: Scope, sc.2: Scope ]
  judgespec sc.1 <= sc.2
  judgeuse tex sc.1 `visibleIn` sc.2

relation notVisibleIn =
  holes [ sc.1: Scope, sc.2: Scope ]
  judgespec sc.1 </ sc.2
  judgeuse tex not (sc.1 `visibleIn` sc.2)

relation commonScope =
  holes [ sc.1: Scope, sc.2: Scope, sc.3: Scope ]
  judgespec sc.1 <= sc.2, sc.3
  judgeuse tex sc.1 === sc.2 `commonScope` sc.3

relation notEqualScope =
  holes [ sc.1: Scope, sc.2: Scope ]
  judgespec sc.1 /= sc.2
  judgeuse tex sc.1 /= sc.2

relation classDef =
  holes [ prenv: PrEnv, preds.1: Preds, pred.2: Pred ]
  judgespec prenv; preds.1 => pred.2
  judgeuse tex "class" ^^ preds.1 => pred.2 `elem` prenv

relation instDef =
  holes [ prenv: PrEnv, preds.1: Preds, pred.2: Pred ]
  judgespec prenv; preds.1 => pred.2
  judgeuse tex "instance" ^^ preds.1 => pred.2 `elem` prenv

relation instScDef =
  holes [ prenv: PrEnv, preds.1: Preds, pred.2: Pred, sc: Scope ]
  judgespec prenv; preds.1 => sc, pred.2
  judgeuse tex ("instance" ^^ preds.1 => pred.2, sc) `elem` prenv

